foo bar
baz
>> val x = 10;
>> x + 1;
>> g `!x. 4 < x /\ x < 10 ==>
          x < 20`;
\end{verbatim}

\begin{session}
>>_ open arithmeticTheory;
>> ADD_CLAUSES;

>> load "bagTheory";
>> bagTheory.BAG_IN_BAG_INSERT;

This case illustrates an interesting issue: the HOL system itself writes a message to standard out; we'd like to capture this so that it is properly sequenced with the other output.

>> g `p ∈ set l ⇒ ∃i. i < LENGTH l ∧ (p = EL i l)`;
>> ``3 <> 4``;
>> type_of ``[]``;
\end{session}
>> 3 +
 4;
foo
bar

   >> "indented string";

   >> x + size "indented\
    \string";
   >> 10 +
      20 +
       4;

  >>> is something I want passed “unchanged”

###use should also be let through

  >>- "input elided";

>>+ 3 div 0;

##eval[t] Term`p /\ q ==>
               r`

>> t;

##eval Term`p /\ q ==>
            r`;

##eval 3 + 4;

>>__ g `!n. 0 < n ==> 0 < n * n`;
>> e Induct;

>> val foo = store_thm(
 "foo",
 ``p /\ q ==> p``,
 strip_tac);
>>__ val foo = store_thm(
 "foo",
 ``p /\ q ==> p``,
 strip_tac);
>> foo;
##parsetm x /\ y
##parsety α list
##parsetm :'a list
>>__ load "root2Theory"
>> root2Theory.SQRT_2_IRRATIONAL
