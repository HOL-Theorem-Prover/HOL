---
header-includes: |
  \usepackage{amssymb}
  \usepackage{stmaryrd}
  \usepackage{bbm}
  \usepackage{accsupp}
  \newcommand*{\llbrace}{%
    \BeginAccSupp{method=hex,unicode,ActualText=2983}%
      \textnormal{\usefont{OMS}{lmr}{m}{n}\char102}%
      \mathchoice{\mkern-4.05mu}{\mkern-4.05mu}{\mkern-4.3mu}{\mkern-4.8mu}%
      \textnormal{\usefont{OMS}{lmr}{m}{n}\char106}%
    \EndAccSupp{}%
  }
  \newcommand*{\rrbrace}{%
    \BeginAccSupp{method=hex,unicode,ActualText=2984}%
      \textnormal{\usefont{OMS}{lmr}{m}{n}\char106}%
      \mathchoice{\mkern-4.05mu}{\mkern-4.05mu}{\mkern-4.3mu}{\mkern-4.8mu}%
      \textnormal{\usefont{OMS}{lmr}{m}{n}\char103}%
    \EndAccSupp{}%
  }
  \DeclareUnicodeCharacter{393}{\ensuremath{\Gamma}}
  \DeclareUnicodeCharacter{394}{\ensuremath{\Delta}}
  \DeclareUnicodeCharacter{3B1}{$\alpha$}
  \DeclareUnicodeCharacter{3B2}{$\beta$}
  \DeclareUnicodeCharacter{3BB}{$\lambda$}
  \DeclareUnicodeCharacter{3C3}{\ensuremath{\sigma}}
  \DeclareUnicodeCharacter{3C4}{\ensuremath{\tau}}
  \DeclareUnicodeCharacter{1D40}{\ensuremath{{}\sp{\top}}}
  \DeclareUnicodeCharacter{1D62}{\ensuremath{{}\sb{i}}}
  \DeclareUnicodeCharacter{1D63}{\ensuremath{{}\sb{r}}}
  \DeclareUnicodeCharacter{201C}{\mbox{\textrm{\textquotedblleft}}}
  \DeclareUnicodeCharacter{201D}{\mbox{\textrm{\textquotedblright}}}
  \DeclareUnicodeCharacter{207A}{\ensuremath{{}\sp{+}}}
  \DeclareUnicodeCharacter{2081}{\ensuremath{{}\sb{1}}}
  \DeclareUnicodeCharacter{2082}{\ensuremath{{}\sb{2}}}
  \DeclareUnicodeCharacter{2099}{\ensuremath{{}\sb{n}}}
  \DeclareUnicodeCharacter{21A6}{$\mapsto$}
  \DeclareUnicodeCharacter{21CE}{\ensuremath{\not\Leftrightarrow}}
  \DeclareUnicodeCharacter{21D2}{$\Rightarrow$}
  \DeclareUnicodeCharacter{21D4}{$\Leftrightarrow$}
  \DeclareUnicodeCharacter{2200}{$\forall$}
  \DeclareUnicodeCharacter{2203}{$\exists$}
  \DeclareUnicodeCharacter{2208}{\ensuremath{\in}}
  \DeclareUnicodeCharacter{2209}{\ensuremath{\not\in}}
  \DeclareUnicodeCharacter{2212}{\ensuremath{{-}}}
  \DeclareUnicodeCharacter{2218}{\ensuremath{\circ}}
  \DeclareUnicodeCharacter{2227}{$\land$}
  \DeclareUnicodeCharacter{2228}{$\lor$}
  \DeclareUnicodeCharacter{2229}{\ensuremath{\cap}}
  \DeclareUnicodeCharacter{222A}{\ensuremath{\cup}}
  \DeclareUnicodeCharacter{2260}{\ensuremath{\ne}}
  \DeclareUnicodeCharacter{2264}{\ensuremath{\le}}
  \DeclareUnicodeCharacter{2265}{\ensuremath{\ge}}
  \DeclareUnicodeCharacter{227C}{\ensuremath{\preceq}}
  \DeclareUnicodeCharacter{2282}{\ensuremath{\subset}}
  \DeclareUnicodeCharacter{2286}{$\subseteq$}
  \DeclareUnicodeCharacter{2294}{\ensuremath{\sqcup}}
  \DeclareUnicodeCharacter{2297}{\ensuremath{\otimes}}
  \DeclareUnicodeCharacter{22A2}{$\vdash$}
  \DeclareUnicodeCharacter{2983}{$\llbrace$}
  \DeclareUnicodeCharacter{2984}{$\rrbrace$}
  \DeclareUnicodeCharacter{2987}{\ensuremath{\llparenthesis}}
  \DeclareUnicodeCharacter{2988}{\ensuremath{\rrparenthesis}}
  \DeclareUnicodeCharacter{29FA}{\ensuremath{{+}\!\!{+}}}
  \DeclareUnicodeCharacter{A673}{\ensuremath{\sp{*}}}
  \DeclareUnicodeCharacter{1D49F}{\ensuremath{{\cal D}}}
  \DeclareUnicodeCharacter{1D4AF}{\ensuremath{{\cal T}}}
---


<!-- PolyML code for extracting stuff from structures and printing types etc -->
>>__ structure PNV = PolyML.NameSpace.Values
>>__ fun die s = (TextIO.output(TextIO.stdErr, s ^ "\n"); OS.Process.exit OS.Process.failure)
>>__ fun printNameAndType0 qp indent str nm =
       let val sinfo = valOf $ #lookupStruct PolyML.globalNameSpace str
                       handle Option => raise Fail ("Structure " ^ str ^ " not found")
           val snames = PolyML.NameSpace.Structures.contents sinfo
           val sval = valOf (#lookupVal snames nm)
                       handle Option => raise Fail ("Name " ^ nm ^ " not found in structure " ^ str)
           val ctxt = if qp then NONE else SOME snames
           val typ_p = PNV.printType(PNV.typeof sval, 100, ctxt)
           val spaces = CharVector.tabulate(indent, fn _ => #" ")
           open PolyML
       in
           PP.prettyPrint(TextIO.print, 70-indent)
            (PrettyBlock(indent,true,[],[PrettyString (spaces ^ nm^" :"), PrettyBreak(1,2), typ_p]))
       end
>>__ val printNameAndType = printNameAndType0 false
>>__ val (pushLineWidth,popLineWidth) = let
     val lwstk = ref [65]
     val _ = linewidth := 65
   in
     ((fn i => (linewidth := i; lwstk := i :: !lwstk)),
      (fn () => case !lwstk of [_] => ()
                  | i::is => (linewidth := i; lwstk := is))
     )
   end

# Derived Inference Rules

In this section, HOL proofs and theorems are made concrete. The notion
of *proof* is defined abstractly in the manual §LOGIC: a proof of a
sequent $(\Gamma,t)$ from a set of sequents $\Delta$ (with respect to
a deductive system ${\cal D}$) was defined to be a chain of sequents
culminating in $(\Gamma,t)$, such that every element of the chain
either belongs to $\Delta$ or else follows from $\Delta$ and earlier
elements of the chain by deduction.  The notion of a *theorem* was
also defined in §LOGIC: a theorem of a deductive system is a sequent
that follows from the empty set of sequents by deduction; *i.e.*, it
is the last element of a proof in the deductive system from the empty
set of sequents.

The deductive system of HOL was sketched in
Section[§Rules](#primitive-rules-of-inference-of-the-hol-logic), where
the eight families of primitive inferences making up the deductive
system were specified by diagrams. It was explained that these
families of inferences are represented in HOL via ML functions, and
that theorems are represented by an ML abstract type called `thm`. The
eight ML functions corresponding to the inferences are operations of
the type `thm`, and each of the eight returns a value of type
`thm`. It was explained that the type `thm` has primitive destructors,
but no primitive constructor; and that, in that way, the logic is
protected against the computation of theorems except by functions
representing primitive inferences, or compositions of these.

Finally, the primitive HOL logic was supplemented by three primitive
constants and four axioms, to form the basic logic.  The primitive
inferences, together with the primitive constants, the five axioms,
and a collection of definitions, give a starting point for
constructing proofs, and hence computing theorems. However, proving
even the simplest theorems from this minimal basis costs considerable
effort. The basis does not immediately provide the transitivity of
equality, for example, or a means of universal quantification; both of
these themselves have to be derived.

## Simple Derivations

As an illustration of a proof in HOL, the following chain of
theorems forms a proof (from the empty set, in the HOL deductive
system), for the particular terms $\mathtt{t}_1$ and $\mathtt{t}_2$,
both of HOL type `:bool`

1. $t_1 \Rightarrow t_2 \vdash t_1 \Rightarrow t_2$

2. $t_1\; |- t_1$

3. $t_1 \Rightarrow t_2, \; t_1 \vdash t_2$

That is, the third theorem follows from the first and second.

In the session below, the proof is performed in the HOL system,
using the ML functions `ASSUME` and `MP`.

```
>> show_assums := true;

>> val th1 = ASSUME ``t1 ==> t2``

>> val th2 = ASSUME ``t1:bool``

>> MP th1 th2;
```

In the following, the `Count.apply` function is used to count the
number of primitive inferences performed in the course of applying the
function to the argument.  In the first invocation, this means that
only the *modus ponens* step is counted.  We create an artificial
function to see the count of all three inference steps in the second
interaction:

```
>> Count.inferences (MP (ASSUME ``t1 ==> t2``)) (ASSUME ``t1:bool``);

>> fun f () = MP (ASSUME ``t1 ==> t2``) (ASSUME ``t1:bool``);

>> Count.inferences f ();
```

Each of the three inference steps of the abstract proof corresponds to
the application of an ML function in the performance of the proof in
HOL; and each of the ML functions corresponds to a primitive
inference of the deductive system.

It is worth emphasising that, in either case, every primitive
inference in the proof chain is *made*, in the sense that for each
inference, the corresponding ML function is evaluated.  That is, HOL
permits no short-cut around the necessity of performing complete
proofs.  The short-cut provided by derived inference rules (as
implemented in ML) is around the necessity of *specifying* every step;
something that would be impossible for a proof of any length. It can
be seen from this that the derived rule, and its representation as an
ML function, is essential to the HOL methodology; theorem proving
would be otherwise impossible.

There are, of course, an infinite number of proofs of the *form*
shown in the example that can be conducted in HOL: one for every
pair of `:bool`-typed terms. Moreover, every time a theorem of the form

$$t_1 \Rightarrow \ t_2, \ t_1 \ \vdash \ t_2$$

is required, its proof must be constructed anew. To capture the
general pattern of inference, an ML function can be written to
implement an inference rule as a derivation from the primitive
inferences.  Abstractly, a *derived inference rule* is a rule that can
be justified on the basis of the primitive inference rules (and/or the
axioms).  In the present case, the rule required undischarged
assumptions.  It is specified for HOL by

```
      Γ |- t1 ==> t2
     -----------------
      Γ ∪ {t1} |-  t2
```

This general rule is valid because from a HOL theorem of the form
$\Gamma \vdash t_1 \Rightarrow t_2$, the theorem $\Gamma \cup\{t_1\}
\vdash t_2$ can be derived as for the specific instance above. The
rule can be implemented in ML as a function `UNDISCH`, say) that calls
the appropriate sequence of primitive inferences. The ML definition of
`UNDISCH` is simply
```
>> fun UNDISCH th = MP th (ASSUME $ fst $ dest_imp $ concl th);
```

This code provides a function that maps a theorem to a theorem; that
is, performs proofs in HOL.  The following session illustrates the use
of the derived rule on a consequence of the axiom
`IMP_ANTISYM_AX`. (The inferences are counted. Assume that the
printing of theorems has been adjusted as above and `th` is bound as
shown below:

```
>> val th = SPEC ``t2:bool`` $ SPEC ``t1:bool`` IMP_ANTISYM_AX;

>> Count.inferences UNDISCH th;

>> Count.inferences UNDISCH it;
```

Each successful application of `UNDISCH` to a theorem invokes an
application of `ASSUME`, followed by an application of `MP`; `UNDISCH`
constructs the 2-step proof for any given theorem of the appropriate
form. As can be seen, it relies on the class of ML functions that
access HOL syntax: in particular, `concl` to produce the conclusion
of the theorem, `dest_imp` to separate the implication, and the
selector `fst` to choose the antecedent.

This particular example is very simple, but a derived inference rule
can perform proofs of arbitrary length.  It can also make use of
previously defined rules.  In this way, the normal inference patterns
can be developed much more quickly and easily; transitivity,
generalization, and so on, support the familiar patterns of inference.

A number of derived inference rules are pre-defined when the HOL
system is entered (`UNDISCH` is one of the first).  In
[Section](standard-rule-derivation), the abstract derivations are given for
the pre-defined rules that reflect the more usual inference patterns
of the predicate (and lambda) calculi.  Like those shown, some of the
pre-defined derived rules in HOL generate relatively short proofs.
Others invoke thousands of primitive inferences, and clearly save a
great deal of effort. Furthermore, rules can be defined by the user to
make still larger steps, or to implement more specialized patterns.

All of the pre-defined derived rules in HOL are described
in §REFERENCE.

## Rewriting

Included in the set of derived inferences that are pre-defined in HOL
is a group of rules with complex definitions that do a limited amount
of "automatic" theorem-proving in the form of rewriting.  The ideas
and implementation were originally developed by Milner and Wadsworth
for Edinburgh LCF, and were later implemented more flexibly and
efficiently by Paulson and Huet for Cambridge LCF.  They appear in HOL
in the Cambridge form. One basic rewriting rule is `REWRITE_RULE` is
illustraated here, although there are more elaborate rewriters in HOL,
such as `SIMP_RULE`, documented in [Section](??).

`REWRITE_RULE` uses a list of equational theorems (theorems whose
conclusions can be regarded as having the form $t_1 = t_2$) to replace
any subterms of an object theorem that "match" $t_1$ by the
corresponding instance of $t_2$. The rule matches recursively and to
any depth, until no more replacements can be made, using internally
defined search, matching and instantiation algorithms.  The validity
of `REWRITE_RULE` rests ultimately on the primitive rules `SUBST` (for
making the substitutions); `INST_TYPE` (for instantiating types); and
the derived rules for generalization and specialization (see
[Section](sec:gen) and [Section](sec:spec) for instantiating terms.
The definition of `REWRITE_RULE` in ML also relies on a large number
of general and HOL-oriented SML functions. The implementation is
partly described in [Chapter](avra-conv).

In practice, derived rules like `REWRITE_RULE` can play a central role
in proofs, because they can perform a very large number of inferences
which may happen in a complex and unpredictable order.  This power is
increased by the fact that any existing equational theorem can be
supplied as a `rewrite rule', including a standard HOL set of
pre-proved tautologies; and these rewrite rules can interact with each
other in the rewriting process to transform the original theorem.

The application of `REWRITE_RULE`, in the session below, illustrates
that replacements are made at all levels of the structure of a term.
The example is numerical; the infixes `>` and `<` are the usual
"greater than" and "less than" relations, respectively, and `SUC`
names the usual successor function on natural numbers.  Use is made of
the pre-existing definition of `>`, bound to
`arithmeticTheory.GREATER_DEF` in SML (see §REFERENCE).  The inference
counting facility is used again, and the printing of theorems is
adjusted as above.

```
>> Count.inferences
     (REWRITE_RULE [arithmeticTheory.GREATER_DEF])
     (ASSUME ``SUC 3 > 0 /\ SUC 2 > 0 /\ SUC 1 > 0 /\ SUC 0 > 0``);
```

Notice that rewriting equations can be extracted from universally
quantified theorems.To construct the proof step-wise, with all of the
instantiations, substitutions, uses of transitivity, *etc*, would be a
lengthy process. The rewriting rules make it easy, and do so whilst
still generating the entire chain of inferences.

## Derivation of the Standard Rules

The HOL system provides all the standard introduction and elimination
rules of the predicate calculus pre-defined as derived inferences.  It
is these derived rules, rather than the primitive rules, that one
normally uses in practice.  In this section, the derivations of some
of the standard rules are given, in sequence.  These derivations only
use the axioms and definitions in the theory `bool` (see
[Section](boolfull), the eight primitive inferences of the HOL logic,
and inferences defined earlier in the sequence.

Theorems, in accordance with the definition given at the beginning of
this chapter, are treated as rules without hypotheses; thus the
derivation of a theorem resembles the derivation of a rule except in
not having hypotheses. (The derivation of `TRUTH`, [Section](sec:T),
is the only example given of this, but there are several others in
HOL.)  There are also some rules that are intrinsically more general
than theorems.  For example, for any two terms $t_1$ and $t_2$, the
theorem $\vdash(\lambda{x}.t_1)t_2 = t_1[t_2/x]$ follows by the
primitive rule `BETA_CONV`. The rule `BETA_CONV` returns a theorem for
each pair of terms $t_1$ and $t_2$, and is therefore equivalent to an
infinite family of theorems. No single theorem can be expressed in the
HOL logic that is equivalent to `BETA_CONV`.See [Chapter](avra-conv)
for further discussion of this point.  Note that `UNDISCH` is not a
rule of this sort, as it can, in fact, be expresed as a theorem.

For each derivation given below, there is an ML function definition
in the HOL system that implements the derived rule as a procedure in
ML. The actual implementation in the HOL system differs in some
cases from the derivations given here, since the system code has been
optimised for improved performance.

In addition, for reasons that are mostly historical, not all the
inferences that are derived in terms of the abstract logic are
actually derived in the current version of the HOL system.  That is,
there are currently a number of rules that are installed in the system
on an "axiomatic" basis, all of which should be derived by explicit
inference.  These rules' status does not actually compromise the
consistency of the logic.  In effect, the existing HOL system has a
deductive system more comprehensive than the one presented abstractly,
but the model outlined in §LOGIC would easily extend to cover it.
The derivations that follow consist of sequences of numbered steps each of
which

1. is an axiom, or
2. is a hypothesis of the rule being derived, or
3.  follows from preceding steps by a rule of inference (either primitive
or previously derived).

The abbreviation `conv` ("conversion") is used for the ML type
`term -> thm`.

### Adding an assumption

```
   ADD_ASSUM : term -> thm -> thm

   Γ |- t
  ---------------
   Γ ∪ {t'} |- t

```

1. $t'\vdash t'$   [`ASSUME`]
2. $\Gamma\vdash t$ [`Hypothesis`]
3. $\Gamma\vdash t' \Rightarrow t$ [`DISCH` 2]
4. $\Gamma,\ t'\vdash t$   [`MP` 3,1]

### Undischarging

```
   UNDISCH : thm -> thm

   Γ |- t1 ==> t2
  ---------------
   Γ ∪ {t1} |- t2

```
1. $t_1\vdash t_1$    [`ASSUME`]
2. $\Gamma\vdash t_1\Rightarrow t_2$ [`Hypothesis`]
3. $\Gamma,\ t_1\vdash t_2$ [`MP` 2,1]


### Symmetry of equality


```
   SYM : thm -> thm

   Γ |- t1 = t2
  ---------------
   Γ |- t2 = t1

```

1. $\Gamma\vdash t_1=t_2$ [`Hypothesis`]
2. $\vdash t_1=t_1$ [`REFL`]
3. $\Gamma\vdash t_2=t_1$ [`SUBST` 1,2]


### Transitivity of equality


```
   TRANS : thm -> thm -> thm

   Γ₁ |- t₁ = t₂ ,   Γ₂ |- t₂ = t3
  ---------------------------------
     Γ₁ ∪ Γ₂ |- t₁ = t3

```

1. $\Gamma_2\vdash t_2=t_3$  [`Hypothesis`]
2. $\Gamma_1\vdash t_1=t_2$  [`Hypothesis`]
3. $\Gamma_1\cup\Gamma_2\vdash t_1=t_3$ [`SUBST` 1,2]

##skip

### Application of a term to a theorem
\index{function application, in HOL logic@function application, in \HOL logic!inference rules for}

\begin{holboxed}
\index{AP_TERM@\ml{AP\_TERM}|pin}
\begin{verbatim}
   AP_TERM : term -> thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1=t_2\over\Gamma\vdash t\ t_1 = t\ t_2$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash t_1=t_2$\hfill [Hypothesis]
\item $\vdash t\ t_1 = t\ t_1$ \hfill [\rul{REFL}]
\item $\Gamma\vdash t\ t_1 = t\ t_2$ \hfill [\rul{SUBST} 1,2]
\end{proof}



### {Application of a theorem to a term}

\begin{holboxed}
\index{AP_THM@\ml{AP\_THM}|pin}
\begin{verbatim}
   AP_THM : thm -> conv
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1=t_2\over \Gamma\vdash t_1\ t = t_2\ t$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash t_1=t_2$\hfill [Hypothesis]
\item$\vdash t_1\ t = t_1\ t$\hfill [\rul{REFL}]
\item $\Gamma\vdash t_1\ t = t_2\ t$\hfill [\rul{SUBST} 1,2]
\end{proof}



### Modus Ponens for equality
\label{sec:eqmp}

\begin{holboxed}
\index{EQ_MP@\ml{EQ\_MP}|pin}
\index{equality, in HOL logic@equality, in \HOL logic!MP rule for@\ml{MP} rule for}
\begin{verbatim}
   EQ_MP : thm -> thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma_1\vdash t_1=t_2\qquad\qquad\qquad \Gamma_2\vdash t_1\over
\Gamma_1\cup\Gamma_2\vdash t_2$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma_1\vdash t_1=t_2$ \hfill [Hypothesis]
\item $\Gamma_2\vdash t_1$ \hfill [Hypothesis]
\item $\Gamma_1\cup\Gamma_2\vdash t_2$ \hfill [\rul{SUBST} 1,2]
\end{proof}




### Implication from equality
\index{equality, in HOL logic@equality, in \HOL logic!other rules for|(}
\index{implication, in HOL logic@implication, in \HOL logic!inference rules for}
\begin{holboxed}
\index{EQ_IMP_RULE@\ml{EQ\_IMP\_RULE}|pin}
\begin{verbatim}
   EQ_IMP_RULE : thm -> thm * thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1=t_2\over
\Gamma\vdash t_1\Rightarrow t_2 \qquad\qquad\qquad \Gamma\vdash t_2\Rightarrow t_1$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash t_1=t_2$ \hfill [Hypothesis]
\item $t_1\vdash t_1$ \hfill [\rul{ASSUME}]
\item $\Gamma,\ t_1\vdash t_2$ \hfill [\rul{EQ\_MP} 1,2]
\item $\Gamma\vdash t_1\Rightarrow t_2$ \hfill [\rul{DISCH} 3]
\item $\Gamma\vdash t_2=t_1$ \hfill [\rul{SYM} 1]
\item $t_2\vdash t_2$ \hfill [\rul{ASSUME}]
\item $\Gamma,\ t_2\vdash t_1$ \hfill [\rul{EQ\_MP} 5,6]
\item $\Gamma\vdash t_2\Rightarrow t_1$ \hfill [\rul{DISCH} 7]
\item $\Gamma\vdash t_1\Rightarrow t_2$ and $\Gamma\vdash t_2\Rightarrow t_1$\hfill [4,8]
\end{proof}



### ***T***-introduction
\label{sec:T}

\begin{holboxed}
\index{T@\holtxt{T}!rules of inference for|(}
\begin{verbatim}
   TRUTH : thm
\end{verbatim}
\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\vdash\T$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \T = ((\lquant{x}x)=(\lquant{x}x))$\hfill [Definition of \T]
\item $\vdash ((\lquant{x}x)=(\lquant{x}x)) = \T$\hfill [\rul{SYM} 1]
\item $\vdash (\lquant{x}x)=(\lquant{x}x)$\hfill [\rul{REFL}]
\item $\vdash\T$ \hfill [\rul{EQ\_MP} 2,3]
\end{proof}




### Equality-with-\T\ elimination

\begin{holboxed}
\index{EQT_ELIM@\ml{EQT\_ELIM}|pin}
\begin{verbatim}
   EQT_ELIM : thm -> thm
\end{verbatim}
\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t = \T\over \Gamma\vdash t$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash t = \T$\hfill [Hypothesis]
\item $\Gamma\vdash \T = t$\hfill [\rul{SYM} 1]
\item $\vdash \T$\hfill [\rul{TRUTH}]
\item $\Gamma\vdash t$\hfill [\rul{EQ\_MP} 2,3]
\end{proof}


### Specialization ($\forall$-elimination)

\begin{holboxed}
\index{SPEC@\ml{SPEC}|pin}
\index{specialization rule, in HOL logic@specialization rule, in \HOL logic}
\begin{verbatim}
   SPEC : term -> thm -> thm
\end{verbatim}
\end{holboxed}

\label{sec:spec}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash \uquant{x}t\over \Gamma\vdash t[t'/x]$$
\begin{itemize}
\item $t[t'/x]$ denotes the result of substituting $t'$ for free\index{free variables, in HOL logic@free variables, in \HOL logic}
occurrences of $x$ in $t$, with the restriction that no free variables in $t'$
become bound after substitution.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \forall = (\lquant{P}P = (\lquant{x}\T))$ \hfill
[\rul{INST\_TYPE} applied to the definition of $\forall$]
\item $\Gamma\vdash \forall(\lquant{x}t)$\hfill [Hypothesis]
\item $\Gamma\vdash (\lquant{P}P=(\lquant{x}\T))(\lquant{x}t)$\hfill
[\rul{SUBST} 1,2]
\item $\vdash  (\lquant{P}P=(\lquant{x}\T))(\lquant{x}t) =
((\lquant{x}t)=(\lquant{x}\T))$\hfill [\rul{BETA\_CONV}]
\item $\Gamma\vdash (\lquant{x}t)=(\lquant{x}\T)$\hfill [\rul{EQ\_MP} 4,3]
\item $\Gamma\vdash (\lquant{x}t)\ t' = (\lquant{x}\T)\ t'$ \hfill
[\rul{AP\_THM} 5]
\item $\vdash (\lquant{x}t)\ t' = t[t'/x]$ \hfill [\rul{BETA\_CONV}]
\item $\Gamma\vdash t[t'/x] = (\lquant{x}t)\ t'$ \hfill [\rul{SYM} 7]
\item $\Gamma\vdash t[t'/x] = (\lquant{x}\T)\ t'$ \hfill [\rul{TRANS} 8,6]
\item $\vdash (\lquant{x}\T)\ t' = \T$ \hfill [\rul{BETA\_CONV}]
\item $\Gamma\vdash t[t'/x] = \T$ \hfill [\rul{TRANS} 9,10]
\item $\Gamma\vdash t[t'/x]$ \hfill [\rul{EQT\_ELIM} 11]
\end{proof}




### Equality-with-\T\ introduction
\begin{holboxed}
\index{EQT_INTRO@\ml{EQT\_INTRO}|pin}
\begin{verbatim}
   EQT_INTRO : thm -> thm
\end{verbatim}
\end{holboxed}


\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t\over\Gamma\vdash t=\T$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash\uquant{b_1\ b_2}(b_1\Rightarrow b_2)\Rightarrow(b_2\Rightarrow b_1)\Rightarrow(b_1=b_2)$
\hfill [Axiom]
\item $\vdash\uquant{b_2}(t\Rightarrow b_2)\Rightarrow(b_2\Rightarrow t)\Rightarrow(t=b_2)$
\hfill [\rul{SPEC} 1]
\item $\vdash(t\Rightarrow\T)\Rightarrow(\T\Rightarrow t)\Rightarrow(t=\T)$\hfill [\rul{SPEC} 2]
\item $\vdash\T$\hfill [\rul{TRUTH}]
\item $\vdash t\Rightarrow\T$\hfill [\rul{DISCH} 4]
\item $\vdash(\T\Rightarrow t)\Rightarrow(t=\T)$\hfill [\rul{MP} 3,5]
\item $\Gamma \vdash t$\hfill [Hypothesis]
\item $\Gamma\vdash\T\Rightarrow t$\hfill [\rul{DISCH} 7]
\item $\Gamma\vdash t=\T$\hfill [\rul{MP} 6,8]
\end{proof}
\index{equality, in HOL logic@equality, in \HOL logic!other rules for|)}
\index{T@\holtxt{T}!rules of inference for|)}


### {\texorpdfstring{Generalization ($\forall$-introduction)}{Generalization (forall-introduction)}}%
\index{universal quantifier, in HOL logic@universal quantifier, in \HOL logic!inference rules for}


\begin{holboxed}
\index{GEN@\ml{GEN}|pin}
\index{generalization rule, in HOL logic@generalization rule, in \HOL logic}
\begin{verbatim}
   GEN : term -> thm -> thm
\end{verbatim}
\end{holboxed}

\label{sec:gen}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t\over\Gamma\vdash\uquant{x} t$$
\begin{itemize}
\item Where $x$ is not free in $\Gamma$.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash t$\hfill [Hypothesis]
\item $\Gamma\vdash t = \T$\hfill [\rul{EQT\_INTRO} 1]
\item $\Gamma\vdash(\lquant{x}t)=(\lquant{x}\T)$\hfill [\rul{ABS} 2]
\item $\vdash \forall(\lquant{x}t) = \forall(\lquant{x}t)$\hfill [\rul{REFL}]
\item $\vdash \forall = (\lquant{P} P =(\lquant{x}\T))$\hfill
[\rul{INST\_TYPE} applied to the definition of $\forall$]
\item $\vdash\forall(\lquant{x}t)=(\lquant{P} P=(\lquant{x}\T))(\lquant{x}t)$
\hfill [\rul{SUBST} 5,4]
\item $\vdash(\lquant{P} P=(\lquant{x}\T))(\lquant{x}t)=((\lquant{x}t)
=(\lquant{x}\T))$\hfill [\rul{BETA\_CONV}]
\item $\vdash\forall(\lquant{x}t) = ((\lquant{x}t)=(\lquant{x}\T))$
\hfill [\rul{TRANS} 6,7]
\item $\vdash((\lquant{x}t)=(\lquant{x}\T)) = \forall(\lquant{x}\T)$
\hfill [\rul{SYM} 8]
\item $\Gamma\vdash\forall(\lquant{x}t)$\hfill [\rul{EQ\_MP} 9,3]
\end{proof}



### Simple $\alpha$-conversion

\begin{holboxed}
\begin{verbatim}
   SIMPLE_ALPHA
\end{verbatim}
\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\vdash(\lquant{x_1}t\ x_1) = (\lquant{x_2}t\ x_2)$$
\begin{itemize}
\item Where neither $x_1$ nor $x_2$ occurs free in $t$.\footnote{\ml{SIMPLE\_ALPHA} is
included here because it is
used in a subsequent derivation, but it is not actually in the
HOL system, as it is subsumed by other functions.}
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item$\vdash(\lquant{x_1}t\ x_1)\ x = t\ x$\hfill [\rul{BETA\_CONV}]
\item$\vdash(\lquant{x_2}t\ x_2)\ x = t\ x$\hfill [\rul{BETA\_CONV}]
\item $\vdash t\ x = (\lquant{x_2}t\ x_2)\ x$\hfill [\rul{SYM} 2]
\item $\vdash (\lquant{x_1}t\ x_1)\ x = (\lquant{x_2}t\ x_2)\ x$
\hfill [\rul{TRANS} 1,3]
\item $\vdash(\lquant{x}(\lquant{x_1}t\ x_1)\ x) =
(\lquant{x}(\lquant{x_2}t\ x_2)\ x)$\hfill [\rul{ABS} 4]
\item $\vdash\uquant{f}(\lquant{x}f\ x) = f$\hfill
[Appropriately type-instantiated axiom]
\item $\vdash(\lquant{x}(\lquant{x_1}t\ x_1)x) = \lquant{x_1}t\ x_1$
\hfill [\rul{SPEC} 6]
\item $\vdash(\lquant{x}(\lquant{x_2}t\ x_2)x) = \lquant{x_2}t\ x_2$
\hfill [\rul{SPEC} 6]
\item $\vdash (\lquant{x_1}t\ x_1) = (\lquant{x}(\lquant{x_1}t\ x_1)x)$
\hfill [\rul{SYM} 7]
\item $\vdash (\lquant{x_1}t\ x_1) = (\lquant{x}(\lquant{x_2}t\ x_2)x)$
\hfill [\rul{TRANS} 9,5]
\item $\vdash(\lquant{x_1}t\ x_1)=(\lquant{x_2}t\ x_2)$\hfill
[\rul{TRANS} 10,8]
\end{proof}




### {\texorpdfstring{$\eta$-conversion}{Eta-conversion}}

\begin{holboxed}
\index{ETA_CONV@\ml{ETA\_CONV}|pin}
\begin{verbatim}
   ETA_CONV : conv
\end{verbatim}
\end{holboxed}
\vspace{12pt plus2pt minus1pt}

$$\vdash(\lquant{x'}t\ x') = t$$
\begin{itemize}
\item Where $x'$ does not occur free\index{free variables, in HOL logic@free variables, in \HOL logic} in $t$ (we use $x'$ rather than just $x$
to motivate the use of \rul{SIMPLE\_ALPHA} in the derivation below).
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash\uquant{f}(\lquant{x}f\ x) = f$\hfill
[Appropriately type-instantiated axiom]
\item  $\vdash(\lquant{x}t\ x) = t$\hfill [\rul{SPEC} 1]
\item $\vdash(\lquant{x'}t\ x')=(\lquant{x}t\ x)$\hfill [\rul{SIMPLE\_ALPHA}]
\item $\vdash(\lquant{x'}t\ x')=t$\hfill [\rul{TRANS} 3,2]
\end{proof}



### Extensionality
\index{universal quantifier, in HOL logic@universal quantifier, in \HOL logic!inference rules for}

\begin{holboxed}
\index{EXT@\ml{EXT}|pin}
\index{extensionality rule, in HOL logic@extensionality rule, in \HOL logic}
\begin{verbatim}
   EXT : thm -> thm
\end{verbatim}
\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash\uquant{x} t_1\ x = t_2\ x\over\Gamma\vdash t_1=t_2$$
\begin{itemize}
\item Where $x$ is not free\index{free variables, in HOL logic@free variables, in \HOL logic} in $t_1$ or $t_2$.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash\uquant{x}t_1\ x=t_2\ x$\hfill [Hypothesis]
\item $\Gamma\vdash t_1\ x'=t_2\ x'$\hfill [\rul{SPEC} 1 ($x'$ is a fresh)]
\item $\Gamma\vdash(\lquant{x'}t_1\ x') = (\lquant{x'}t_2\ x')$\hfill
        [\rul{ABS} 2]
\item $\vdash(\lquant{x'}t_1\ x') = t_1$\hfill [\rul{ETA\_CONV}]
\item $\vdash t_1 = (\lquant{x'}t_1\ x')$\hfill [\rul{SYM} 4]
\item $\Gamma\vdash t_1 = (\lquant{x'}t_2\ x')$\hfill [\rul{TRANS} 5,3]
\item $\vdash(\lquant{x'}t_2\ x') = t_2$\hfill [\rul{ETA\_CONV}]
\item $\Gamma\vdash t_1=t_2$\hfill [\rul{TRANS} 6,7]
\end{proof}




### {\texorpdfstring{$\hilbert$-introduction}{Hilbert-introduction}}

\begin{holboxed}
\index{choice operator, in HOL logic@choice operator, in \HOL logic!inference rules for}
\index{SELECT_INTRO@\ml{SELECT\_INTRO}|pin}
\begin{verbatim}
   SELECT_INTRO : thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1\ t_2\over\Gamma\vdash t_1(\hilbert\ t_1)$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash\uquant{P\ x}P\ x\Rightarrow P(\hilbert\ P)$\hfill [Suitably
type-instantiated axiom]
\item $\vdash t_1\ t_2 \Rightarrow t_1(\hilbert\ t_1)$\hfill [\rul{SPEC} 1 (twice)]
\item $\Gamma\vdash t_1\ t_2$\hfill [Hypothesis]
\item $\Gamma\vdash t_1(\hilbert\ t_1)$\hfill [\rul{MP} 2,3]
\end{proof}




### $\hilbert$-elimination

\begin{holboxed}
\index{choice operator, in HOL logic@choice operator, in \HOL logic!inference rules for}
\index{SELECT_ELIM@\ml{SELECT\_ELIM}|pin}
\begin{verbatim}
   SELECT_ELIM : thm -> term * thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma_1\vdash t_1(\hilbert\ t_1)\qquad\qquad\qquad\Gamma_2,\ t_1\ v\vdash t
\over \Gamma_1\cup\Gamma_2\vdash t$$
\begin{itemize}
\item Where $v$ occurs nowhere except in the assumption $t_1\ v$ of the second
hypothesis.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma_2,\ t_1\ v\vdash t$ \hfill [Hypothesis]
\item $\Gamma_2\vdash t_1\ v\Rightarrow t$\hfill [\rul{DISCH} 1]
\item $\Gamma_2\vdash\uquant{v}t_1\ v\Rightarrow t$\hfill [\rul{GEN} 2]
\item $\Gamma_2\vdash t_1(\hilbert\ t_1)\Rightarrow t$\hfill [\rul{SPEC} 3]
\item $\Gamma_1\vdash t_1(\hilbert\ t_1)$\hfill [Hypothesis]
\item $\Gamma_1\cup\Gamma_2\vdash t$\hfill [\rul{MP} 4,5]
\end{proof}




### {\texorpdfstring{$\exists$-introduction}{Exists-introduction}}
\index{existential quantifier, in HOL logic@existential quantifier, in \HOL logic!inference rules for|(}

\begin{holboxed}
\index{EXISTS@\ml{EXISTS}|pin}
\begin{verbatim}
   EXISTS : term * term -> thm -> thm
\end{verbatim}
\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1[t_2]\over \Gamma\vdash \equant{x}t_1[x]$$
\begin{itemize}
\item Where $t_1[t_2]$ denotes a term $t_1$ with some free\index{free variables, in HOL logic@free variables, in \HOL logic}
occurrences of $t_2$
singled out, and $t_1[x]$ denotes the result of replacing these
occurrences of $t_1$ by $x$, subject to the restriction that $x$
doesn't become bound after substitution.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash(\lquant{x}t_1[x])t_2= t_1[t_2]$\hfill [\rul{BETA\_CONV}]
\item $\vdash t_1[t_2] = (\lquant{x}t_1[x])t_2$\hfill [\rul{SYM} 1]
\item $\Gamma\vdash t_1[t_2]$\hfill [Hypothesis]
\item $\Gamma\vdash(\lquant{x}t_1[x])t_2$\hfill [\rul{EQ\_MP} 2,3]
\item $\Gamma\vdash(\lquant{x}t_1[x])(\hilbert(\lquant{x}t_1[x]))$\hfill
[\rul{SELECT\_INTRO} 4]
\item $\vdash \exists = \lquant{P} P(\hilbert\ P)$\hfill
[\rul{INST\_TYPE} applied to the definition of $\exists$]
\item $\vdash\exists(\lquant{x}t_1[x]) =
(\lquant{P}P(\hilbert\ P))(\lquant{x}t_1[x])$\hfill [\rul{AP\_THM} 6]
\item $\vdash(\lquant{P}P(\hilbert\ P))(\lquant{x}t_1[x]) =
(\lquant{x}t_1[x])(\hilbert(\lquant{x}t_1[x]))$\hfill [\rul{BETA\_CONV}]
\item $\vdash\exists(\lquant{x}t_1[x]) =
(\lquant{x}t_1[x])(\hilbert(\lquant{x}t_1[x]))$\hfill [\rul{TRANS} 7,8]
\item $\vdash(\lquant{x}t_1[x])(\hilbert(\lquant{x}t_1[x])) =
\exists(\lquant{x}t_1[x])$\hfill [\rul{SYM} 9]
\item $\Gamma\vdash\exists(\lquant{x}t_1[x])$\hfill [\rul{EQ\_MP} 10,5]
\end{proof}



### $\exists$-elimination

\begin{holboxed}
\index{CHOOSE@\ml{CHOOSE}|pin}
\begin{verbatim}
   CHOOSE : term * thm -> thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma_1\vdash\equant{x}t[x]\qquad\qquad\qquad \Gamma_2,\ t[v]\vdash t'
\over \Gamma_1\cup\Gamma_2\vdash t'$$
\begin{itemize}
\item Where $t[v]$ denotes a term $t$ with some free\index{free variables, in HOL logic@free variables, in \HOL logic}
occurrences of the variable $v$
singled out, and $t[x]$ denotes the result of replacing these
occurrences of $v$ by $x$, subject to the restriction that $x$ doesn't become
bound after substitution.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \exists = \lquant{P} P(\hilbert\ P)$\hfill
[\rul{INST\_TYPE} applied to the definition of $\exists$]
\item $\vdash\exists(\lquant{x}t[x]) =
(\lquant{P}P(\hilbert\ P))(\lquant{x}t[x])$\hfill [\rul{AP\_THM} 1]
\item $\Gamma_1\vdash\exists(\lquant{x}t[x])$\hfill [Hypothesis]
\item $\Gamma_1\vdash (\lquant{P}P(\hilbert\ P))(\lquant{x}t[x])$
\hfill [\rul{EQ\_MP} 2,3]
\item $\vdash(\lquant{P}P(\hilbert\ P))(\lquant{x}t[x]) =
(\lquant{x}t[x])(\hilbert(\lquant{x}t[x]))$\hfill [\rul{BETA\_CONV}]
\item $\Gamma_1\vdash(\lquant{x}t[x])(\hilbert(\lquant{x}t[x])$\hfill
[\rul{EQ\_MP} 5,4]
\item $\vdash(\lquant{x}t[x])v = t[v]$\hfill [\rul{BETA\_CONV}]
\item $\vdash t[v] =(\lquant{x}t[x])v$\hfill [\rul{SYM} 7]
\item $\Gamma_2,\ t[v]\vdash t'$\hfill [Hypothesis]
\item $\Gamma_2\vdash t[v]\Rightarrow t'$\hfill [\rul{DISCH} 9]
\item $\Gamma_2\vdash(\lquant{x}t[x])v\Rightarrow t'$\hfill [\rul{SUBST} 8,10]
\item $\Gamma_2,\ (\lquant{x}t[x])v\vdash t'$\hfill [\rul{UNDISCH} 11]
\item $\Gamma_1\cup\Gamma_2\vdash t'$\hfill [\rul{SELECT\_ELIM} 6,12]
\end{proof}
\index{existential quantifier, in HOL logic@existential quantifier, in \HOL logic!inference rules for|)}

### {Applying a definition to one argument}

Given an equation where the right-hand side is a lambda-abstraction, one can derive an equation characterising the application of the function to a specified argument.

\begin{holboxed}
\index{RIGHT_BETA@\ml{RIGHT\_BETA}|pin}
\begin{verbatim}
   RIGHT_BETA : thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t = \lquant{x}t'[x]
\over \Gamma\vdash t\ t = t'[t]$$
\begin{itemize}
\item Where  $t$ does not contain $x$.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash t = \lquant{x} t'[x]$\hfill
[Suitably type-instantiated hypothesis]
\item $\Gamma\vdash t\ t =
(\lquant{x}t'[x])\ t$\hfill
[\rul{AP\_THM} 1]
\item $\vdash(\lquant{x}t'[x])\ t =
t'[t]$\hfill [\rul{BETA\_CONV}]
\item $\Gamma\vdash t\ t = t'[t]$\hfill
[\rul{TRANS} 2,3]
\end{proof}


### Applying a definition to multiple arguments

\begin{holboxed}
\index{RIGHT_LIST_BETA@\ml{RIGHT\_LIST\_BETA}|pin}
\begin{verbatim}
   RIGHT_LIST_BETA : thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t = \lquant{x_1\cdots x_n}t'[x_1,\ldots,x_n]
\over \Gamma\vdash t\ t_1\cdots t_n = t'[t_1,\ldots,t_n]$$
\begin{itemize}
\item Where none of the $t_i$ contain any of the $x_i$.
\end{itemize}

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\Gamma\vdash t = \lquant{x_1\cdots x_n} t'[x_1,\ldots,x_n]$\hfill
[Suitably type-instantiated hypothesis]
\item $\Gamma\vdash t\ t_1\cdots t_n =
(\lquant{x_1\cdots x_n}t'[x_1,\ldots,x_n])\ t_1\cdots t_n$\hfill
[\rul{AP\_THM} 1 ($n$ times)]
\item $\vdash(\lquant{x_1\cdots x_n}t'[x_1,\ldots,x_n])\ t_1\cdots t_n =
t'[t_1,\ldots,t_n]$\hfill [\rul{BETA\_CONV} ($n$ times)]
\item $\Gamma\vdash t\ t_1\cdots t_n = t'[t_1,\ldots,t_n]$\hfill
[\rul{TRANS} 2,3]
\end{proof}





### {\texorpdfstring{$\wedge$-introduction}{Conjunction-introduction}}
\label{sec:conj}


\begin{holboxed}
\index{CONJ@\ml{CONJ}|pin}
\index{conjunction, in HOL logic@conjunction, in \HOL logic!inference rule for}
\begin{verbatim}
   CONJ : thm -> thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma_1\vdash t_1\qquad\qquad\qquad\Gamma_2\vdash t_2\over
\Gamma_1\cup\Gamma_2 \vdash t_1\conj t_2$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \conj = \lquant{b_1\ b_2}\uquant{b}(b_1\Rightarrow(b_2\Rightarrow b))\Rightarrow b$
\hfill [Definition of $\conj$]
\item $\vdash t_1\conj t_2 = \uquant{b}(t_1\Rightarrow(t_2\Rightarrow b))\Rightarrow b$\hfill
[\rul{RIGHT\_LIST\_BETA} 1]
\item $t_1\Rightarrow(t_2\Rightarrow b)\vdash t_1\Rightarrow(t_2\Rightarrow b)$\hfill [\rul{ASSUME}]
\item $\Gamma_1\vdash t_1$\hfill [Hypothesis]
\item $\Gamma_1,\ t_1\Rightarrow(t_2\Rightarrow b)\vdash t_2\Rightarrow b$\hfill [\rul{MP} 3,4]
\item $\Gamma_2\vdash t_2$\hfill [Hypothesis]
\item $\Gamma_1\cup\Gamma_2,\ t_1\Rightarrow(t_2\Rightarrow b)\vdash b$\hfill [\rul{MP} 5,6]
\item $\Gamma_1\cup \Gamma_2\vdash(t_1\Rightarrow(t_2\Rightarrow b))\Rightarrow b$\hfill
[\rul{DISCH} 7]
\item $\Gamma_1\cup \Gamma_2\vdash \uquant{b}(t_1\Rightarrow(t_2\Rightarrow b))\Rightarrow b$\hfill
[\rul{GEN} 8]
\item $\Gamma_1\cup \Gamma_2\vdash t_1\conj t_2$\hfill
[\rul{EQ\_MP} (\rul{SYM} 2),9]
\end{proof}




### $\wedge$-elimination}{Conjunction-elimination}


\begin{holboxed}
\index{CONJUNCT1@\ml{CONJUNCT1}|pin}
\index{CONJUNCT2@\ml{CONJUNCT2}|pin}
\begin{verbatim}
   CONJUNCT1 : thm -> thm, CONJUNCT2 : thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1\conj t_2\over
\Gamma\vdash t_1\qquad\qquad\qquad \Gamma\vdash t_2$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \conj = \lquant{b_1\ b_2}\uquant{b}(b_1\Rightarrow(b_2\Rightarrow b))\Rightarrow b$
\hfill [Definition of $\conj$]
\item $\vdash t_1\conj t_2 = \uquant{b}(t_1\Rightarrow(t_2\Rightarrow b))\Rightarrow b$\hfill
[\rul{RIGHT\_LIST\_BETA} 1]
\item $\Gamma\vdash t_1\conj t_2$\hfill [Hypothesis]
\item $\Gamma\vdash \uquant{b}(t_1\Rightarrow(t_2\Rightarrow b))\Rightarrow b$\hfill
[\rul{EQ\_MP} 2,3]
\item $\Gamma\vdash (t_1\Rightarrow(t_2\Rightarrow t_1))\Rightarrow t_1$\hfill [\rul{SPEC} 4]
\item $t_1\vdash t_1$\hfill [\rul{ASSUME}]
\item $t_1 \vdash t_2\Rightarrow t_1$\hfill [\rul{DISCH} 6]
\item $\vdash t_1\Rightarrow(t_2\Rightarrow t_1)$\hfill [\rul{DISCH} 7]
\item $\Gamma\vdash t_1$\hfill [\rul{MP} 5,8]
\item $\Gamma\vdash (t_1\Rightarrow(t_2\Rightarrow t_2))\Rightarrow t_2$\hfill [\rul{SPEC} 4]
\item $t_2\vdash t_2$\hfill [\rul{ASSUME}]
\item $\vdash t_2\Rightarrow t_2$\hfill [\rul{DISCH} 11]
\item $\vdash t_1\Rightarrow(t_2\Rightarrow t_2)$\hfill [\rul{DISCH} 12]
\item $\Gamma\vdash t_2$\hfill [\rul{MP} 10,13]
\item $\Gamma\vdash t_1$ and $\Gamma\vdash t_2$\hfill [9,14]
\end{proof}




### \texorpdfstring{Right $\vee$-introduction}{Right disjunction-introduction}}

\begin{holboxed}
\index{DISJ1@\ml{DISJ1}|pin}
\begin{verbatim}
   DISJ1 : thm -> conv
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1\over \Gamma\vdash t_1\disj t_2$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \disj =
\lquant{b_1\ b_2}\uquant{b}(b_1\Rightarrow b)\Rightarrow(b_2\Rightarrow b)\Rightarrow b$
\hfill [Definition of $\disj$]
\item $\vdash t_1\disj t_2 = \uquant{b}(t_1\Rightarrow b)\Rightarrow(t_2\Rightarrow b)\Rightarrow b$
\hfill [\rul{RIGHT\_LIST\_BETA} 1]
\item $\Gamma\vdash t_1$\hfill [Hypothesis]
\item $t_1\Rightarrow b\vdash t_1\Rightarrow b$\hfill [\rul{ASSUME}]
\item $\Gamma,\ t_1\Rightarrow b\vdash b$\hfill [\rul{MP} 4,3]
\item $\Gamma,\ t_1\Rightarrow b\vdash(t_2\Rightarrow b)\Rightarrow b$\hfill [\rul{DISCH} 5]
\item $\Gamma\vdash (t_1\Rightarrow b)\Rightarrow(t_2\Rightarrow b)\Rightarrow b$\hfill [\rul{DISCH} 6]
\item $\Gamma\vdash \uquant{b}(t_1\Rightarrow b)
\Rightarrow(t_2\Rightarrow b)\Rightarrow b$\hfill [\rul{GEN} 7]
\item $\Gamma\vdash t_1\disj t_2$\hfill [\rul{EQ\_MP} (\rul{SYM} 2),8]
\end{proof}




### \texorpdfstring{Left $\vee$-introduction}{Left disjunction-introduction}


\begin{holboxed}
\index{DISJ2@\ml{DISJ2}|pin}
\begin{verbatim}
   DISJ2 : term -> thm -> thm
\end{verbatim}\end{holboxed}


\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_2\over \Gamma\vdash t_1\disj t_2$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \disj =
\lquant{b_1\ b_2}\uquant{b}(b_1\Rightarrow b)\Rightarrow(b_2\Rightarrow b)\Rightarrow b$
\hfill [Definition of $\disj$]
\item $\vdash t_1\disj t_2 = \uquant{b}(t_1\Rightarrow b)\Rightarrow(t_2\Rightarrow b)\Rightarrow b$
\hfill [\rul{RIGHT\_LIST\_BETA} 1]
\item $\Gamma\vdash t_2$\hfill [Hypothesis]
\item $t_2\Rightarrow b\vdash t_2\Rightarrow b$\hfill [\rul{ASSUME}]
\item $\Gamma,\ t_2\Rightarrow b\vdash b$\hfill [\rul{MP} 4,3]
\item $\Gamma\vdash(t_2\Rightarrow b)\Rightarrow b$\hfill [\rul{DISCH} 5]
\item $\Gamma\vdash (t_1\Rightarrow b)\Rightarrow(t_2\Rightarrow b)\Rightarrow b$\hfill [\rul{DISCH} 6]
\item $\Gamma\vdash \uquant{b}(t_1\Rightarrow b)
\Rightarrow(t_2\Rightarrow b)\Rightarrow b$\hfill [\rul{GEN} 7]
\item $\Gamma\vdash t_1\disj t_2$\hfill [\rul{EQ\_MP} (\rul{SYM} 2),8]
\end{proof}


### \texorpdfstring{$\vee$-elimination}{Disjunction-elimination}

\begin{holboxed}
\index{DISJ_CASES@\ml{DISJ\_CASES}|pin}
\begin{verbatim}
   DISJ_CASES : thm -> thm -> thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma\vdash t_1\disj t_2\qquad\qquad\qquad\Gamma_1,\ t_1\vdash t
\qquad\qquad\qquad \Gamma_2,\ t_2\vdash t\over
\Gamma\cup\Gamma_1\cup\Gamma_2\vdash t$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \disj =
\lquant{b_1\ b_2}\uquant{b}(b_1\Rightarrow b)\Rightarrow(b_2\Rightarrow b)\Rightarrow b$
\hfill [Definition of $\disj$]
\item $\vdash t_1\disj t_2 = \uquant{b}(t_1\Rightarrow b)\Rightarrow(t_2\Rightarrow b)\Rightarrow b$
\hfill [\rul{RIGHT\_LIST\_BETA} 1]
\item $\Gamma\vdash t_1\disj t_2$\hfill [Hypothesis]
\item $\Gamma\vdash\uquant{b}(t_1\Rightarrow b)\Rightarrow(t_2\Rightarrow b)\Rightarrow b$\hfill
[\rul{EQ\_MP} 2,3]
\item $\Gamma\vdash(t_1\Rightarrow t)\Rightarrow(t_2\Rightarrow t)\Rightarrow t$\hfill [\rul{SPEC} 4]
\item $\Gamma_1,\ t_1\vdash t$\hfill [Hypothesis]
\item $\Gamma_1\vdash t_1\Rightarrow t$\hfill [\rul{DISCH} 6]
\item $\Gamma\cup \Gamma_1\vdash (t_2\Rightarrow t)\Rightarrow t$\hfill [\rul{MP} 5,7]
\item $\Gamma_2,\ t_2\vdash t$\hfill [Hypothesis]
\item $\Gamma_2\vdash t_2\Rightarrow t$\hfill [\rul{DISCH} 9]
\item $\Gamma\cup \Gamma_1\cup \Gamma_2\vdash t$\hfill [\rul{MP} 8,10]
\end{proof}
\index{disjunction, in HOL logic@disjunction, in \HOL logic!inference rule for|)}




### Classical contradiction rule
\index{F (falsity), the HOL constant@\holtxt{F} (falsity), the \HOL constant!rules of inference for}

\begin{holboxed}
\index{CCONTR@\ml{CCONTR}|pin}
\index{contradiction rule, in HOL logic@contradiction rule, in \HOL logic}
\begin{verbatim}
   CCONTR : term -> thm -> thm
\end{verbatim}\end{holboxed}

\vspace{12pt plus2pt minus1pt}

$$\Gamma,\ \neg t\vdash \F\over \Gamma\vdash t$$

\vspace{12pt plus2pt minus1pt}

\begin{proof}
\item $\vdash \neg = \lquant{b}b\Rightarrow\F$\hfill [Definition of $\neg$]
\item $\vdash \neg t = t\Rightarrow\F$\hfill [\rul{RIGHT\_LIST\_BETA} 1]
\item $\Gamma,\ \neg t\vdash\F$\hfill [Hypothesis]
\item $\Gamma\vdash \neg t\Rightarrow\F$\hfill  [\rul{DISCH} 3]
\item $\Gamma\vdash (t\Rightarrow\F)\Rightarrow\F$\hfill [\rul{SUBST} 2,4]
\item $t = \F\vdash t = \F$\hfill [\rul{ASSUME}]
\item $\Gamma,\ t=\F\vdash (\F\Rightarrow\F)\Rightarrow\F$\hfill [\rul{SUBST} 6,5]
\item $\F\vdash\F$\hfill [\rul{ASSUME}]
\item $\vdash \F\Rightarrow\F$\hfill [\rul{DISCH} 8]
\item $\Gamma,\ t=\F\vdash\F$\hfill [\rul{MP} 7,9]
\item $\vdash \F = \uquant{b}b$\hfill [Definition of $\F$]
\item $\Gamma,\ t=\F\vdash \uquant{b}b$\hfill [\rul{SUBST} 11,10]
\item $\Gamma,\ t=\F\vdash t$\hfill [\rul{SPEC} 12]
\item $\vdash \uquant{b} (b = \T)\disj(b = \F)$\hfill [Axiom]
\item $\vdash (t = \T)\disj(t = \F)$\hfill [\rul{SPEC} 14]
\item $t=\T\vdash t=\T$\hfill [\rul{ASSUME}]
\item $t=\T\vdash t$\hfill [\rul{EQT\_ELIM} 16]
\item $\Gamma\vdash t$\hfill [\rul{DISJ\_CASES} 15,17,13]
\end{proof}
\index{derived rules, in HOL logic@derived rules, in \HOL logic!list and derivations of some|)}
\index{inference rules, of HOL logic@inference rules, of HOL logic!derived|)}



%%% Local Variables:
%%% mode: latex
%%% TeX-master: "description"
%%% End:
