
\chapter{Example: a Simple Parity Checker}\label{parity}

This chapter consists of a worked example: the specification and
verification of a simple sequential parity checker.  The intention is
to accomplish two things:

\begin{myenumerate}
\item To present a complete piece of work with \HOL.
\item To give a flavour of what it is like to use the \HOL\ system for
  a tricky proof.
\end{myenumerate}

Concerning (ii), note that although the theorems proved are, in fact,
rather simple, the way they are proved illustrates the kind of
intricate `proof engineering' that is typical.  The proofs could be
done more elegantly, but presenting them that way would defeat the
purpose of illustrating various features of \HOL. It is hoped that the
small example here will give the reader a feel for what it is like to
do a big one.

Readers who are not interested in hardware verification should be able
to learn something about the \HOL{} system even if they do not wish to
penetrate the details of the parity-checking example used here.  The
specification and verification of a slightly more complex parity
checker is set as an exercise (a solution is provided in the directory {\small\verb|examples/parity|}).

\section{Introduction}

The sessions of this example comprise the specification and
verification of a device that computes the parity of a sequence of
bits.  More specifically, a detailed verification is given of a device
with an input {\small\verb|in|}, an output {\small\verb|out|} and the
specification that the $n$th output on {\small\verb|out|} is
{\small\verb|T|} if and only if there have been an even number of
{\small\verb|T|}'s input on {\small\verb|in|}. A theory named
{\small\verb|PARITY|} is constructed; this contains the specification
and verification of the device. All the \ML{} input in the boxes below
can be found in the file {\small\verb|examples/parity/PARITYScript.sml|}. It
is suggested that the reader interactively input this to get a `hands
on' feel for the example. The goal of the case study is to illustrate
detailed `proof hacking' on a small and fairly simple example.

\section{Specification}
\label{example}
The first step is to start up the \HOL{} system.
We again use \texttt{<holdir>/bin/hol}.
The \ML{} prompt is {\small\verb|>|}, so lines beginning with {\small\verb|>|} are typed by the user and other lines are the system's response.

To specify the device, a primitive recursive function
{\small\verb|PARITY|} is defined so that for $n>0$, {\small\tt PARITY}
$n f$ is true if the number of {\small\verb|T|}'s in the sequence
$f${\small\tt (}$1${\small\tt)}, $\ldots$ , $f${\small\tt
  (}$n${\small\tt)} is even.

\setcounter{sessioncount}{0}
\begin{session}
\begin{alltt}
>> Definition PARITY_def:
     (PARITY 0 f = T) /\
     (PARITY(SUC n) f = if f(SUC n) then ~PARITY n f
                        else PARITY n f)
   End
\end{alltt}
\end{session}

\noindent

The effect of our {\small\verb|Definition|} is to store the definition of {\small\verb|PARITY|} on the current theory with name {\small\verb|PARITY_def|} and to bind the defining theorem to the \ML\ variable with the same name.
Notice that there are two name spaces
being written into: the names of constants in theories and the names
of variables in \ML.
Another commonly-used convention is to use just {\small\verb|CON|} for the theory and \ML{} name of the definition of a constant {\small\verb|CON|}.  Unfortunately, the \HOL{} system does not use a
uniform convention, but users are recommended to adopt one.

The specification of the parity checking device can now be given as:

\begin{hol}
\begin{verbatim}
   !t. out t = PARITY t inp
\end{verbatim}
\end{hol}

\noindent
It is {\it intuitively\/} clear that this specification will be
satisfied if the signal\footnote{Signals are modelled as functions
  from numbers, representing times, to booleans.}  functions
{\small\verb|inp|} and {\small\verb|out|} satisfy\footnote{We'd like
  to use \ml{in} as one of our variable names, but this is a reserved
  word for \ml{let}-expressions.}:

\begin{hol}
\begin{verbatim}
   out(0) = T
\end{verbatim}
\end{hol}

\noindent and

\begin{hol}
\begin{verbatim}
   !t. out(t+1)  =  (if inp(t+1) then ~(out t) else out t)
\end{verbatim}
\end{hol}

\noindent This can be verified formally in \HOL{} by proving the
following lemma:

\begin{hol}
\begin{verbatim}
   !inp out.
      (out 0 = T) /\
      (!t. out(SUC t) = if inp(SUC t) then ~out t else out t)
    ==>
      (!t. out t = PARITY t inp)
\end{verbatim}
\end{hol}

\noindent The proof of this is done by Mathematical Induction and, although
trivial, is a good illustration of how such proofs are done.  The
lemma is proved interactively using \HOL's subgoal package.  The proof
is started by putting the goal to be proved on a goal stack using the
function {\small\verb|g|} which takes a goal as argument.

\begin{session}
\begin{alltt}
>> g ‘!inp out.
        (out 0 = T) /\
        (!t. out(SUC t) = (if inp(SUC t) then ~(out t) else out t)) ==>
        (!t. out t = PARITY t inp)’;
\end{alltt}
\end{session}

\noindent
The subgoal package prints out the goal on the top of the goal stack.
The top goal is expanded by stripping off the universal quantifier
(with {\small\verb|gen_tac|}) and then making the two conjuncts of the
antecedent of the implication into assumptions of the goal (with
{\small\verb|strip_tac|}).
The \ML{} function {\small\verb|e|} takes a tactic and applies it to the top goal; the resulting subgoals are pushed on to the goal stack.
The message `{\small\verb|OK..|}' is printed out just before the tactic is applied.
The resulting subgoal is then printed.

\begin{session}
\begin{alltt}
>> e(rpt gen_tac >> strip_tac);
\end{alltt}
\end{session}

\noindent Next induction on {\small\verb|t|} is done
using {\small\verb|Induct|}, which does
induction on the outermost universally quantified variable.

\begin{session}
\begin{alltt}
>> e Induct;
\end{alltt}
\end{session}

\noindent The assumptions of the two subgoals
are shown numbered underneath the horizontal lines of hyphens. The
last goal printed is the one on the top of the stack, which is the
basis case. This is solved by rewriting with its assumptions and the
definition of {\small\verb|PARITY|}.

\begin{session}
\begin{alltt}
>> e(rw[PARITY_def]);
\end{alltt}
\end{session}

The top goal is proved, so the system pops it from the goal stack (and
puts the proved theorem on a stack of theorems). The new top goal is
the step case of the induction. This goal is also solved by rewriting.

\begin{session}
\begin{alltt}
>> e(rw[PARITY_def]);
##assert can top_thm ()
\end{alltt}
\end{session}

\noindent The goal is proved, \ie\ the empty list of subgoals is produced.
The system now applies the justification functions produced by the
tactics to the lists of theorems achieving the subgoals (starting with
the empty list).  These theorems are printed out in the order in which
they are generated (note that assumptions of theorems are printed as
dots).

The \ML{} function
\begin{hol}
\begin{verbatim}
   top_thm : unit -> thm
\end{verbatim}
\end{hol}

\noindent
returns the theorem just proved (\ie\ on the top of the theorem stack)
in the current theory, and we bind this to the \ML{} name
\ml{UNIQUENESS\_LEMMA}.

\begin{session}
\begin{alltt}
>> val UNIQUENESS_LEMMA = top_thm();
\end{alltt}
\end{session}

\section{Implementation}
\label{implementation}

The lemma just proved suggests that the parity checker can be
implemented by holding the parity value in a register and then
complementing the contents of the register whenever {\small\verb|T|}
is input. To make the implementation more interesting, it will be
assumed that registers `power up' storing {\small\verb|F|}. Thus the
output at time {\small\verb|0|} cannot be taken directly from a
register, because the output of the parity checker at time
{\small\verb|0|} is specified to be {\small\verb|T|}. Another tricky
thing to notice is that if {\small\verb|t>0|}, then the output of the
parity checker at time {\small\verb|t|} is a function of the input at
time {\small\verb|t|}. Thus there must be a combinational path from
the input to the output.

The schematic diagram below shows the design of
a device that is intended to implement this specification.
(The leftmost input to \ml{MUX} is the selector.)
This works by storing the parity of the sequence input so far in the
lower of the two registers.  Each time {\small\verb|T|} is input at
{\small\verb|in|}, this stored value is complemented. Registers are assumed to
`power up' in a state in which they are storing {\small\verb|F|}.  The second
register (connected to {\small\verb|ONE|}) initially outputs
 {\small\verb|F|} and
then outputs {\small\verb|T|} forever.  Its role is just to ensure that the
device
works during the first cycle by connecting the output {\small\verb|out|} to the
device {\small\verb|ONE|} via the lower multiplexer.  For all subsequent cycles
{\small\verb|out|} is connected to {\small\verb|l3|} and so either carries the
stored parity value (if the current input is {\small\verb|F|}) or the
complement of this value (if the current input is {\small\verb|T|}).

\begin{center}
%BEGIN IMAGE
\setlength{\unitlength}{5mm}
\begin{picture}(14,30)(0,0.5)
\put(8,20){\framebox(2,2){\small{\tt NOT}}}
\put(6,16){\framebox(6,2){\small{\tt MUX}}}
\put(2,16){\framebox(2,2){\small{\tt ONE}}}
\put(2,12){\framebox(2,2){\small{\tt REG}}}
\put(6,8){\framebox(6,2){\small{\tt MUX}}}
\put(8,4){\framebox(2,2){\small{\tt REG}}}

\puthrule(9,24){4}
\puthrule(3,15){8}
\puthrule(3,11){4}
\puthrule(7,7){2}
\puthrule(9,3){4}

\putvrule(3,11){1}
\putvrule(3,14){2}
\putvrule(7,2){5}
\putvrule(7,10){1}
\putvrule(7,18){8}
\putvrule(9,3){1}
\putvrule(9,6){2}
\putvrule(9,10){6}
\putvrule(9,18){2}
\putvrule(9,22){2}
\putvrule(11,10){5}
\putvrule(11,18){6}
\putvrule(13,3){21}

\put(6,26){\makebox(2,2){\small{\tt in}}}
\put(6,0){\makebox(2,2){\small{\tt out}}}
\put(9,18){\makebox(1.8,2){\small{\tt l1}}}
\put(13,18){\makebox(1.8,2){\small{\tt l2}}}
\put(9,12){\makebox(1.8,2){\small{\tt l3}}}
\put(11,12){\makebox(1.8,2){\small{\tt l4}}}
\put(4,11){\makebox(3,1){\small{\tt l5}}}

\put(10,23){\makebox(2,2){$\bullet$}}
\put(8,6){\makebox(2,2){$\bullet$}}
\put(2,14){\makebox(2,2){$\bullet$}}

\end{picture}
\setlength{\unitlength}{1mm}
%END IMAGE
%HEVEA \imageflush
\end{center}

The devices making up this schematic will be modelled with predicates
\cite{Why-HOL-paper}. For example, the predicate {\small\verb|ONE|} is true
of a signal {\small\verb|out|} if for all times {\small\verb|t|} the value of
{\small\verb|out|} is {\small\verb|T|}.

\begin{session}
\begin{alltt}
>> Definition ONE_def: ONE(out:num->bool) = !t. out t = T
   End
\end{alltt}
\end{session}

\noindent Note that, as discussed above, `{\small\verb|ONE_def|}'  is used both
as an \ML{} variable and as the name of the definition in the theory.
Note also how `{\small\verb|:num->bool|}' has been added to resolve
type ambiguities; without this (or some other type information) the
typechecker would not be able to infer that {\small\tt t} is to have
type {\small\tt num}.

The binary predicate {\small\verb|NOT|} is true of a pair of signals
{\small\verb|(inp,out)|} if the value of {\small\verb|out|} is always
the negation of the value of {\small\verb|inp|}. Inverters are thus
modelled as having no delay. This is appropriate for a
register-transfer level model, but not at a lower level.

\begin{session}
\begin{alltt}
>> Definition NOT_def:
      NOT(inp, out:num->bool) = !t. out t = ~(inp t)
   End
\end{alltt}
\end{session}

\noindent The final combinational device needed is a multiplexer.
This is a `hardware conditional'; the input
{\small\verb|sw|} selects which of the other
two inputs are to be connected to the output {\small\verb|out|}.

\begin{session}
\begin{alltt}
>> Definition MUX_def:
     MUX(sw,in1,in2,out:num->bool) =
       !t. out t = if sw t then in1 t else in2 t
   End
\end{alltt}
\end{session}

The remaining devices in the schematic are registers.  These are
unit-delay elements; the values output at time {\small\verb|t+1|} are
the values input at the preceding time {\small\verb|t|}, except at
time {\small\verb|0|} when the register outputs
{\small\verb|F|}.\footnote{Time {\tt {\small 0}} represents when the
  device is switched on.}

\begin{session}
\begin{alltt}
>> Definition REG_def:
     REG(inp,out:num->bool) =
        !t. out t = if (t=0) then F else inp(t-1)
   End
\end{alltt}
\end{session}

The schematic diagram above can be represented as a predicate by
conjoining the relations holding between the various
signals and then existentially quantifying the internal lines.
This technique is explained elsewhere
(\eg\ see \cite{Camilleri-et-al,Why-HOL-paper}).

\begin{session}
\begin{alltt}
>> Definition PARITY_IMP_def:
     PARITY_IMP(inp,out) =
       ?l1 l2 l3 l4 l5.
         NOT(l2,l1) /\ MUX(inp,l1,l2,l3) /\ REG(out,l2) /\
         ONE l4     /\ REG(l4,l5)        /\ MUX(l5,l3,l4,out)
   End
\end{alltt}
\end{session}\label{parity-imp}

\section{Verification}

The following theorem will eventually be proved:
\begin{hol}
\begin{verbatim}
   |- !inp out. PARITY_IMP(inp,out) ==> (!t. out t = PARITY t inp)
\end{verbatim}
\end{hol}
This states that {\it if\/} {\small\verb|inp|} and {\small\verb|out|}
are related as in the schematic
diagram (\ie\ as in the definition of {\small\verb|PARITY_IMP|}),
{\it then\/} the
pair of signals {\small\verb|(inp,out)|} satisfies the specification.

First, the following lemma is proved; the correctness of the parity
checker follows from this and {\small\verb|UNIQUENESS_LEMMA|} by the
transitivity of {\small{\tt\verb+==>+}}.

\begin{session}
\begin{alltt}
>> g ‘!inp out.
        PARITY_IMP(inp,out) ==>
        (out 0 = T) /\
        !t. out(SUC t) = if inp(SUC t) then ~(out t) else out t’;
\end{alltt}
\end{session}

The first step in proving this goal is to rewrite with definitions
followed by a decomposition of the resulting goal using
{\small\verb|strip_tac|}. The rewriting tactic
{\small\verb|PURE_REWRITE_TAC|} is used; this does no built-in
simplifications, only the ones explicitly given in the list of
theorems supplied as an argument.  One of the built-in simplifications
used by {\small\verb|REWRITE_TAC|} is {\small\tt |-~(x~=~T)~=~x}.
{\small\verb|PURE_REWRITE_TAC|} is used to prevent rewriting with this
being done.
\begin{session}
\begin{alltt}
>> e(PURE_REWRITE_TAC [PARITY_IMP_def, ONE_def, NOT_def,
                       MUX_def, REG_def] >>
     rpt strip_tac);
\end{alltt}
\end{session}

The top goal is the one printed last; its conclusion is
{\small\verb|out 0 = T|} and its assumptions are equations relating
the values on the lines in the circuit.  The natural next step would
be to expand the top goal by rewriting with the assumptions.  However,
if this were done the system would go into an infinite loop because
the equations for {\small\verb|out|}, {\small\verb|l2|} and
{\small\verb|l3|} are mutually recursive.  Instead we use the
first-order reasoner \ml{metis\_tac} to do the work:

\begin{session}
\begin{alltt}
>> e(metis_tac []);
\end{alltt}
\end{session}
The first of the two subgoals is proved.  Inspecting the remaining
goal it can be seen that it will be solved if its left hand side,
{\small\verb|out(SUC t)|}, is expanded using the assumption:

\begin{hol}
\begin{verbatim}
   !t. out t = if l5 t then l3 t else l4 t
\end{verbatim}
\end{hol}


However, if this assumption is used for rewriting, then all the subterms of the form {\small\verb|out t|} will also be expanded.
To prevent this, we really want to rewrite with a formula that is specifically about {\small\verb|out (SUC t)|}.
We want to somehow pull the assumption that we do have out of the list and rewrite with a specialised version of it.
We can do just this using \ml{qpat\_x\_assum}.
This tactic is of type \ml{term quotation~->~thm~->~tactic}.
It selects an assumption that is of the form given by its first argument, and passes it to the second argument, a function which expects a theorem and returns a tactic.
Here it is in action:

\begin{session}
\begin{alltt}
>> e (qpat_x_assum ‘!t. out t = X t’
       (fn th => REWRITE_TAC [SPEC “SUC t” th]));
\end{alltt}
\end{session}
The pattern used here exploited something called \emph{higher order
  matching}. The actual assumption that was taken off the assumption
stack did not have a RHS that looked like the application of a
function (\ml{X} in the pattern) to the \ml{t} parameter, but the RHS
could nonetheless be seen as equal to the application of \emph{some}
function to the \ml{t} parameter.  In fact, the value that matched
\ml{X} was {\small\verb|``\x. if l5 x then l3 x else l4 x``|}.

Inspecting the goal above, it can be seen that the next step is to unwind the equations for the remaining lines of the circuit.
We do using the standard simplifier \ml{rw}.

\begin{session}
\begin{alltt}
>> e (rw[]);
\end{alltt}
\end{session}

\noindent The theorem just proved is named
{\small\verb|PARITY_LEMMA|} and saved in the current theory.

\begin{session}
\begin{alltt}
>> val PARITY_LEMMA = top_thm ();
\end{alltt}
\end{session}

{\small\verb|PARITY_LEMMA|} could have been proved in one step with a
single compound tactic.  Our initial goal can be expanded with a
single tactic corresponding to the sequence of tactics that were used
interactively:

\begin{session}
\begin{alltt}
>>_ restart();
>> e (PURE_REWRITE_TAC [PARITY_IMP_def, ONE_def, NOT_def,
                        MUX_def, REG_def] >>
     rpt strip_tac
     >- metis_tac []
     >- (qpat_x_assum ‘!t. out t = X t’
                  (fn th => REWRITE_TAC [SPEC “SUC t” th]) >>
         rw[]));
\end{alltt}
\end{session}

Armed with {\small\verb|PARITY_LEMMA|}, the final theorem is easily
proved:

\begin{session}
\begin{alltt}
>> Theorem PARITY_CORRECT:
     ∀inp out. PARITY_IMP(inp,out) ⇒ ∀t. out t = PARITY t inp
   Proof
     rpt strip_tac >> match_mp_tac UNIQUENESS_LEMMA >>
     irule PARITY_LEMMA >> rw[]
   QED
\end{alltt}
\end{session}

\noindent This completes the proof of the
parity checking device.

\section{Exercises}
\label{exercises}

Two exercises are given in this section: Exercise~1 is
straightforward, but Exercise~2 is quite tricky and might take a
beginner several days to solve.

\subsection{Exercise 1}

Using {\it only\/} the devices {\small\verb|ONE|}, {\small\verb|NOT|},
{\small\verb|MUX|} and {\small\verb|REG|} defined in
Section~\ref{implementation}, design and verify a register
{\small\verb|RESET_REG|} with an input {\small\verb|inp|}, reset line
{\small\verb|reset|}, output {\small\verb|out|} and behaviour
specified as follows.
\begin{itemize}
\item If {\small\verb|reset|} is {\small\verb|T|} at time
  {\small\verb|t|}, then the value at {\small\verb|out|} at time
  {\small\verb|t|} is also {\small\verb|T|}.
\item If {\small\verb|reset|} is {\small\verb|T|} at time
  {\small\verb|t|} or {\small\verb|t+1|}, then the value output at
  {\small\verb|out|} at time {\small\verb|t+1|} is {\small\verb|T|},
  otherwise it is equal to the value input at time {\small\verb|t|} on
  {\small\verb|inp|}.
\end{itemize}
This is formalized in \HOL{} by the definition:

\begin{hol}
\begin{verbatim}
   RESET_REG(reset,inp,out) <=>
     (!t. reset t ==> (out t = T)) /\
     (!t. out(t+1) = if reset t \/ reset(t+1) then T else inp t)
\end{verbatim}
\end{hol}

\noindent Note that this specification is only partial; it doesn't specify the
output at time {\small\verb|0|} in the case that there is no reset.

The solution to the exercise should be a definition of a predicate
{\small\verb|RESET_REG_IMP|} as an existential quantification of a
conjunction of applications of {\small\verb|ONE|}, {\small\verb|NOT|},
{\small\verb|MUX|} and {\small\verb|REG|} to suitable line
names,\footnote{i.e.  a definition of the same form as that of
  {\small\tt PARITY\_IMP}
%BEGIN LATEX
on page~\pageref{parity-imp}.
%END LATEX
%HEVEA in section~\ref{parity-imp}
} together with a proof of:

\begin{hol}
\begin{verbatim}
   RESET_REG_IMP(reset,inp,out) ==> RESET_REG(reset,inp,out)
\end{verbatim}
\end{hol}


\subsection{Exercise 2}

\begin{enumerate}
\item Formally specify a resetable parity checker that has two boolean
  inputs {\small\tt reset} and {\small\tt inp}, and one boolean output
  {\small\tt out} with the following behaviour:
  \begin{quote}
    The value at {\small\tt out} is {\small\tt T} if and only if there
    have been an even number of {\small\tt T}s input at {\small\tt inp}
    since the last time that {\small\tt T} was input at {\small\tt
      reset}.
  \end{quote}
\item Design an implementation of this specification built using {\it
    only\/} the devices {\small\verb|ONE|}, {\small\verb|NOT|},
  {\small\verb|MUX|} and {\small\verb|REG|} defined in
  Section~\ref{implementation}.
\item Verify the correctness of your implementation in \HOL.
\end{enumerate}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: "tutorial"
%%% End:
