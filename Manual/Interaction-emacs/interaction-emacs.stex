\documentclass[a4paper,10pt]{article}

\usepackage[T1]{fontenc}
\usepackage{upquote}
\usepackage{alltt}
\usepackage{url}

\addtolength{\voffset}{-1em}
\addtolength{\textheight}{-2em}
\addtolength{\textwidth}{0.5em}
\setlength{\arraycolsep}{0.1em}
\input{../LaTeX/commands}

\begin{document}

\title{Guide to HOL4 interaction and basic proofs \\ (Using Emacs) }

%\author{\normalsize Magnus O. Myreen and Minchao Wu}
%\date{~\vspace{-2em}}

\maketitle

\newenvironment{code}{\begin{quote}%
\begin{alltt}\small}{%
\end{alltt}%
\end{quote}}
\newenvironment{enum}{\begin{enumerate}
\setlength{\itemsep}{-\parsep}
}{\end{enumerate}}

\newcommand{\mysec}[1]{\section{\large #1}}
\newcommand{\mysubsec}[1]{\subsection{\normalsize#1}}
\newcommand{\sq}{\textasciigrave}

\mysec{Introduction}

This document gives readers, with no experience in using HOL4, the most
minimum knowledge needed to start using HOL4. The aim is to give a
concise description of the basics in a format usable as a beginners'
reference manual.
\begin{enum}
\item[~] Section \ref{interaction}:~~Interaction with HOL4 (via emacs)
\item[~] Section \ref{search}:~~Searching for theorems and theories
\item[~] Section \ref{tactics}:~~Common proof tactics
\item[~] Section \ref{reading}:~~Further reading and general advice
\end{enum}
The text assumes that the reader has HOL4 installed. You can download and install HOL4 following the instructions on \url{https://hol-theorem-prover.org}.

\mysec{Interaction with HOL4 (via emacs)\label{interaction}}

HOL comes with emacs modes that make script files look prettier, and help when interacting with HOL sessions.
To install the scripts, add the following lines to your emacs initialisation file ({\tt .emacs} or \texttt{.emacs.d/init.el}) with {\tt <path>} replaced with the full path to your HOL4 installation:
\begin{code}
(load "<path>/HOL/tools/editor-modes/emacs/hol-mode")
(load "<path>/HOL/tools/editor-modes/emacs/hol-unicode")
\end{code}

If your version of emacs does not highlight the active region by default,
also add the following line to your initialisation file:
\begin{code}
(transient-mark-mode 1)
\end{code}
Restart emacs to make these changes take effect.

\mysubsec{Starting a HOL4 session}

\begin{enum}
\item Start emacs.
\item Press {\tt C-x C-f} to open a file (its name should have suffix {\tt Script.sml})
\item Press {\tt M-h H}, then press {\tt RET} or down arrow and then {\tt RET}.
\end{enum}
The HOL window should look something like this:
\begin{code}
---------------------------------------------------------------------
       HOL-4 [Kananaskis 13 (stdknl, built Tue Feb 18 15:39:00 2020)]

       For introductory HOL help, type: help "hol";
       To exit type <Control>-D
---------------------------------------------------------------------
> > > > >
\end{code}

\mysubsec{Copying input into HOL4 (Opening a theory)\label{copy}}

First, make sure you know how to select text in emacs. Either:
\begin{itemize}
\item Move the cursor while holding the shift key; or
\item Hit \texttt{C-space}, and then move the cursor normally; or
\item Use the mouse (hold the primary button and drag)
\end{itemize}

To copy and paste the selected region into the HOL session press {\tt M-h~M-r}.
For example, selecting the following line, and then pressing {\tt M-h M-r}
\begin{code}
open arithmeticTheory listTheory;
\end{code}
makes HOL4 open the library theories for arithmetic (over natural numbers)
and lists. This should not produce any significant output.

\mysubsec{Starting a goal-oriented proof}

Most HOL4 proofs are constructed using an interactive \emph{goal
  stack} and then put together using tactic combinators
(Section~\ref{prove1}, \ref{prove2}). To start the goal stack:
\begin{enum}
\item Write the outline of a theorem, in this case called {\tt less\_add\_1}. One can type $\forall$ by pressing the {\tt !} key. More key shortcuts will be explained below.
\begin{code}
Theorem less_add_1:
  \(\forall\)n. n < n + 1
Proof

QED
\end{code}
\item Move the cursor between the {\tt Theorem}-line and {\tt Proof}-line.
\item Press {\tt M-h~g} to push the goal onto the goal stack.
\end{enum}
The HOL4 window should look something like this:
\begin{code}
>>- g `!n. n < n + 1`
\end{code}

\paragraph{Typing Special Symbols in Emacs}
As above, we can write $\forall$ as {\tt !}\ in HOL4.
Indeed, with the special HOL-input map turned on in Emacs (which happens by default, and is indicated by the presence of a $\Pi$ on the left of the modeline), typing \texttt{!} will produce a $\forall$ character automatically.
A number of other connectives are handled in similar ways.
There are also many abbreviations for even more common Unicode characters on \texttt{Control}-\texttt{Shift} modifiers (i.e., keys that are pressed at the same time as the Control and Shift modifier keys are held down).
For example, \texttt{C-S-l} gives a $\lambda$ character.
Finally, there are yet more options when a leading backslash is typed.
For example \texttt{\textbackslash{}a} will generate an $\alpha$ character (as will typing out \texttt{\textbackslash{}alpha} in full).
In some situations, the machinery is even more sophisticated.
If one types \texttt{\textbackslash{}l}, this will generate a listing of many different left arrow options in the mini-buffer.
If a space character is entered, the currently highlighted option will be selected.
Alternatively, pick a number or move the cursor with left and right arrow keys to choose that option (which will become the default option for next time).
See Table~\ref{tab:unicode-input} for more information.

\begin{table}[t]

\newcommand{\itemz}[2]{\texttt{#1}\; &-\;\; \textrm{#2}}
\newcommand{\itemy}[2]{#1&\quad\quad&#2\\}

\begin{displaymath}
\begin{array}{lllll}
\itemy{\itemz{\rule{0em}{1.5em}M-h H}{start HOL}}{\itemz{M-h g}{push goal onto goal stack}}
\itemy{\itemz{M-h M-r}{copy region into HOL}}{\itemz{M-h e}{apply tactic to goal}}
\itemy{\itemz{M-h C-t}{display types on/off}}{\itemz{M-h b}{move back in proof}}
\itemy{\itemz{M-h C-c}{interrupt HOL}}{\itemz{M-h p}{print current goal}}
\itemy{\itemz{`}{writes \lsquo{}\rsquo{}}}{\itemz{M-h d}{drop current goal}}
\itemy{\itemz{`{`}}{writes \ldquo{}\rdquo{}}}{\itemz{M-h M-s}{start subgoal proof for {\tt by}}}
\end{array}
\end{displaymath}
\caption{Most important key bindings in the emacs HOL4 mode.
Note that all of these actions are also available in the HOL menu within Emacs.}

\end{table}


\begin{table}
\begin{center}
\begin{tabular}{ccc}
Symbol & Control-Shift keybinding & ``Quail'' binding(s)\\
\hline
$\forall$ & \texttt{C-S-!} & \texttt{!}\quad\texttt{\textbackslash{}all} \\
$\exists$ & \texttt{C-S-?} & \texttt{?}\quad\texttt{\textbackslash{}exists} \\
$\land$ & \texttt{C-S-\&} & \texttt{/\textbackslash}\quad\texttt{\textbackslash{}and} \\
$\lor$ & \texttt{C-S-|} & \texttt{\textbackslash/}\quad\texttt{\textbackslash{}or} \\
$\neg$ & \texttt{C-S-\~} & \texttt{\textbackslash{}neg}\\
$\iff$ & \texttt{C-S-=} & \texttt{\textbackslash{}lr=} \texttt{\textbackslash{}iff}$^\dagger$\\
$\neq$ & \texttt{C-M-S-\textbackslash{}~=} & \texttt{<>}\quad\texttt{\textbackslash{}neq}\\
$\Rightarrow$ & \texttt{C-M-S-$>$} & \texttt{==$>$}\quad\texttt{\textbackslash{}r=}$^\dagger$\\[2mm]
%
% Greek letters
%
$\alpha$ & \texttt{C-S-a} & \texttt{\textbackslash{}a}\quad\texttt{\textbackslash{}alpha}\\
$\beta$ & \texttt{C-S-b} &
  \texttt{\textbackslash{}b}\quad\texttt{\textbackslash{}beta}\\
$\gamma$ & \texttt{C-S-g} &
  \texttt{\textbackslash{}g}\quad\texttt{\textbackslash{}gamma}\\
$\Gamma$ & \texttt{C-M-S-g} &
  \texttt{\textbackslash{}GG}\quad\texttt{\textbackslash{}Gamma}\\
$\delta$ & \texttt{C-S-d} &
  \texttt{\textbackslash{}d}\quad\texttt{\textbackslash{}delta}\\
$\Delta$ & \texttt{C-M-S-d} &
  \texttt{\textbackslash{}GD}\quad\texttt{\textbackslash{}Delta}\\
$\lambda$ & \texttt{C-S-l} & \texttt{\textbackslash{}lambda}\\
$\Lambda$ & \texttt{C-M-S-l} & \texttt{\textbackslash{}GL}\quad\texttt{\textbackslash{}Lambda}\\
\multicolumn{3}{c}{\dots}\\[2mm]
%
% set operators
%
$\cup$ & \texttt{C-S-u} &
  \texttt{\textbackslash{}cup}\quad\texttt{\textbackslash{}union}$^\dagger$\\
$\cap$ & \texttt{C-S-i} &
  \texttt{\textbackslash{}cap}\quad\texttt{\textbackslash{}i}$^\dagger$\\
$\in$ & \texttt{C-S-:} & \texttt{\textbackslash{}in}\\
$\notin$ & \texttt{C-M-S-\textbackslash{} :} & \texttt{\textbackslash{}notin}\\
$\emptyset$ & \texttt{C-M-S-\textbackslash{} 0} & \texttt{\textbackslash{}empty}\\
$\subseteq$ & \texttt{C-S-c} & \texttt{\textbackslash{}subseteq}\\[2mm]

$\llparenthesis$ & \texttt{C-M-S-( C-M-S-|} \\
$\rrparenthesis$ & \texttt{C-M-S-) C-M-S-|} \\
$\llbracket$ & \texttt{C-S-[} & \texttt{\textbackslash(}$^\dagger$\\
$\rrbracket$ & \texttt{C-S-]} & \texttt{\textbackslash)}$^\dagger$\\
$\langle$ & \texttt{C-M-S-( C-S-$<$} &
  \texttt{\textbackslash{}langle}\quad\texttt{\textbackslash(}$^\dagger$\\
$\rangle$ & \texttt{C-M-S-) C-S-$>$} &
  \texttt{\textbackslash{}rangle}\quad\texttt{\textbackslash)}$^\dagger$
\end{tabular}
\end{center}
\caption{Illustrative Input methods for various Unicode symbols.
Multiple keys (separated by spaces) in the Control-Shift column indicate that a sequence of keys must be struck to achieve the desired character.
(For example, the \texttt{C-M-S-\textbackslash} prefix is used to open up a set of bindings for characters with various forms of slash through them; following that with a colon puts a slash through the $\in$ symbol.)
Quail bindings are enabled if there is a $\Pi$ character visible on the left of the current buffer's mode-line.
Quail can be toggled on and off with the \texttt{C-\textbackslash} keybinding.
Full details of the ``quail'' input map can be seen interactively by typing the command \texttt{M-x~hol-input-show-translations}.
Quail bindings marked with daggers ($^\dagger$) are those that lead to multi-way selections that need to be made with numbers or left-right arrow keys.
Finally note that it is always possible to enter characters without special processing by first typing a \texttt{C-q}.}
\label{tab:unicode-input}
\end{table}

\mysubsec{Applying a tactic\label{apply}}

Make progress in a proof using \emph{proof tactics}.

\begin{enum}
\item Write the name of a tactic, \eg{} {\tt decide\_tac},~see Section~\ref{tactics} for more tactics
\item Select the text of the tactic
\item Press {\tt M-h~e} to apply the tactic.
\end{enum}
A tactic makes HOL4 update the current goal. The HOL4 window will either
display the new goal(s) or print:
\begin{code}
    Initial goal proved.
    |- \(\forall\)n. n < n + 1 : goalstack
\end{code}
You can undo the effect of the applied tactic by pressing {\tt M-h b}. Press {\tt M-h p} to view the current goal.
To go all the way back to the start of the proof (to restart), press \texttt{M-h~R}.

\mysubsec{Ending a goal-oriented proof}

One can pop goals off the goal stack by pressing {\tt M-h d}, which gives:
\begin{code}
>>- drop();
\end{code}

\mysubsec{Saving the resulting theorem\label{prove1}}

The tactic should be written between the {\tt Proof}-line and the {\tt QED}-line.
\begin{code}
Theorem less_add_1:
  \(\forall\)n. n < n + 1
Proof
  decide_tac
QED
\end{code}
When the above lines are copied into HOL4 (using text-selection then
{\tt M-h M-r}, as described in Section~\ref{copy}), HOL4 responds with:
\begin{code}
>>__ open arithmeticTheory
>>- Theorem less_add_1:
      ∀n. n < n + 1
    Proof
      decide_tac
    QED
\end{code}

\mysubsec{Saving proofs based on multiple tactics\label{prove2}}

Suppose we have proved the goal {\tt $\forall$n{.}~n <= n * n} with the following tactics.
Note that {\tt \lsquo{}n\rsquo{}} (with the ``pretty'' single quotation marks) can be produced by typing {\tt \bq{}n\bq}.
\begin{code}
Induct_on \lsquo{}n\rsquo{}                    (* comment: induction on n  *)

  decide_tac                    (* comment: solve base case *)

  asm_simp_tac bool_ss [MULT]   (* comment: simplify goal   *)
  decide_tac                    (* comment: solve step case *)
\end{code}
Tactics can be composed together for {\tt Theorem} using \ml{\gt\gt} and \ml{\gt-}.
The \ml{\gt\gt} operator is an infix that composes two tactics into one.
The \ml{\gt-} is used to prove subgoals: \ml{\gt-} \emph{tactic} proves the first subgoal using \emph{tactic}.

\noindent Here is the entire proof when composed using \ml{\gt\gt} and \ml{\gt-}.
\begin{code}
Theorem less_eq_mult:
  \(\forall\)n:num. n <= n * n
Proof
  Induct_on \lsquo{}n\rsquo{}
  >- decide_tac
  >- (asm_simp_tac bool_ss [MULT]
      >>> decide_tac)
QED
\end{code}
Copy the above into HOL4 using text-selection, and then {\tt M-h M-r}, as in Section~\ref{copy}.

\mysubsec{Displaying types in HOL4}

HOL4 does not by default display types. Press {\tt M-h~C-t} to switch
printing of type information on or off.

\mysubsec{Interrupting HOL4}

Press {\tt M-h~C-c} to interrupt HOL4 --- useful when a tactic fails to terminate
(\eg{} {\tt\small metis\_tac} often fails to terminate when unsuccessfully applied).

\mysubsec{Making a definition\label{definition}}

Functions are defined using {\tt Definition ...\ End}, \eg{} a function that squares a natural number is defined as follows.
\begin{code}
Definition SQUARE_def:
  SQUARE n = n * n
End
\end{code}

\noindent
Data-types are defined using {\tt Datatype ...\ End}, \eg{} a binary tree
which holds values of type {\tt 'a} (a type variable) at the leaves:
\begin{code}
##eval Datatype:
         TREE = LEAF 'a | BRANCH TREE TREE
       End
\end{code}
A valid tree is \eg{} {\tt BRANCH (LEAF 5) (BRANCH (LEAF 1) (LEAF 7))}
with type {\tt num TREE}, where {\tt  num} is the type name for a natural
number. We can define recursive functions, \eg{}
\begin{code}
##eval Definition MAP_TREE_def:
        (MAP_TREE f (LEAF n) = LEAF (f n)) ∧
        (MAP_TREE f (BRANCH u v) = BRANCH (MAP_TREE f u) (MAP_TREE f v))
       End
\end{code}
{\tt  SQUARE\_def} and {\tt  MAP\_TREE\_def} are theorems containing the
above definitions. Theorems describing {\tt  TREE} can be retrieved by copying
the following into HOL4 by pressing {\tt C-space} then {\tt M-h M-r}, as described in Section~\ref{copy}.
\begin{code}
##eval val TREE_11 = fetch "-" "TREE_11";
##eval val TREE_distinct = fetch "-" "TREE_distinct";
\end{code}

\mysubsec{Making a theory}

Proofs and definitions are stored in files called scripts, \eg{} we
can store the definitions from above in a file called {\tt
  less\_lemmaScript.sml}, which should begin with the lines
\begin{code}
open HolKernel boolLib bossLib Parse
val _ = new_theory "less_lemma";
\end{code}
and end with the line
\begin{code}
val _ = export_theory();
\end{code}

\noindent
Thus, the entire file can be:
\begin{code}
open HolKernel boolLib bossLib Parse
val _ = new_theory "less_lemma";

Theorem less_add_1:
  \(\forall\)n. n < n + 1
Proof
  decide_tac
QED

val _ = export_theory();
\end{code}

The theory file {\tt less\_lemmaTheory} is created by executing {\tt Holmake} in
the directory where {\tt less\_lemmaScript.sml} is stored. A human
readable version of the compiled theory is stored under {\tt less\_lemmaTheory.sig}.

\mysec{Searching for theorems and theories\label{search}}

\newcommand{\itemx}[2]{\texttt{\small #1} &\;\textrm{--}\;& \textrm{#2} \\}

HOL4 has a large collection of library theories. The most commonly used are:
\begin{displaymath}
\begin{array}{lcl}
\itemx{arithmeticTheory}{natural numbers, \eg{} {\tt\small 0, 1, 2, SUC 0, SUC 6}}
\itemx{listTheory}{lists, \eg{} {\tt\small [1;2;3] = 1::2::3::[], HD xs}}
\itemx{pred\_setTheory}{simple sets,\ \eg{} {\tt\small \{1;2;3\}, x IN s UNION t}}
\itemx{pairTheory}{pairs/tuples,\ \eg{} {\tt\small (1,x), (2,3,4,5), FST (x,y)}}
\itemx{wordsTheory}{n-bit words,\ \eg{} {\tt\small 0w:word32, 1w:'a word, x {!!}~1w}}
\end{array}
\end{displaymath}
Other standard theories include:
\begin{code}
bagTheory  boolTheory  combinTheory  fcpTheory  finite_mapTheory
fixedPointTheory  floatTheory  integerTheory  limTheory
optionTheory  probTheory  ratTheory  realTheory
relationTheory  rich_listTheory  ringTheory  seqTheory
sortingTheory  state_transformerTheory  stringTheory  sumTheory
topologyTheory  transcTheory  whileTheory
\end{code}
The library theories are conveniently browsed using the following HTML reference page (created when HOL4 is compiled).
Replace {\tt <path>} with the path to your HOL4 installation.
\begin{code}
<path>/HOL/help/HOLindex.html
\end{code}

Once theories have been opened (see Section~\ref{copy}), one can search for theorems in the current
context using {\tt print\_match}. For example, with {\tt arithmeticTheory} opened, doing {\tt M-h~M-r}
with the following selected,
\begin{code}
print_match [] \ldquo{}n DIV m <= k\rdquo{}
\end{code}
prints a list of theorems containing $n\; \texttt{\small DIV} \;m \leq k$ for some $n,m,k$:\vspace{-1.5em}
\begin{code}
>>- print_match [] ``n DIV m <= k``
\end{code}
Try to write increasingly specific queries if the returned list is long, \eg{}
{\tt\small print\_match [] \sq \sq n DIV m\sq\sq} returns a list of length 32. Note that {\tt\small print\_match [] \sq \sq DIV\sq\sq}
does not work since {\tt\small DIV} is an infix operator, but {\tt\small print\_match [] \sq \sq \$DIV\sq \sq} works.

The key-binding \texttt{M-h~m} (and the menu entry ``DB match'') will prompt for the term pattern to search for, and pass this query onto the HOL session (saving the need to type \texttt{print\_match~[]} and the enclosing quotation marks).

It is also possible to search over theorem \emph{names} using the function \texttt{DB.find}, or the key-binding \texttt{M-h~f}.
The string provided to this name is a regular expression that ignores case and scans all of the known theorems' names, searching for those that include a sub-string matching the regular expression.
In addition to the standard operators (\texttt{|}, \texttt{*}, \dots), a particularly useful addition is \td{}, which is defined:
\[ \mathit{re}_1\td\mathit{re}_2 =  (\mathtt{.}^{\mathtt{*}}\mathit{re}_1\mathtt{.}^{\mathtt{*}})\mathtt{\&}(\mathtt{.}^{\mathtt{*}}\mathit{re}_2\mathtt{.}^{\mathtt{*}})
\]
where $\mathtt{\&}$ is the regular expression intersection operator.
Thus, if one writes \texttt{DB.find~"foo\td{}bar"}, one will get back a list of all theorems whose names include both the strings \texttt{"foo"} and \texttt{"bar"}, which is useful if one is not sure about the order in which those substrings occur in the theorem name.

\mysec{Common proof tactics\label{tactics}}

Most HOL4 proofs are carried out by stating a goal and then applying
\emph{proof tactics} that reduce the goal.  This section describes
basic use of the most important proof tactics.  Press {\tt\small
  C-space} then {\tt\small M-h e} to apply a tactic
(Section~\ref{apply}).


\mysubsec{Automatic provers}

Simple goals can often be proved automatically by {\tt\small
  metis\_tac}, {\tt\small decide\_tac} or {\tt\small EVAL\_TAC}.
Of these, {\tt\small metis\_tac} is first-order prover which is good at general
problems, but requires the user to supply a list of relevant theorems,
\eg{} the following goal is proved by {\tt\small metis\_tac
  [MOD\_TIMES2,MOD\_MOD,MOD\_PLUS]}.
\begin{code}
\(\forall\)k. 0 < k ==> \(\forall\)m p n. (m MOD k * p + n) MOD k = (m * p + n) MOD k
\end{code}

\noindent
{\tt\small decide\_tac} handles linear arithmetic over natural
numbers, \eg{} {\tt\small decide\_tac} solves:
\begin{code}
\(\forall\)m n k. m < n \(\land\) n < m+k \(\land\) k <= 3 \(\land\) ~(n = m+1) ==> (n = m+2)
\end{code}
{\tt\small EVAL\_TAC} is good at fully instantiated goals, \eg{} {\tt\small EVAL\_TAC} solves:
\begin{code}
0 < 5 \(\land\) (HD [4;5;6;7] + 2**32 = 3500 DIV 7 + 4294966800)
\end{code}

\mysubsec{Proof set-up}

Goals that contain top-level universal quantifiers ({\tt $\forall$x.}),
implication ({\tt ==>}) or conjunction ({\tt \(\land\)}) are often
taken apart using {\tt\small rpt strip\_tac} or just {\tt\small
  strip\_tac}, \eg{} the goal {\tt\small $\forall$x{.}~($\forall$z{.}~x < h z) ==> $\exists$y{.}~f x = y}
becomes the following. (Assumptions are written under the line.)
\begin{code}
    \(\exists\)y. f x = y
    ------------------------------------
      \(\forall\)z. x < h z
\end{code}

\mysubsec{Existential quantifiers}

Goals that have a top-level existential quantifier can be given a
witness using {\tt \small qexists\_tac}, \eg{} {\tt \small
  qexists\_tac \lsquo{}1\rsquo{}} applied to goal {\tt \small $\exists$n{.}~$\forall$k{.}~n * k = k}
produces goal {\tt \small $\forall$k{.}~1 * k = k}.

\mysubsec{Rewrites}

Most HOL4 proofs are based on rewriting using equality theorems, \eg{}
\begin{code}
ADD_0:            |- \(\forall\)n. n + 0 = n
LESS_MOD:         |- \(\forall\)n k. k < n ==> (k MOD n = k)
\end{code} {\tt \small asm\_simp\_tac} and {\tt \small full\_simp\_tac} are two
commonly used rewriting tactics, \eg{} suppose the goal is the following:
\begin{code}
    5 + 0 + m = (m MOD 10) + (5 MOD 8)
    ------------------------------------
      0.  p = 2 + 0 + (m MOD 10)
      1.  m < 10
\end{code}
{\tt \small asm\_simp\_tac bool\_ss
  [ADD\_0,LESS\_MOD]} rewrites the
goal using the supplied theorems together with the current goal's
assumptions and some boolean simplifications {\tt \small bool\_ss}:
\begin{code}
    5 + m = m + (5 MOD 8)
    ------------------------------------
      0.  p = 2 + 0 + (m MOD 10)
      1.  m < 10
\end{code}
{\tt \small full\_simp\_tac bool\_ss [ADD\_0,LESS\_MOD]}
does the same except that it also applies the rewrites to the
assumptions:
\begin{code}
    5 + m = m + (5 MOD 8)
    ------------------------------------
      0.  p = 2 + m
      1.  m < 10
\end{code}
{\tt \small bool\_ss} can be replaced by {\tt \small std\_ss}, which
is a stronger simplification set that would infer {\tt \small 5 < 8}
and hence simplify {\tt\small 5 MOD 8} as well. I recommend that the
interested reader also reads about {\tt\small AC}, {\tt\small Once}
and {\tt\small srw\_tac}.

\mysubsec{Induction}

Use the tactic {\tt\small Induct\_on \lsquo{}x\rsquo{}} to start an induction on {\tt\small x}.
Here {\tt x} can be any variable with a recursively defined type,
\eg{} a natural number, a list or a {\tt\small TREE} as defined in
Section~\ref{definition}.  One can start a complete (or strong)
induction over the natural number {\tt\small n} using {\tt\small
  completeInduct\_on \lsquo{}n\rsquo{}}.
As with \texttt{Cases\_on} one can also induct on terms (\eg, \texttt{\small Induct\_on~\lsquo{}hi~-~lo\rsquo{}}), though these proofs can be harder to carry out.

\mysubsec{Case splits}

A goal can be split into cases using {\tt\small Cases\_on \lsquo{}x\rsquo{}}. The
goal is split according to the constructors of the type of {\tt\small
  x}, \eg{} for the following goal
\begin{code}
    \(\forall\)x. ~(x = []) ==> (x = HD x::TL x)
\end{code}
{\tt\small Cases\_on \lsquo{}x\rsquo{}} splits the goal into two:
\begin{code}
    ~(h::t = []) ==> (h::t = HD (h::t)::TL (h::t))

    ~([] = []) ==> ([] = HD []::TL [])
\end{code}
Case splits on boolean expressions are also useful, \eg{} {\tt\small Cases\_on \lsquo{}n < 5\rsquo{}}.

\mysubsec{Subproofs}

It is often useful to start a mini-proof inside a larger proof, \eg{} for the goal
\begin{code}
    foo n
    ------------------------------------
      0 < n
\end{code}
we might want to prove {\tt\small h n = g n} assuming {\tt\small 0 <
  n}.
We can start such a subproof by typing {\tt\small sg \lsquo{}h n = g n\rsquo{}}.%
\footnote{You can also use the emacs binding {\tt\small M-h M-s}
with the cursor inside the sub-goal.} The new goal stack:
\begin{code}
    foo n
    ------------------------------------
      0.  0 < n
      1.  h n = g n

    h n = g n
    ------------------------------------
      0 < n
\end{code}
If {\tt\small h n = g n} can be proved in one step, \eg{} using {\tt\small metis\_tac [MY\_LEMMA]}, then
apply {\tt\small \lsquo{}h n = g n\rsquo{} by metis\_tac [MY\_LEMMA]} instead of
{\tt\small sg \lsquo{}h n = g n\rsquo{}}.  If the sub-goal requires
multiple steps the tactic after the \texttt{by} will need to be
parenthesised: {\tt\small\lsquo{}\textit{goal}\rsquo{} by ($\mathit{tac}_1$ \ml{\gt\gt}
  $\mathit{tac}_2$ ...)}

\mysubsec{Proof by contradiction}

Use {\tt\small CCONTR\_TAC} to add the negation of the goal to the
assumptions.  The task is then to prove that one of the assumptions of
the goal is false. One can \eg{} add more assumptions using
{\tt\small \sq...\sq \ by ...}, described above, until one assumption is the
negation of another assumption (and then apply {\tt\small metis\_tac []}).

\mysubsec{More tactics\label{html}}

An HTML reference of all tactics and proof tools is created when HOL4 is compiled.
Replace {\tt\small <path>} with the path to your HOL4 installation.
\begin{code}
<path>/HOL4/help/src/htmlsigs/idIndex.html
\end{code}
The reference provides an easy way to access both the implementations of
tactics as well as their documentation (where such exists).
The interested reader may want to look up the following:
\begin{code}
CONV_TAC  disj1_tac  disj2_tac  match_mp_tac  mp_tac  pat_assum  Q
\end{code}

\newpage
\mysec{Further reading and general advice\label{reading}}

General advice on using HOL4:
\begin{enum}
\item State definitions carefully with the subsequent proofs in mind.
\item Make proofs reusable by splitting them into multiple small lemmas.
\item Strive to make the most of library theories and rewriting.
\end{enum}
One can only learn HOL4 via examples, so try proving something.
Example problems and solutions are presented in the \emph{HOL
  Tutorial}, available under:
\begin{center}
\url{https://hol-theorem-prover.org/#doc}
\end{center}
The same page also contains links to:
\begin{enum}
\item[~]\emph{HOL Description} -- a description of the HOL4 system
\item[~]\emph{HOL Reference} -- a detailed descriptions of proof tactics and other tools
\item[~]\emph{HOL Logic} -- a presentation of the underlying logic
\end{enum}
For day-to-day look-ups, I find {\tt print\_match} (illustrated in
Section~\ref{search}) and the HTML reference (mentioned in
Section~\ref{html}) most helpful.

\end{document}
%%% Local Variables:
%%% mode: latex
%%% End:
