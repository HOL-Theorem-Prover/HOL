(* m0Script.sml - generated by L3 - Tue Jun 27 13:58:18 2017 *)
open HolKernel boolLib bossLib Import

val () = Import.start "m0"

val _ = Record ("PRIMASK",[("PM",bTy),("primask'rst",FTy 31)])
;
val _ = Record
  ("PSR",
   [("C",bTy),("ExceptionNumber",FTy 6),("N",bTy),("T",bTy),("V",bTy),
    ("Z",bTy),("psr'rst",FTy 21)])
;
val _ = Record
  ("CONTROL",[("SPSEL",bTy),("control'rst",bTy),("nPRIV",bTy)])
;
val _ = Record
  ("AIRCR",
   [("ENDIANNESS",bTy),("SYSRESETREQ",bTy),("VECTCLRACTIVE",bTy),
    ("VECTKEY",F16),("aircr'rst",FTy 13)])
;
val _ = Record
  ("CCR",[("STKALIGN",bTy),("UNALIGN_TRP",bTy),("ccr'rst",FTy 30)])
;
val _ = Record ("SHPR2",[("PRI_11",FTy 2),("shpr2'rst",FTy 30)])
;
val _ = Record
  ("SHPR3",[("PRI_14",FTy 2),("PRI_15",FTy 2),("shpr3'rst",FTy 28)])
;
val _ = Record
  ("IPR",
   [("PRI_N0",FTy 2),("PRI_N1",FTy 2),("PRI_N2",FTy 2),("PRI_N3",FTy 2),
    ("ipr'rst",FTy 24)])
;
val _ = Construct [("Mode",[("Mode_Thread",[]),("Mode_Handler",[])])]
;
val _ = Construct
  [("ARM_Exception",
    [("ExternalInterrupt",[FTy 6]),("HardFault",[]),("NMI",[]),
     ("PendSV",[]),("Reset",[]),("SVCall",[]),("SysTick",[])])]
;
val _ = Construct
  [("RName",
    [("RName_0",[]),("RName_1",[]),("RName_2",[]),("RName_3",[]),
     ("RName_4",[]),("RName_5",[]),("RName_6",[]),("RName_7",[]),
     ("RName_8",[]),("RName_9",[]),("RName_10",[]),("RName_11",[]),
     ("RName_12",[]),("RName_SP_main",[]),("RName_SP_process",[]),
     ("RName_LR",[]),("RName_PC",[])])]
;
val _ = Construct
  [("SRType",
    [("SRType_LSL",[]),("SRType_LSR",[]),("SRType_ASR",[]),
     ("SRType_ROR",[]),("SRType_RRX",[])])]
;
val _ = Construct
  [("offset",[("immediate_form",[F32]),("register_form",[F4])])]
;
val _ = Construct
  [("Hint",
    [("Breakpoint",[F32]),("DataMemoryBarrier",[F4]),
     ("DataSynchronizationBarrier",[F4]),
     ("InstructionSynchronizationBarrier",[F4]),("SendEvent",[uTy]),
     ("WaitForEvent",[uTy]),("WaitForInterrupt",[uTy]),("Yield",[uTy])])]
;
val _ = Construct
  [("System",
    [("ChangeProcessorState",[bTy]),
     ("MoveToRegisterFromSpecial",[PTy(F8,F4)]),
     ("MoveToSpecialRegister",[PTy(F8,F4)]),("SupervisorCall",[F32])])]
;
val _ = Construct
  [("Store",
    [("Push",[FTy 9]),("StoreByte",[PTy(F4,PTy(F4,CTy"offset"))]),
     ("StoreHalf",[PTy(F4,PTy(F4,CTy"offset"))]),
     ("StoreMultiple",[PTy(F4,F8)]),
     ("StoreWord",[PTy(F4,PTy(F4,CTy"offset"))])])]
;
val _ = Construct
  [("Load",
    [("LoadByte",[PTy(bTy,PTy(F4,PTy(F4,CTy"offset")))]),
     ("LoadHalf",[PTy(bTy,PTy(F4,PTy(F4,CTy"offset")))]),
     ("LoadLiteral",[PTy(F4,F32)]),
     ("LoadMultiple",[PTy(bTy,PTy(F4,FTy 9))]),
     ("LoadWord",[PTy(F4,PTy(F4,CTy"offset"))])])]
;
val _ = Construct
  [("Media",
    [("ByteReverse",[PTy(F4,F4)]),
     ("ByteReversePackedHalfword",[PTy(F4,F4)]),
     ("ByteReverseSignedHalfword",[PTy(F4,F4)]),
     ("ExtendByte",[PTy(bTy,PTy(F4,F4))]),
     ("ExtendHalfword",[PTy(bTy,PTy(F4,F4))])])]
;
val _ = Construct [("Multiply",[("Multiply32",[PTy(F4,PTy(F4,F4))])])]
;
val _ = Construct
  [("Data",
    [("ArithLogicImmediate",[PTy(F4,PTy(bTy,PTy(F4,PTy(F4,F32))))]),
     ("CompareImmediate",[PTy(F4,F32)]),("Move",[PTy(F4,F32)]),
     ("Register",[PTy(F4,PTy(bTy,PTy(F4,PTy(F4,F4))))]),
     ("ShiftImmediate",
      [PTy(bTy,PTy(bTy,PTy(F4,PTy(F4,PTy(CTy"SRType",nTy)))))]),
     ("ShiftRegister",[PTy(F4,PTy(F4,PTy(CTy"SRType",F4)))]),
     ("TestCompareRegister",[PTy(FTy 2,PTy(F4,F4))])])]
;
val _ = Construct
  [("Branch",
    [("BranchExchange",[F4]),("BranchLinkExchangeRegister",[F4]),
     ("BranchLinkImmediate",[F32]),("BranchTarget",[F32])])]
;
val _ = Construct
  [("instruction",
    [("Branch",[CTy"Branch"]),("Data",[CTy"Data"]),("Hint",[CTy"Hint"]),
     ("Load",[CTy"Load"]),("Media",[CTy"Media"]),
     ("Multiply",[CTy"Multiply"]),("NoOperation",[uTy]),
     ("Store",[CTy"Store"]),("System",[CTy"System"]),("Undefined",[F32])])]
;
val _ = Construct
  [("MachineCode",[("Thumb",[F16]),("Thumb2",[PTy(F16,F16)])])]
;
val _ = Construct
  [("exception",
    [("ASSERT",[sTy]),("NoException",[]),("UNPREDICTABLE",[sTy])])]
;
val _ = Record
  ("m0_state",
   [("AIRCR",CTy"AIRCR"),("CCR",CTy"CCR"),("CONTROL",CTy"CONTROL"),
    ("CurrentMode",CTy"Mode"),("ExceptionActive",ATy(FTy 6,bTy)),
    ("MEM",ATy(F32,F8)),("NVIC_IPR",ATy(FTy 3,CTy"IPR")),
    ("PRIMASK",CTy"PRIMASK"),("PSR",CTy"PSR"),("REG",ATy(CTy"RName",F32)),
    ("SHPR2",CTy"SHPR2"),("SHPR3",CTy"SHPR3"),("VTOR",F32),("count",nTy),
    ("exception",CTy"exception"),("pcinc",F32),
    ("pending",OTy(CTy"ARM_Exception"))])
;
val qTy = CTy "m0_state";
fun qVar v = Term.mk_var (v, ParseDatatype.pretypeToType qTy);
val raise'exception_def = Def
  ("raise'exception",Var("e",CTy"exception"),
   Close
     (qVar"state",
      TP[LX(VTy"a"),
         ITE(EQ(Dest("exception",CTy"exception",qVar"state"),
                Const("NoException",CTy"exception")),
             Rupd("exception",TP[qVar"state",Var("e",CTy"exception")]),
             qVar"state")]))
;
val rec'PRIMASK_def = Def
  ("rec'PRIMASK",Var("x",F32),
   Rec(CTy"PRIMASK",
       [Bop(Bit,Var("x",F32),LN 0),EX(Var("x",F32),LN 31,LN 1,FTy 31)]))
;
val reg'PRIMASK_def = Def
  ("reg'PRIMASK",Var("x",CTy"PRIMASK"),
   CS(Var("x",CTy"PRIMASK"),
      [(Rec(CTy"PRIMASK",[bVar"PM",Var("primask'rst",FTy 31)]),
        CC[Var("primask'rst",FTy 31),Mop(Cast F1,bVar"PM")])]))
;
val write'rec'PRIMASK_def = Def
  ("write'rec'PRIMASK",TP[AVar F32,Var("x",CTy"PRIMASK")],
   Call("reg'PRIMASK",F32,Var("x",CTy"PRIMASK")))
;
val write'reg'PRIMASK_def = Def
  ("write'reg'PRIMASK",TP[AVar(CTy"PRIMASK"),Var("x",F32)],
   Call("rec'PRIMASK",CTy"PRIMASK",Var("x",F32)))
;
val rec'PSR_def = Def
  ("rec'PSR",Var("x",F32),
   Rec(CTy"PSR",
       [Bop(Bit,Var("x",F32),LN 29),EX(Var("x",F32),LN 5,LN 0,FTy 6),
        Bop(Bit,Var("x",F32),LN 31),Bop(Bit,Var("x",F32),LN 24),
        Bop(Bit,Var("x",F32),LN 28),Bop(Bit,Var("x",F32),LN 30),
        CC[EX(Var("x",F32),LN 23,LN 6,FTy 18),
           EX(Var("x",F32),LN 27,LN 25,FTy 3)]]))
;
val reg'PSR_def = Def
  ("reg'PSR",Var("x",CTy"PSR"),
   CS(Var("x",CTy"PSR"),
      [(Rec(CTy"PSR",
            [bVar"C",Var("ExceptionNumber",FTy 6),bVar"N",bVar"T",bVar"V",
             bVar"Z",Var("psr'rst",FTy 21)]),
        CC[Mop(Cast F1,bVar"N"),Mop(Cast F1,bVar"Z"),Mop(Cast F1,bVar"C"),
           Mop(Cast F1,bVar"V"),EX(Var("psr'rst",FTy 21),LN 2,LN 0,FTy 3),
           Mop(Cast F1,bVar"T"),
           EX(Var("psr'rst",FTy 21),LN 20,LN 3,FTy 18),
           Var("ExceptionNumber",FTy 6)])]))
;
val write'rec'PSR_def = Def
  ("write'rec'PSR",TP[AVar F32,Var("x",CTy"PSR")],
   Call("reg'PSR",F32,Var("x",CTy"PSR")))
;
val write'reg'PSR_def = Def
  ("write'reg'PSR",TP[AVar(CTy"PSR"),Var("x",F32)],
   Call("rec'PSR",CTy"PSR",Var("x",F32)))
;
val rec'CONTROL_def = Def
  ("rec'CONTROL",Var("x",FTy 3),
   Rec(CTy"CONTROL",
       [Bop(Bit,Var("x",FTy 3),LN 1),Bop(Bit,Var("x",FTy 3),LN 2),
        Bop(Bit,Var("x",FTy 3),LN 0)]))
;
val reg'CONTROL_def = Def
  ("reg'CONTROL",Var("x",CTy"CONTROL"),
   CS(Var("x",CTy"CONTROL"),
      [(Rec(CTy"CONTROL",[bVar"SPSEL",bVar"control'rst",bVar"nPRIV"]),
        CC[Mop(Cast F1,bVar"control'rst"),Mop(Cast F1,bVar"SPSEL"),
           Mop(Cast F1,bVar"nPRIV")])]))
;
val write'rec'CONTROL_def = Def
  ("write'rec'CONTROL",TP[AVar(FTy 3),Var("x",CTy"CONTROL")],
   Call("reg'CONTROL",FTy 3,Var("x",CTy"CONTROL")))
;
val write'reg'CONTROL_def = Def
  ("write'reg'CONTROL",TP[AVar(CTy"CONTROL"),Var("x",FTy 3)],
   Call("rec'CONTROL",CTy"CONTROL",Var("x",FTy 3)))
;
val rec'AIRCR_def = Def
  ("rec'AIRCR",Var("x",F32),
   Rec(CTy"AIRCR",
       [Bop(Bit,Var("x",F32),LN 15),Bop(Bit,Var("x",F32),LN 2),
        Bop(Bit,Var("x",F32),LN 1),EX(Var("x",F32),LN 31,LN 16,F16),
        CC[EX(Var("x",F32),LN 0,LN 0,F1),
           EX(Var("x",F32),LN 14,LN 3,FTy 12)]]))
;
val reg'AIRCR_def = Def
  ("reg'AIRCR",Var("x",CTy"AIRCR"),
   CS(Var("x",CTy"AIRCR"),
      [(Rec(CTy"AIRCR",
            [bVar"ENDIANNESS",bVar"SYSRESETREQ",bVar"VECTCLRACTIVE",
             Var("VECTKEY",F16),Var("aircr'rst",FTy 13)]),
        CC[Var("VECTKEY",F16),Mop(Cast F1,bVar"ENDIANNESS"),
           EX(Var("aircr'rst",FTy 13),LN 11,LN 0,FTy 12),
           Mop(Cast F1,bVar"SYSRESETREQ"),
           Mop(Cast F1,bVar"VECTCLRACTIVE"),
           EX(Var("aircr'rst",FTy 13),LN 12,LN 12,F1)])]))
;
val write'rec'AIRCR_def = Def
  ("write'rec'AIRCR",TP[AVar F32,Var("x",CTy"AIRCR")],
   Call("reg'AIRCR",F32,Var("x",CTy"AIRCR")))
;
val write'reg'AIRCR_def = Def
  ("write'reg'AIRCR",TP[AVar(CTy"AIRCR"),Var("x",F32)],
   Call("rec'AIRCR",CTy"AIRCR",Var("x",F32)))
;
val rec'CCR_def = Def
  ("rec'CCR",Var("x",F32),
   Rec(CTy"CCR",
       [Bop(Bit,Var("x",F32),LN 9),Bop(Bit,Var("x",F32),LN 3),
        CC[EX(Var("x",F32),LN 2,LN 0,FTy 3),
           EX(Var("x",F32),LN 8,LN 4,FTy 5),
           EX(Var("x",F32),LN 31,LN 10,FTy 22)]]))
;
val reg'CCR_def = Def
  ("reg'CCR",Var("x",CTy"CCR"),
   CS(Var("x",CTy"CCR"),
      [(Rec(CTy"CCR",
            [bVar"STKALIGN",bVar"UNALIGN_TRP",Var("ccr'rst",FTy 30)]),
        CC[EX(Var("ccr'rst",FTy 30),LN 21,LN 0,FTy 22),
           Mop(Cast F1,bVar"STKALIGN"),
           EX(Var("ccr'rst",FTy 30),LN 26,LN 22,FTy 5),
           Mop(Cast F1,bVar"UNALIGN_TRP"),
           EX(Var("ccr'rst",FTy 30),LN 29,LN 27,FTy 3)])]))
;
val write'rec'CCR_def = Def
  ("write'rec'CCR",TP[AVar F32,Var("x",CTy"CCR")],
   Call("reg'CCR",F32,Var("x",CTy"CCR")))
;
val write'reg'CCR_def = Def
  ("write'reg'CCR",TP[AVar(CTy"CCR"),Var("x",F32)],
   Call("rec'CCR",CTy"CCR",Var("x",F32)))
;
val rec'SHPR2_def = Def
  ("rec'SHPR2",Var("x",F32),
   Rec(CTy"SHPR2",
       [EX(Var("x",F32),LN 31,LN 30,FTy 2),
        EX(Var("x",F32),LN 29,LN 0,FTy 30)]))
;
val reg'SHPR2_def = Def
  ("reg'SHPR2",Var("x",CTy"SHPR2"),
   CS(Var("x",CTy"SHPR2"),
      [(Rec(CTy"SHPR2",[Var("PRI_11",FTy 2),Var("shpr2'rst",FTy 30)]),
        CC[Var("PRI_11",FTy 2),Var("shpr2'rst",FTy 30)])]))
;
val write'rec'SHPR2_def = Def
  ("write'rec'SHPR2",TP[AVar F32,Var("x",CTy"SHPR2")],
   Call("reg'SHPR2",F32,Var("x",CTy"SHPR2")))
;
val write'reg'SHPR2_def = Def
  ("write'reg'SHPR2",TP[AVar(CTy"SHPR2"),Var("x",F32)],
   Call("rec'SHPR2",CTy"SHPR2",Var("x",F32)))
;
val rec'SHPR3_def = Def
  ("rec'SHPR3",Var("x",F32),
   Rec(CTy"SHPR3",
       [EX(Var("x",F32),LN 23,LN 22,FTy 2),
        EX(Var("x",F32),LN 31,LN 30,FTy 2),
        CC[EX(Var("x",F32),LN 21,LN 0,FTy 22),
           EX(Var("x",F32),LN 29,LN 24,FTy 6)]]))
;
val reg'SHPR3_def = Def
  ("reg'SHPR3",Var("x",CTy"SHPR3"),
   CS(Var("x",CTy"SHPR3"),
      [(Rec(CTy"SHPR3",
            [Var("PRI_14",FTy 2),Var("PRI_15",FTy 2),
             Var("shpr3'rst",FTy 28)]),
        CC[Var("PRI_15",FTy 2),
           EX(Var("shpr3'rst",FTy 28),LN 5,LN 0,FTy 6),
           Var("PRI_14",FTy 2),
           EX(Var("shpr3'rst",FTy 28),LN 27,LN 6,FTy 22)])]))
;
val write'rec'SHPR3_def = Def
  ("write'rec'SHPR3",TP[AVar F32,Var("x",CTy"SHPR3")],
   Call("reg'SHPR3",F32,Var("x",CTy"SHPR3")))
;
val write'reg'SHPR3_def = Def
  ("write'reg'SHPR3",TP[AVar(CTy"SHPR3"),Var("x",F32)],
   Call("rec'SHPR3",CTy"SHPR3",Var("x",F32)))
;
val rec'IPR_def = Def
  ("rec'IPR",Var("x",F32),
   Rec(CTy"IPR",
       [EX(Var("x",F32),LN 7,LN 6,FTy 2),
        EX(Var("x",F32),LN 15,LN 14,FTy 2),
        EX(Var("x",F32),LN 23,LN 22,FTy 2),
        EX(Var("x",F32),LN 31,LN 30,FTy 2),
        CC[EX(Var("x",F32),LN 5,LN 0,FTy 6),
           EX(Var("x",F32),LN 13,LN 8,FTy 6),
           EX(Var("x",F32),LN 21,LN 16,FTy 6),
           EX(Var("x",F32),LN 29,LN 24,FTy 6)]]))
;
val reg'IPR_def = Def
  ("reg'IPR",Var("x",CTy"IPR"),
   CS(Var("x",CTy"IPR"),
      [(Rec(CTy"IPR",
            [Var("PRI_N0",FTy 2),Var("PRI_N1",FTy 2),Var("PRI_N2",FTy 2),
             Var("PRI_N3",FTy 2),Var("ipr'rst",FTy 24)]),
        CC[Var("PRI_N3",FTy 2),EX(Var("ipr'rst",FTy 24),LN 5,LN 0,FTy 6),
           Var("PRI_N2",FTy 2),EX(Var("ipr'rst",FTy 24),LN 11,LN 6,FTy 6),
           Var("PRI_N1",FTy 2),
           EX(Var("ipr'rst",FTy 24),LN 17,LN 12,FTy 6),
           Var("PRI_N0",FTy 2),EX(Var("ipr'rst",FTy 24),LN 23,LN 18,FTy 6)])]))
;
val write'rec'IPR_def = Def
  ("write'rec'IPR",TP[AVar F32,Var("x",CTy"IPR")],
   Call("reg'IPR",F32,Var("x",CTy"IPR")))
;
val write'reg'IPR_def = Def
  ("write'reg'IPR",TP[AVar(CTy"IPR"),Var("x",F32)],
   Call("rec'IPR",CTy"IPR",Var("x",F32)))
;
val ProcessorID_def = Def ("ProcessorID",AVar uTy,LI 0)
;
val ConditionPassed_def = Def
  ("ConditionPassed",Var("cond",F4),
   Close
     (qVar"state",
      Let(TP[bVar"v",qVar"s"],
          CS(EX(Var("cond",F4),LN 3,LN 1,FTy 3),
             [(LW(0,3),
               TP[Dest("Z",bTy,Dest("PSR",CTy"PSR",qVar"state")),
                  qVar"state"]),
              (LW(1,3),
               TP[Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state")),
                  qVar"state"]),
              (LW(2,3),
               TP[Dest("N",bTy,Dest("PSR",CTy"PSR",qVar"state")),
                  qVar"state"]),
              (LW(3,3),
               TP[Dest("V",bTy,Dest("PSR",CTy"PSR",qVar"state")),
                  qVar"state"]),
              (LW(4,3),
               TP[Bop(And,Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state")),
                      Mop(Not,
                          Dest("Z",bTy,Dest("PSR",CTy"PSR",qVar"state")))),
                  qVar"state"]),
              (LW(5,3),
               TP[EQ(Dest("N",bTy,Dest("PSR",CTy"PSR",qVar"state")),
                     Dest("V",bTy,Dest("PSR",CTy"PSR",qVar"state"))),
                  qVar"state"]),
              (LW(6,3),
               TP[Bop(And,
                      EQ(Dest("N",bTy,Dest("PSR",CTy"PSR",qVar"state")),
                         Dest("V",bTy,Dest("PSR",CTy"PSR",qVar"state"))),
                      Mop(Not,
                          Dest("Z",bTy,Dest("PSR",CTy"PSR",qVar"state")))),
                  qVar"state"]),(LW(7,3),TP[LT,qVar"state"])]),
          ITE(Bop(And,Bop(Bit,Var("cond",F4),LN 0),
                  Mop(Not,EQ(Var("cond",F4),LW(15,4)))),Mop(Not,bVar"v"),
              bVar"v"))))
;
val Raise_def = Def
  ("Raise",Var("e",CTy"ARM_Exception"),
   Close
     (qVar"state",
      Rupd
        ("pending",TP[qVar"state",Mop(Some,Var("e",CTy"ARM_Exception"))])))
;
val CurrentModeIsPrivileged_def = Def
  ("CurrentModeIsPrivileged",AVar uTy,
   Close
     (qVar"state",
      Bop(Or,
          EQ(Dest("CurrentMode",CTy"Mode",qVar"state"),
             LC("Mode_Handler",CTy"Mode")),
          Mop(Not,
              Dest("nPRIV",bTy,Dest("CONTROL",CTy"CONTROL",qVar"state"))))))
;
val LookUpSP_def = Def
  ("LookUpSP",AVar uTy,
   Close
     (qVar"state",
      ITE(Dest("SPSEL",bTy,Dest("CONTROL",CTy"CONTROL",qVar"state")),
          LC("RName_SP_process",CTy"RName"),LC("RName_SP_main",CTy"RName"))))
;
val R_def = Def
  ("R",Var("n",F4),
   Close
     (qVar"state",
      ITB([(EQ(Var("n",F4),LW(15,4)),
            Bop(Add,
                Apply
                  (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
                   LC("RName_PC",CTy"RName")),LW(4,32))),
           (EQ(Var("n",F4),LW(14,4)),
            Apply
              (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
               LC("RName_LR",CTy"RName"))),
           (EQ(Var("n",F4),LW(13,4)),
            Apply
              (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
               Apply(Call("LookUpSP",ATy(qTy,CTy"RName"),LU),qVar"state")))],
          Apply
            (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
             Mop(Cast(CTy"RName"),Var("n",F4))))))
;
val write'R_def = Def
  ("write'R",TP[Var("value",F32),Var("n",F4)],
   Close
     (qVar"state",
      ITB([(EQ(Var("n",F4),LW(15,4)),
            Mop(Snd,
                Apply
                  (Call
                     ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                      Call("ASSERT",CTy"exception",LS"n >= 0 and n <= 14")),
                   qVar"state"))),
           (EQ(Var("n",F4),LW(14,4)),
            Rupd
              ("REG",
               TP[qVar"state",
                  Fupd
                    (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
                     LC("RName_LR",CTy"RName"),Var("value",F32))])),
           (EQ(Var("n",F4),LW(13,4)),
            Rupd
              ("REG",
               TP[qVar"state",
                  Fupd
                    (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
                     Apply
                       (Call("LookUpSP",ATy(qTy,CTy"RName"),LU),
                        qVar"state"),
                     CC[EX(Var("value",F32),LN 31,LN 2,FTy 30),LW(0,2)])]))],
          Rupd
            ("REG",
             TP[qVar"state",
                Fupd
                  (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
                   Mop(Cast(CTy"RName"),Var("n",F4)),Var("value",F32))]))))
;
val SP_main_def = Def
  ("SP_main",qVar"state",
   Apply
     (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
      LC("RName_SP_main",CTy"RName")))
;
val write'SP_main_def = Def
  ("write'SP_main",Var("value",F32),
   Close
     (qVar"state",
      Rupd
        ("REG",
         TP[qVar"state",
            Fupd
              (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
               LC("RName_SP_main",CTy"RName"),Var("value",F32))])))
;
val SP_process_def = Def
  ("SP_process",qVar"state",
   Apply
     (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
      LC("RName_SP_process",CTy"RName")))
;
val write'SP_process_def = Def
  ("write'SP_process",Var("value",F32),
   Close
     (qVar"state",
      Rupd
        ("REG",
         TP[qVar"state",
            Fupd
              (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
               LC("RName_SP_process",CTy"RName"),Var("value",F32))])))
;
val SP_def = Def
  ("SP",qVar"state",Apply(Call("R",ATy(qTy,F32),LW(13,4)),qVar"state"))
;
val write'SP_def = Def
  ("write'SP",Var("value",F32),
   Close
     (qVar"state",
      Apply
        (Call("write'R",ATy(qTy,qTy),TP[Var("value",F32),LW(13,4)]),
         qVar"state")))
;
val LR_def = Def
  ("LR",qVar"state",Apply(Call("R",ATy(qTy,F32),LW(14,4)),qVar"state"))
;
val write'LR_def = Def
  ("write'LR",Var("value",F32),
   Close
     (qVar"state",
      Apply
        (Call("write'R",ATy(qTy,qTy),TP[Var("value",F32),LW(14,4)]),
         qVar"state")))
;
val PC_def = Def
  ("PC",qVar"state",Apply(Call("R",ATy(qTy,F32),LW(15,4)),qVar"state"))
;
val write'PC_def = Def
  ("write'PC",Var("value",F32),
   Close
     (qVar"state",
      Rupd
        ("REG",
         TP[qVar"state",
            Fupd
              (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
               LC("RName_PC",CTy"RName"),Var("value",F32))])))
;
val mem1_def = Def
  ("mem1",Var("address",F32),
   Close
     (qVar"state",
      Mop(Cast vTy,
          Apply(Dest("MEM",ATy(F32,F8),qVar"state"),Var("address",F32)))))
;
val mem_def = Def
  ("mem",TP[Var("address",F32),nVar"size"],
   Close
     (qVar"state",
      CS(nVar"size",
         [(LN 1,
           TP[EX(Apply
                   (Call
                      ("mem1",ATy(qTy,vTy),
                       Bop(Add,Var("address",F32),LW(0,32))),qVar"state"),
                 LN 7,LN 0,vTy),qVar"state"]),
          (LN 2,
           TP[EX(CC[Apply
                      (Call
                         ("mem1",ATy(qTy,vTy),
                          Bop(Add,Var("address",F32),LW(1,32))),
                       qVar"state"),
                    Apply
                      (Call
                         ("mem1",ATy(qTy,vTy),
                          Bop(Add,Var("address",F32),LW(0,32))),
                       qVar"state")],LN 15,LN 0,vTy),qVar"state"]),
          (LN 4,
           TP[EX(CC[Apply
                      (Call
                         ("mem1",ATy(qTy,vTy),
                          Bop(Add,Var("address",F32),LW(3,32))),
                       qVar"state"),
                    Apply
                      (Call
                         ("mem1",ATy(qTy,vTy),
                          Bop(Add,Var("address",F32),LW(2,32))),
                       qVar"state"),
                    Apply
                      (Call
                         ("mem1",ATy(qTy,vTy),
                          Bop(Add,Var("address",F32),LW(1,32))),
                       qVar"state"),
                    Apply
                      (Call
                         ("mem1",ATy(qTy,vTy),
                          Bop(Add,Var("address",F32),LW(0,32))),
                       qVar"state")],LN 31,LN 0,vTy),qVar"state"]),
          (AVar nTy,
           Apply
             (Call
                ("raise'exception",ATy(qTy,PTy(vTy,qTy)),
                 Call("ASSERT",CTy"exception",LS"mem: size in {1, 2, 4}")),
              qVar"state"))])))
;
val write'mem_def = Def
  ("write'mem",TP[vVar"value",Var("address",F32),nVar"size"],
   Close
     (qVar"state",
      CS(nVar"size",
         [(LN 1,
           Rupd
             ("MEM",
              TP[qVar"state",
                 Fupd
                   (Dest("MEM",ATy(F32,F8),qVar"state"),
                    Bop(Add,Var("address",F32),LW(0,32)),
                    Mop(Cast F8,EX(vVar"value",LN 7,LN 0,vTy)))])),
          (LN 2,
           Let(qVar"s",
               Rupd
                 ("MEM",
                  TP[qVar"state",
                     Fupd
                       (Dest("MEM",ATy(F32,F8),qVar"state"),
                        Bop(Add,Var("address",F32),LW(0,32)),
                        Mop(Cast F8,EX(vVar"value",LN 7,LN 0,vTy)))]),
               Rupd
                 ("MEM",
                  TP[qVar"s",
                     Fupd
                       (Dest("MEM",ATy(F32,F8),qVar"s"),
                        Bop(Add,Var("address",F32),LW(1,32)),
                        Mop(Cast F8,EX(vVar"value",LN 15,LN 8,vTy)))]))),
          (LN 4,
           Let(qVar"s",
               Rupd
                 ("MEM",
                  TP[qVar"state",
                     Fupd
                       (Dest("MEM",ATy(F32,F8),qVar"state"),
                        Bop(Add,Var("address",F32),LW(0,32)),
                        Mop(Cast F8,EX(vVar"value",LN 7,LN 0,vTy)))]),
               Let(qVar"s",
                   Rupd
                     ("MEM",
                      TP[qVar"s",
                         Fupd
                           (Dest("MEM",ATy(F32,F8),qVar"s"),
                            Bop(Add,Var("address",F32),LW(1,32)),
                            Mop(Cast F8,EX(vVar"value",LN 15,LN 8,vTy)))]),
                   Let(qVar"s",
                       Rupd
                         ("MEM",
                          TP[qVar"s",
                             Fupd
                               (Dest("MEM",ATy(F32,F8),qVar"s"),
                                Bop(Add,Var("address",F32),LW(2,32)),
                                Mop(Cast F8,
                                    EX(vVar"value",LN 23,LN 16,vTy)))]),
                       Rupd
                         ("MEM",
                          TP[qVar"s",
                             Fupd
                               (Dest("MEM",ATy(F32,F8),qVar"s"),
                                Bop(Add,Var("address",F32),LW(3,32)),
                                Mop(Cast F8,
                                    EX(vVar"value",LN 31,LN 24,vTy)))]))))),
          (AVar nTy,
           Mop(Snd,
               Apply
                 (Call
                    ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                     Call
                       ("ASSERT",CTy"exception",LS"mem: size in {1, 2, 4}")),
                  qVar"state")))])))
;
val BigEndianReverse_def = Def
  ("BigEndianReverse",TP[vVar"value",nVar"n"],
   Close
     (qVar"state",
      CS(nVar"n",
         [(LN 1,TP[EX(vVar"value",LN 7,LN 0,vTy),qVar"state"]),
          (LN 2,
           TP[CC[EX(vVar"value",LN 7,LN 0,vTy),
                 EX(vVar"value",LN 15,LN 8,vTy)],qVar"state"]),
          (LN 4,
           TP[CC[EX(vVar"value",LN 7,LN 0,vTy),
                 EX(vVar"value",LN 15,LN 8,vTy),
                 EX(vVar"value",LN 23,LN 16,vTy),
                 EX(vVar"value",LN 31,LN 24,vTy)],qVar"state"]),
          (AVar nTy,
           Apply
             (Call
                ("raise'exception",ATy(qTy,PTy(vTy,qTy)),
                 Call
                   ("ASSERT",CTy"exception",
                    LS"BigEndianReverse: n in {1, 2, 4}")),qVar"state"))])))
;
val Align_def = Def
  ("Align",TP[Var("w",BTy"N"),nVar"n"],
   Mop(Cast(BTy"N"),
       Bop(Mul,nVar"n",Bop(Div,Mop(Cast nTy,Var("w",BTy"N")),nVar"n"))))
;
val Aligned_def = Def
  ("Aligned",TP[Var("w",BTy"N"),nVar"n"],
   EQ(Var("w",BTy"N"),Call("Align",BTy"N",TP[Var("w",BTy"N"),nVar"n"])))
;
val MemA_def = Def
  ("MemA",TP[Var("address",F32),nVar"size"],
   Close
     (qVar"state",
      ITE(Mop(Not,Call("Aligned",bTy,TP[Var("address",F32),nVar"size"])),
          TP[LX(BTy"N"),
             Apply
               (Call
                  ("Raise",ATy(qTy,qTy),
                   Const("HardFault",CTy"ARM_Exception")),qVar"state")],
          Let(TP[vVar"v",qVar"s"],
              Apply
                (Call
                   ("mem",ATy(qTy,PTy(vTy,qTy)),
                    TP[Var("address",F32),nVar"size"]),qVar"state"),
              Let(TP[vVar"v",qVar"s"],
                  ITE(Dest
                        ("ENDIANNESS",bTy,Dest("AIRCR",CTy"AIRCR",qVar"s")),
                      Apply
                        (Call
                           ("BigEndianReverse",ATy(qTy,PTy(vTy,qTy)),
                            TP[vVar"v",nVar"size"]),qVar"s"),
                      TP[vVar"v",qVar"s"]),
                  TP[Mop(Cast(BTy"N"),vVar"v"),qVar"s"])))))
;
val write'MemA_def = Def
  ("write'MemA",TP[Var("value",BTy"N"),Var("address",F32),nVar"size"],
   Close
     (qVar"state",
      ITE(Mop(Not,Call("Aligned",bTy,TP[Var("address",F32),nVar"size"])),
          Apply
            (Call
               ("Raise",ATy(qTy,qTy),Const("HardFault",CTy"ARM_Exception")),
             qVar"state"),
          Let(TP[Var("v",PTy(vTy,PTy(F32,nTy))),qVar"s"],
              Let(TP[vVar"v",qVar"s"],
                  ITE(Dest
                        ("ENDIANNESS",bTy,
                         Dest("AIRCR",CTy"AIRCR",qVar"state")),
                      Apply
                        (Call
                           ("BigEndianReverse",ATy(qTy,PTy(vTy,qTy)),
                            TP[Mop(Cast vTy,Var("value",BTy"N")),
                               nVar"size"]),qVar"state"),
                      TP[Mop(Cast vTy,Var("value",BTy"N")),qVar"state"]),
                  TP[TP[vVar"v",Var("address",F32),nVar"size"],qVar"s"]),
              Apply
                (Call
                   ("write'mem",ATy(qTy,qTy),
                    Var("v",PTy(vTy,PTy(F32,nTy)))),qVar"s")))))
;
val MemU_def = Def
  ("MemU",TP[Var("address",F32),nVar"size"],
   Close
     (qVar"state",
      Apply
        (Call
           ("MemA",ATy(qTy,PTy(BTy"N",qTy)),
            TP[Var("address",F32),nVar"size"]),qVar"state")))
;
val write'MemU_def = Def
  ("write'MemU",TP[Var("value",BTy"N"),Var("address",F32),nVar"size"],
   Close
     (qVar"state",
      Apply
        (Call
           ("write'MemA",ATy(qTy,qTy),
            TP[Var("value",BTy"N"),Var("address",F32),nVar"size"]),
         qVar"state")))
;
val ExcNumber_def = Def
  ("ExcNumber",Var("e",CTy"ARM_Exception"),
   CS(Var("e",CTy"ARM_Exception"),
      [(Const("Reset",CTy"ARM_Exception"),LW(1,6)),
       (Const("NMI",CTy"ARM_Exception"),LW(2,6)),
       (Const("HardFault",CTy"ARM_Exception"),LW(3,6)),
       (Const("SVCall",CTy"ARM_Exception"),LW(11,6)),
       (Const("PendSV",CTy"ARM_Exception"),LW(14,6)),
       (Const("SysTick",CTy"ARM_Exception"),LW(15,6)),
       (Call("ExternalInterrupt",CTy"ARM_Exception",Var("n",FTy 6)),
        Bop(Add,LW(16,6),Var("n",FTy 6)))]))
;
val TakeReset_def = Def
  ("TakeReset",AVar uTy,
   Close
     (qVar"state",
      Let(Var("v",F32),Dest("VTOR",F32,qVar"state"),
          Let(TP[Var("v0",F32),qVar"s"],
              Apply
                (Call("MemA",ATy(qTy,PTy(F32,qTy)),TP[Var("v",F32),LN 4]),
                 Mop(Snd,
                     Apply
                       (For(TP[LN 0,LN 12,
                               Close
                                 (nVar"i",
                                  Close
                                    (qVar"state",
                                     TP[LU,
                                        Apply
                                          (Call
                                             ("write'R",ATy(qTy,qTy),
                                              TP[LX F32,
                                                 Mop(Cast F4,nVar"i")]),
                                           qVar"state")]))]),qVar"state"))),
              Let(TP[Var("v",F32),qVar"s"],
                  Apply
                    (Call
                       ("MemA",ATy(qTy,PTy(F32,qTy)),
                        TP[Bop(Add,Var("v",F32),LW(4,32)),LN 4]),
                     Apply
                       (Call("write'LR",ATy(qTy,qTy),LX F32),
                        Apply
                          (Call
                             ("write'SP_process",ATy(qTy,qTy),
                              CC[LX(FTy 30),LW(0,2)]),
                           Apply
                             (Call
                                ("write'SP_main",ATy(qTy,qTy),
                                 Var("v0",F32)),qVar"s")))),
                  Let(qVar"s",
                      Rupd
                        ("PSR",
                         TP[Rupd
                              ("CurrentMode",
                               TP[Apply
                                    (Call
                                       ("write'PC",ATy(qTy,qTy),
                                        Var("v",F32)),qVar"s"),
                                  LC("Mode_Thread",CTy"Mode")]),
                            LX(CTy"PSR")]),
                      Let(qVar"s",
                          Rupd
                            ("PSR",
                             TP[qVar"s",
                                Rupd
                                  ("ExceptionNumber",
                                   TP[Dest("PSR",CTy"PSR",qVar"s"),LW(0,6)])]),
                          Let(qVar"s",
                              Rupd
                                ("PRIMASK",
                                 TP[qVar"s",
                                    Rupd
                                      ("PM",
                                       TP[Dest
                                            ("PRIMASK",CTy"PRIMASK",
                                             qVar"s"),LF])]),
                              Let(qVar"s",
                                  Rupd
                                    ("CONTROL",
                                     TP[qVar"s",
                                        Rupd
                                          ("SPSEL",
                                           TP[Dest
                                                ("CONTROL",CTy"CONTROL",
                                                 qVar"s"),LF])]),
                                  Mop(Snd,
                                      Apply
                                        (For(TP[LN 0,LN 63,
                                                Close
                                                  (nVar"i",
                                                   Close
                                                     (qVar"state",
                                                      TP[LU,
                                                         Rupd
                                                           ("ExceptionActive",
                                                            TP[qVar"state",
                                                               Fupd
                                                                 (Dest
                                                                    ("ExceptionActive",
                                                                     ATy(FTy 6,
                                                                         bTy),
                                                                     qVar"state"),
                                                                  Mop(Cast
                                                                        (FTy 6),
                                                                      nVar"i"),
                                                                  LF)])]))]),
                                         Rupd
                                           ("CONTROL",
                                            TP[qVar"s",
                                               Rupd
                                                 ("nPRIV",
                                                  TP[Dest
                                                       ("CONTROL",
                                                        CTy"CONTROL",
                                                        qVar"s"),LF])]))))))))))))
;
val ExceptionPriority_def = Def
  ("ExceptionPriority",nVar"n",
   Close
     (qVar"state",
      ITB([(EQ(nVar"n",LN 2),Mop(Neg,LI 2)),
           (EQ(nVar"n",LN 1),Mop(Neg,LI 1)),
           (EQ(nVar"n",LN 11),
            Mop(Cast iTy,
                Dest("PRI_11",FTy 2,Dest("SHPR2",CTy"SHPR2",qVar"state")))),
           (EQ(nVar"n",LN 14),
            Mop(Cast iTy,
                Dest("PRI_14",FTy 2,Dest("SHPR3",CTy"SHPR3",qVar"state")))),
           (EQ(nVar"n",LN 15),
            Mop(Cast iTy,
                Dest("PRI_15",FTy 2,Dest("SHPR3",CTy"SHPR3",qVar"state")))),
           (Bop(Ge,nVar"n",LN 16),
            Let(Var("v",CTy"IPR"),
                Apply
                  (Dest("NVIC_IPR",ATy(FTy 3,CTy"IPR"),qVar"state"),
                   Mop(Cast(FTy 3),Bop(Div,Bop(Sub,nVar"n",LN 16),LN 4))),
                CS(Mop(Cast(FTy 2),Bop(Mod,nVar"n",LN 4)),
                   [(LW(0,2),
                     Mop(Cast iTy,Dest("PRI_N0",FTy 2,Var("v",CTy"IPR")))),
                    (LW(1,2),
                     Mop(Cast iTy,Dest("PRI_N1",FTy 2,Var("v",CTy"IPR")))),
                    (LW(2,2),
                     Mop(Cast iTy,Dest("PRI_N2",FTy 2,Var("v",CTy"IPR")))),
                    (LW(3,2),
                     Mop(Cast iTy,Dest("PRI_N3",FTy 2,Var("v",CTy"IPR"))))])))],
          LI 4)))
;
val ExecutionPriority_def = Def
  ("ExecutionPriority",AVar uTy,
   Close
     (qVar"state",
      Let(Var("s",PTy(iTy,PTy(iTy,qTy))),
          Mop(Snd,
              Apply
                (For(TP[LN 2,LN 48,
                        Close
                          (nVar"i",
                           Close
                             (Var("state",PTy(iTy,PTy(iTy,qTy))),
                              ITE(Apply
                                    (Dest
                                       ("ExceptionActive",ATy(FTy 6,bTy),
                                        Mop(Snd,
                                            Mop(Snd,
                                                Var("state",
                                                    PTy(iTy,PTy(iTy,qTy)))))),
                                     Mop(Cast(FTy 6),nVar"i")),
                                  Let(TP[iVar"v",
                                         Var("s",PTy(iTy,PTy(iTy,qTy)))],
                                      CS(Let(TP[iVar"v",qVar"s3"],
                                             Let(qVar"s",
                                                 Mop(Snd,
                                                     Mop(Snd,
                                                         Var("state",
                                                             PTy(iTy,
                                                                 PTy(iTy,
                                                                     qTy))))),
                                                 TP[Apply
                                                      (Call
                                                         ("ExceptionPriority",
                                                          ATy(qTy,iTy),
                                                          nVar"i"),qVar"s"),
                                                    qVar"s"]),
                                             TP[iVar"v",
                                                Mop(Fst,
                                                    Mop(Snd,
                                                        Var("state",
                                                            PTy(iTy,
                                                                PTy(iTy,
                                                                    qTy))))),
                                                qVar"s3"]),
                                         [(TP[iVar"v",
                                              Var("s3",PTy(iTy,qTy))],
                                           TP[iVar"v",
                                              Mop(Fst,
                                                  Var("state",
                                                      PTy(iTy,PTy(iTy,qTy)))),
                                              Var("s3",PTy(iTy,qTy))])]),
                                      TP[LU,
                                         ITE(Bop(Lt,iVar"v",
                                                 Mop(Fst,
                                                     Mop(Snd,
                                                         Var("s",
                                                             PTy(iTy,
                                                                 PTy(iTy,
                                                                     qTy)))))),
                                             TP[Mop(Fst,
                                                    Var("s",
                                                        PTy(iTy,
                                                            PTy(iTy,qTy)))),
                                                iVar"v",
                                                Mop(Snd,
                                                    Mop(Snd,
                                                        Var("s",
                                                            PTy(iTy,
                                                                PTy(iTy,
                                                                    qTy)))))],
                                             Var("s",PTy(iTy,PTy(iTy,qTy))))]),
                                  TP[LU,Var("state",PTy(iTy,PTy(iTy,qTy)))])))]),
                 TP[LI 4,LI 4,qVar"state"])),
          Let(Var("s",PTy(iTy,PTy(iTy,qTy))),
              ITE(Dest
                    ("PM",bTy,
                     Dest
                       ("PRIMASK",CTy"PRIMASK",
                        Mop(Snd,Mop(Snd,Var("s",PTy(iTy,PTy(iTy,qTy))))))),
                  TP[LI 0,Mop(Snd,Var("s",PTy(iTy,PTy(iTy,qTy))))],
                  Var("s",PTy(iTy,PTy(iTy,qTy)))),
              Mop(Min,
                  TP[Mop(Fst,Var("s",PTy(iTy,PTy(iTy,qTy)))),
                     Mop(Fst,Mop(Snd,Var("s",PTy(iTy,PTy(iTy,qTy)))))])))))
;
val ReturnAddress_def = Def
  ("ReturnAddress",AVar uTy,
   Close(qVar"state",Apply(Const("PC",ATy(qTy,F32)),qVar"state")))
;
val PushStack_def = Def
  ("PushStack",AVar uTy,
   Close
     (qVar"state",
      Let(TP[Var("s0",F32),Var("s1",F1)],TP[LX F32,LX F1],
          Let(Var("s",PTy(F32,PTy(F1,qTy))),
              ITE(Bop(And,
                      Dest
                        ("SPSEL",bTy,
                         Dest("CONTROL",CTy"CONTROL",qVar"state")),
                      EQ(Dest("CurrentMode",CTy"Mode",qVar"state"),
                         LC("Mode_Thread",CTy"Mode"))),
                  Let(TP[Var("v",F32),Var("s",PTy(F32,PTy(F1,qTy)))],
                      CS(TP[Apply
                              (Const("SP_process",ATy(qTy,F32)),
                               qVar"state"),Var("s1",F1),qVar"state"],
                         [(TP[Var("v",F32),Var("s3",PTy(F1,qTy))],
                           TP[Var("v",F32),Var("s0",F32),
                              Var("s3",PTy(F1,qTy))])]),
                      Let(qVar"s2",
                          Mop(Snd,Mop(Snd,Var("s",PTy(F32,PTy(F1,qTy))))),
                          Let(TP[Var("v",F32),
                                 Var("s",PTy(F32,PTy(F1,qTy)))],
                              CS(TP[Apply
                                      (Const("SP_process",ATy(qTy,F32)),
                                       qVar"s2"),
                                    EX(Var("v",F32),LN 2,LN 2,F1),qVar"s2"],
                                 [(TP[Var("v",F32),Var("s3",PTy(F1,qTy))],
                                   TP[Var("v",F32),
                                      Mop(Fst,
                                          Var("s",PTy(F32,PTy(F1,qTy)))),
                                      Var("s3",PTy(F1,qTy))])]),
                              Let(qVar"s2",
                                  Apply
                                    (Call
                                       ("write'SP_process",ATy(qTy,qTy),
                                        Bop(BAnd,
                                            Bop(Sub,Var("v",F32),LW(32,32)),
                                            Mop(BNot,Mop(Cast F32,LW(4,3))))),
                                     Mop(Snd,
                                         Mop(Snd,
                                             Var("s",PTy(F32,PTy(F1,qTy)))))),
                                  Let(TP[Var("v",F32),
                                         Var("s",PTy(F32,PTy(F1,qTy)))],
                                      CS(TP[Apply
                                              (Const
                                                 ("SP_process",
                                                  ATy(qTy,F32)),qVar"s2"),
                                            Mop(Fst,
                                                Mop(Snd,
                                                    Var("s",
                                                        PTy(F32,
                                                            PTy(F1,qTy))))),
                                            qVar"s2"],
                                         [(TP[Var("v",F32),
                                              Var("s3",PTy(F1,qTy))],
                                           TP[Var("v",F32),
                                              Mop(Fst,
                                                  Var("s",
                                                      PTy(F32,PTy(F1,qTy)))),
                                              Var("s3",PTy(F1,qTy))])]),
                                      TP[Var("v",F32),
                                         Mop(Snd,
                                             Var("s",PTy(F32,PTy(F1,qTy))))]))))),
                  Let(TP[Var("v",F32),Var("s",PTy(F32,PTy(F1,qTy)))],
                      CS(TP[Apply
                              (Const("SP_main",ATy(qTy,F32)),qVar"state"),
                            Var("s1",F1),qVar"state"],
                         [(TP[Var("v",F32),Var("s3",PTy(F1,qTy))],
                           TP[Var("v",F32),Var("s0",F32),
                              Var("s3",PTy(F1,qTy))])]),
                      Let(qVar"s2",
                          Mop(Snd,Mop(Snd,Var("s",PTy(F32,PTy(F1,qTy))))),
                          Let(TP[Var("v",F32),
                                 Var("s",PTy(F32,PTy(F1,qTy)))],
                              CS(TP[Apply
                                      (Const("SP_main",ATy(qTy,F32)),
                                       qVar"s2"),
                                    EX(Var("v",F32),LN 2,LN 2,F1),qVar"s2"],
                                 [(TP[Var("v",F32),Var("s3",PTy(F1,qTy))],
                                   TP[Var("v",F32),
                                      Mop(Fst,
                                          Var("s",PTy(F32,PTy(F1,qTy)))),
                                      Var("s3",PTy(F1,qTy))])]),
                              Let(qVar"s2",
                                  Apply
                                    (Call
                                       ("write'SP_process",ATy(qTy,qTy),
                                        Bop(BAnd,
                                            Bop(Sub,Var("v",F32),LW(32,32)),
                                            Mop(BNot,Mop(Cast F32,LW(4,3))))),
                                     Mop(Snd,
                                         Mop(Snd,
                                             Var("s",PTy(F32,PTy(F1,qTy)))))),
                                  Let(TP[Var("v",F32),
                                         Var("s",PTy(F32,PTy(F1,qTy)))],
                                      CS(TP[Apply
                                              (Const
                                                 ("SP_main",ATy(qTy,F32)),
                                               qVar"s2"),
                                            Mop(Fst,
                                                Mop(Snd,
                                                    Var("s",
                                                        PTy(F32,
                                                            PTy(F1,qTy))))),
                                            qVar"s2"],
                                         [(TP[Var("v",F32),
                                              Var("s3",PTy(F1,qTy))],
                                           TP[Var("v",F32),
                                              Mop(Fst,
                                                  Var("s",
                                                      PTy(F32,PTy(F1,qTy)))),
                                              Var("s3",PTy(F1,qTy))])]),
                                      TP[Var("v",F32),
                                         Mop(Snd,
                                             Var("s",PTy(F32,PTy(F1,qTy))))])))))),
              Let(Var("s",PTy(F32,PTy(F1,qTy))),
                  Let(TP[Var("v0",F32),Var("s0",PTy(F32,PTy(F1,qTy)))],
                      CS(Let(TP[Var("v",F32),qVar"s3"],
                             Let(qVar"s0",
                                 Mop(Snd,
                                     Mop(Snd,Var("s",PTy(F32,PTy(F1,qTy))))),
                                 TP[Apply
                                      (Call("R",ATy(qTy,F32),LW(0,4)),
                                       qVar"s0"),qVar"s0"]),
                             TP[Var("v",F32),
                                Mop(Fst,
                                    Mop(Snd,Var("s",PTy(F32,PTy(F1,qTy))))),
                                qVar"s3"]),
                         [(TP[Var("v",F32),Var("s3",PTy(F1,qTy))],
                           TP[Var("v",F32),
                              Mop(Fst,Var("s",PTy(F32,PTy(F1,qTy)))),
                              Var("s3",PTy(F1,qTy))])]),
                      TP[Mop(Fst,Var("s0",PTy(F32,PTy(F1,qTy)))),
                         Mop(Fst,Mop(Snd,Var("s0",PTy(F32,PTy(F1,qTy))))),
                         Apply
                           (Call
                              ("write'MemA",ATy(qTy,qTy),
                               TP[Var("v0",F32),
                                  Mop(Fst,Var("s",PTy(F32,PTy(F1,qTy)))),
                                  LN 4]),
                            Mop(Snd,
                                Mop(Snd,Var("s0",PTy(F32,PTy(F1,qTy))))))]),
                  Let(Var("s",PTy(F32,PTy(F1,qTy))),
                      Let(TP[Var("v0",F32),Var("s0",PTy(F32,PTy(F1,qTy)))],
                          CS(Let(TP[Var("v",F32),qVar"s3"],
                                 Let(qVar"s0",
                                     Mop(Snd,
                                         Mop(Snd,
                                             Var("s",PTy(F32,PTy(F1,qTy))))),
                                     TP[Apply
                                          (Call("R",ATy(qTy,F32),LW(1,4)),
                                           qVar"s0"),qVar"s0"]),
                                 TP[Var("v",F32),
                                    Mop(Fst,
                                        Mop(Snd,
                                            Var("s",PTy(F32,PTy(F1,qTy))))),
                                    qVar"s3"]),
                             [(TP[Var("v",F32),Var("s3",PTy(F1,qTy))],
                               TP[Var("v",F32),
                                  Mop(Fst,Var("s",PTy(F32,PTy(F1,qTy)))),
                                  Var("s3",PTy(F1,qTy))])]),
                          TP[Mop(Fst,Var("s0",PTy(F32,PTy(F1,qTy)))),
                             Mop(Fst,
                                 Mop(Snd,Var("s0",PTy(F32,PTy(F1,qTy))))),
                             Apply
                               (Call
                                  ("write'MemA",ATy(qTy,qTy),
                                   TP[Var("v0",F32),
                                      Bop(Add,
                                          Mop(Fst,
                                              Var("s",PTy(F32,PTy(F1,qTy)))),
                                          LW(4,32)),LN 4]),
                                Mop(Snd,
                                    Mop(Snd,Var("s0",PTy(F32,PTy(F1,qTy))))))]),
                      Let(Var("s",PTy(F32,PTy(F1,qTy))),
                          Let(TP[Var("v0",F32),
                                 Var("s0",PTy(F32,PTy(F1,qTy)))],
                              CS(Let(TP[Var("v",F32),qVar"s3"],
                                     Let(qVar"s0",
                                         Mop(Snd,
                                             Mop(Snd,
                                                 Var("s",
                                                     PTy(F32,PTy(F1,qTy))))),
                                         TP[Apply
                                              (Call
                                                 ("R",ATy(qTy,F32),LW(2,4)),
                                               qVar"s0"),qVar"s0"]),
                                     TP[Var("v",F32),
                                        Mop(Fst,
                                            Mop(Snd,
                                                Var("s",
                                                    PTy(F32,PTy(F1,qTy))))),
                                        qVar"s3"]),
                                 [(TP[Var("v",F32),Var("s3",PTy(F1,qTy))],
                                   TP[Var("v",F32),
                                      Mop(Fst,
                                          Var("s",PTy(F32,PTy(F1,qTy)))),
                                      Var("s3",PTy(F1,qTy))])]),
                              TP[Mop(Fst,Var("s0",PTy(F32,PTy(F1,qTy)))),
                                 Mop(Fst,
                                     Mop(Snd,
                                         Var("s0",PTy(F32,PTy(F1,qTy))))),
                                 Apply
                                   (Call
                                      ("write'MemA",ATy(qTy,qTy),
                                       TP[Var("v0",F32),
                                          Bop(Add,
                                              Mop(Fst,
                                                  Var("s",
                                                      PTy(F32,PTy(F1,qTy)))),
                                              LW(8,32)),LN 4]),
                                    Mop(Snd,
                                        Mop(Snd,
                                            Var("s0",PTy(F32,PTy(F1,qTy))))))]),
                          Let(Var("s",PTy(F32,PTy(F1,qTy))),
                              Let(TP[Var("v0",F32),
                                     Var("s0",PTy(F32,PTy(F1,qTy)))],
                                  CS(Let(TP[Var("v",F32),qVar"s3"],
                                         Let(qVar"s0",
                                             Mop(Snd,
                                                 Mop(Snd,
                                                     Var("s",
                                                         PTy(F32,
                                                             PTy(F1,qTy))))),
                                             TP[Apply
                                                  (Call
                                                     ("R",ATy(qTy,F32),
                                                      LW(3,4)),qVar"s0"),
                                                qVar"s0"]),
                                         TP[Var("v",F32),
                                            Mop(Fst,
                                                Mop(Snd,
                                                    Var("s",
                                                        PTy(F32,
                                                            PTy(F1,qTy))))),
                                            qVar"s3"]),
                                     [(TP[Var("v",F32),
                                          Var("s3",PTy(F1,qTy))],
                                       TP[Var("v",F32),
                                          Mop(Fst,
                                              Var("s",PTy(F32,PTy(F1,qTy)))),
                                          Var("s3",PTy(F1,qTy))])]),
                                  TP[Mop(Fst,
                                         Var("s0",PTy(F32,PTy(F1,qTy)))),
                                     Mop(Fst,
                                         Mop(Snd,
                                             Var("s0",PTy(F32,PTy(F1,qTy))))),
                                     Apply
                                       (Call
                                          ("write'MemA",ATy(qTy,qTy),
                                           TP[Var("v0",F32),
                                              Bop(Add,
                                                  Mop(Fst,
                                                      Var("s",
                                                          PTy(F32,
                                                              PTy(F1,qTy)))),
                                                  LW(12,32)),LN 4]),
                                        Mop(Snd,
                                            Mop(Snd,
                                                Var("s0",
                                                    PTy(F32,PTy(F1,qTy))))))]),
                              Let(Var("s",PTy(F32,PTy(F1,qTy))),
                                  Let(TP[Var("v0",F32),
                                         Var("s0",PTy(F32,PTy(F1,qTy)))],
                                      CS(Let(TP[Var("v",F32),qVar"s3"],
                                             Let(qVar"s0",
                                                 Mop(Snd,
                                                     Mop(Snd,
                                                         Var("s",
                                                             PTy(F32,
                                                                 PTy(F1,
                                                                     qTy))))),
                                                 TP[Apply
                                                      (Call
                                                         ("R",
                                                          ATy(qTy,F32),
                                                          LW(12,4)),
                                                       qVar"s0"),qVar"s0"]),
                                             TP[Var("v",F32),
                                                Mop(Fst,
                                                    Mop(Snd,
                                                        Var("s",
                                                            PTy(F32,
                                                                PTy(F1,qTy))))),
                                                qVar"s3"]),
                                         [(TP[Var("v",F32),
                                              Var("s3",PTy(F1,qTy))],
                                           TP[Var("v",F32),
                                              Mop(Fst,
                                                  Var("s",
                                                      PTy(F32,PTy(F1,qTy)))),
                                              Var("s3",PTy(F1,qTy))])]),
                                      TP[Mop(Fst,
                                             Var("s0",PTy(F32,PTy(F1,qTy)))),
                                         Mop(Fst,
                                             Mop(Snd,
                                                 Var("s0",
                                                     PTy(F32,PTy(F1,qTy))))),
                                         Apply
                                           (Call
                                              ("write'MemA",ATy(qTy,qTy),
                                               TP[Var("v0",F32),
                                                  Bop(Add,
                                                      Mop(Fst,
                                                          Var("s",
                                                              PTy(F32,
                                                                  PTy(F1,
                                                                      qTy)))),
                                                      LW(16,32)),LN 4]),
                                            Mop(Snd,
                                                Mop(Snd,
                                                    Var("s0",
                                                        PTy(F32,
                                                            PTy(F1,qTy))))))]),
                                  Let(Var("s",PTy(F32,PTy(F1,qTy))),
                                      Let(TP[Var("v0",F32),
                                             Var("s0",PTy(F32,PTy(F1,qTy)))],
                                          CS(Let(TP[Var("v",F32),qVar"s3"],
                                                 Let(qVar"s0",
                                                     Mop(Snd,
                                                         Mop(Snd,
                                                             Var("s",
                                                                 PTy(F32,
                                                                     PTy(F1,
                                                                         qTy))))),
                                                     TP[Apply
                                                          (Const
                                                             ("LR",
                                                              ATy(qTy,F32)),
                                                           qVar"s0"),
                                                        qVar"s0"]),
                                                 TP[Var("v",F32),
                                                    Mop(Fst,
                                                        Mop(Snd,
                                                            Var("s",
                                                                PTy(F32,
                                                                    PTy(F1,
                                                                        qTy))))),
                                                    qVar"s3"]),
                                             [(TP[Var("v",F32),
                                                  Var("s3",PTy(F1,qTy))],
                                               TP[Var("v",F32),
                                                  Mop(Fst,
                                                      Var("s",
                                                          PTy(F32,
                                                              PTy(F1,qTy)))),
                                                  Var("s3",PTy(F1,qTy))])]),
                                          TP[Mop(Fst,
                                                 Var("s0",
                                                     PTy(F32,PTy(F1,qTy)))),
                                             Mop(Fst,
                                                 Mop(Snd,
                                                     Var("s0",
                                                         PTy(F32,
                                                             PTy(F1,qTy))))),
                                             Apply
                                               (Call
                                                  ("write'MemA",
                                                   ATy(qTy,qTy),
                                                   TP[Var("v0",F32),
                                                      Bop(Add,
                                                          Mop(Fst,
                                                              Var("s",
                                                                  PTy(F32,
                                                                      PTy(F1,
                                                                          qTy)))),
                                                          LW(20,32)),LN 4]),
                                                Mop(Snd,
                                                    Mop(Snd,
                                                        Var("s0",
                                                            PTy(F32,
                                                                PTy(F1,qTy))))))]),
                                      Let(Var("s",PTy(F32,PTy(F1,qTy))),
                                          Let(TP[Var("v0",F32),
                                                 Var("s0",
                                                     PTy(F32,PTy(F1,qTy)))],
                                              CS(Let(TP[Var("v",F32),
                                                        qVar"s3"],
                                                     Let(qVar"s0",
                                                         Mop(Snd,
                                                             Mop(Snd,
                                                                 Var("s",
                                                                     PTy(F32,
                                                                         PTy(F1,
                                                                             qTy))))),
                                                         TP[Apply
                                                              (Call
                                                                 ("ReturnAddress",
                                                                  ATy(qTy,
                                                                      F32),
                                                                  LU),
                                                               qVar"s0"),
                                                            qVar"s0"]),
                                                     TP[Var("v",F32),
                                                        Mop(Fst,
                                                            Mop(Snd,
                                                                Var("s",
                                                                    PTy(F32,
                                                                        PTy(F1,
                                                                            qTy))))),
                                                        qVar"s3"]),
                                                 [(TP[Var("v",F32),
                                                      Var("s3",PTy(F1,qTy))],
                                                   TP[Var("v",F32),
                                                      Mop(Fst,
                                                          Var("s",
                                                              PTy(F32,
                                                                  PTy(F1,
                                                                      qTy)))),
                                                      Var("s3",PTy(F1,qTy))])]),
                                              TP[Mop(Fst,
                                                     Var("s0",
                                                         PTy(F32,
                                                             PTy(F1,qTy)))),
                                                 Mop(Fst,
                                                     Mop(Snd,
                                                         Var("s0",
                                                             PTy(F32,
                                                                 PTy(F1,
                                                                     qTy))))),
                                                 Apply
                                                   (Call
                                                      ("write'MemA",
                                                       ATy(qTy,qTy),
                                                       TP[Var("v0",F32),
                                                          Bop(Add,
                                                              Mop(Fst,
                                                                  Var("s",
                                                                      PTy(F32,
                                                                          PTy(F1,
                                                                              qTy)))),
                                                              LW(20,32)),
                                                          LN 4]),
                                                    Mop(Snd,
                                                        Mop(Snd,
                                                            Var("s0",
                                                                PTy(F32,
                                                                    PTy(F1,
                                                                        qTy))))))]),
                                          Let(qVar"s2",
                                              Apply
                                                (Call
                                                   ("write'MemA",
                                                    ATy(qTy,qTy),
                                                    TP[CC[EX(Call
                                                               ("reg'PSR",
                                                                F32,
                                                                Dest
                                                                  ("PSR",
                                                                   CTy"PSR",
                                                                   Mop(Snd,
                                                                       Mop(Snd,
                                                                           Var("s",
                                                                               PTy(F32,
                                                                                   PTy(F1,
                                                                                       qTy))))))),
                                                             LN 31,LN 10,
                                                             FTy 22),
                                                          Mop(Fst,
                                                              Mop(Snd,
                                                                  Var("s",
                                                                      PTy(F32,
                                                                          PTy(F1,
                                                                              qTy))))),
                                                          EX(Call
                                                               ("reg'PSR",
                                                                F32,
                                                                Dest
                                                                  ("PSR",
                                                                   CTy"PSR",
                                                                   Mop(Snd,
                                                                       Mop(Snd,
                                                                           Var("s",
                                                                               PTy(F32,
                                                                                   PTy(F1,
                                                                                       qTy))))))),
                                                             LN 8,LN 0,
                                                             FTy 9)],
                                                       Bop(Add,
                                                           Mop(Fst,
                                                               Var("s",
                                                                   PTy(F32,
                                                                       PTy(F1,
                                                                           qTy)))),
                                                           LW(28,32)),LN 4]),
                                                 Mop(Snd,
                                                     Mop(Snd,
                                                         Var("s",
                                                             PTy(F32,
                                                                 PTy(F1,
                                                                     qTy)))))),
                                              ITB([(EQ(Dest
                                                         ("CurrentMode",
                                                          CTy"Mode",
                                                          qVar"s2"),
                                                       LC("Mode_Handler",
                                                          CTy"Mode")),
                                                    Apply
                                                      (Call
                                                         ("write'LR",
                                                          ATy(qTy,qTy),
                                                          LW(4294967281,32)),
                                                       qVar"s2")),
                                                   (Mop(Not,
                                                        Dest
                                                          ("SPSEL",bTy,
                                                           Dest
                                                             ("CONTROL",
                                                              CTy"CONTROL",
                                                              qVar"s2"))),
                                                    Apply
                                                      (Call
                                                         ("write'LR",
                                                          ATy(qTy,qTy),
                                                          LW(4294967289,32)),
                                                       qVar"s2"))],
                                                  Apply
                                                    (Call
                                                       ("write'LR",
                                                        ATy(qTy,qTy),
                                                        LW(4294967293,32)),
                                                     qVar"s2"))))))))))))))
;
val ExceptionTaken_def = Def
  ("ExceptionTaken",Var("ExceptionNumber",FTy 6),
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          Apply
            (Call
               ("MemA",ATy(qTy,PTy(F32,qTy)),
                TP[Bop(Add,Dest("VTOR",F32,qVar"state"),
                       Bop(Mul,LW(4,32),
                           Mop(Cast F32,Var("ExceptionNumber",FTy 6)))),
                   LN 4]),
             Apply
               (Call("write'R",ATy(qTy,qTy),TP[LX F32,LW(12,4)]),
                Mop(Snd,
                    Apply
                      (For(TP[LN 0,LN 3,
                              Close
                                (nVar"i",
                                 Close
                                   (qVar"state",
                                    TP[LU,
                                       Apply
                                         (Call
                                            ("write'R",ATy(qTy,qTy),
                                             TP[LX F32,
                                                Mop(Cast F4,nVar"i")]),
                                          qVar"state")]))]),qVar"state")))),
          Let(qVar"s",
              Rupd
                ("CurrentMode",
                 TP[Rupd
                      ("PSR",
                       TP[Apply
                            (Call("write'PC",ATy(qTy,qTy),Var("v",F32)),
                             qVar"s"),LX(CTy"PSR")]),
                    LC("Mode_Handler",CTy"Mode")]),
              Let(qVar"s",
                  Rupd
                    ("PSR",
                     TP[qVar"s",
                        Rupd
                          ("ExceptionNumber",
                           TP[Dest("PSR",CTy"PSR",qVar"s"),
                              Var("ExceptionNumber",FTy 6)])]),
                  Let(qVar"s",
                      Rupd
                        ("CONTROL",
                         TP[qVar"s",
                            Rupd
                              ("SPSEL",
                               TP[Dest("CONTROL",CTy"CONTROL",qVar"s"),LF])]),
                      Rupd
                        ("ExceptionActive",
                         TP[qVar"s",
                            Fupd
                              (Dest
                                 ("ExceptionActive",ATy(FTy 6,bTy),qVar"s"),
                               Var("ExceptionNumber",FTy 6),LT)])))))))
;
val ExceptionEntry_def = Def
  ("ExceptionEntry",AVar uTy,
   Close
     (qVar"state",
      CS(Dest("pending",OTy(CTy"ARM_Exception"),qVar"state"),
         [(Mop(Some,Var("e",CTy"ARM_Exception")),
           Apply
             (Call
                ("ExceptionTaken",ATy(qTy,qTy),
                 Call("ExcNumber",FTy 6,Var("e",CTy"ARM_Exception"))),
              Apply(Call("PushStack",ATy(qTy,qTy),LU),qVar"state"))),
          (LO(CTy"ARM_Exception"),qVar"state")])))
;
val PopStack_def = Def
  ("PopStack",TP[Var("frameptr",F32),Var("EXC_RETURN",FTy 28)],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          Apply
            (Call
               ("MemA",ATy(qTy,PTy(F32,qTy)),TP[Var("frameptr",F32),LN 4]),
             qVar"state"),
          Let(TP[Var("v",F32),qVar"s"],
              Apply
                (Call
                   ("MemA",ATy(qTy,PTy(F32,qTy)),
                    TP[Bop(Add,Var("frameptr",F32),LW(4,32)),LN 4]),
                 Apply
                   (Call("write'R",ATy(qTy,qTy),TP[Var("v",F32),LW(0,4)]),
                    qVar"s")),
              Let(TP[Var("v",F32),qVar"s"],
                  Apply
                    (Call
                       ("MemA",ATy(qTy,PTy(F32,qTy)),
                        TP[Bop(Add,Var("frameptr",F32),LW(8,32)),LN 4]),
                     Apply
                       (Call
                          ("write'R",ATy(qTy,qTy),TP[Var("v",F32),LW(1,4)]),
                        qVar"s")),
                  Let(TP[Var("v",F32),qVar"s"],
                      Apply
                        (Call
                           ("MemA",ATy(qTy,PTy(F32,qTy)),
                            TP[Bop(Add,Var("frameptr",F32),LW(12,32)),LN 4]),
                         Apply
                           (Call
                              ("write'R",ATy(qTy,qTy),
                               TP[Var("v",F32),LW(2,4)]),qVar"s")),
                      Let(TP[Var("v",F32),qVar"s"],
                          Apply
                            (Call
                               ("MemA",ATy(qTy,PTy(F32,qTy)),
                                TP[Bop(Add,Var("frameptr",F32),LW(16,32)),
                                   LN 4]),
                             Apply
                               (Call
                                  ("write'R",ATy(qTy,qTy),
                                   TP[Var("v",F32),LW(3,4)]),qVar"s")),
                          Let(TP[Var("v",F32),qVar"s"],
                              Apply
                                (Call
                                   ("MemA",ATy(qTy,PTy(F32,qTy)),
                                    TP[Bop(Add,Var("frameptr",F32),
                                           LW(20,32)),LN 4]),
                                 Apply
                                   (Call
                                      ("write'R",ATy(qTy,qTy),
                                       TP[Var("v",F32),LW(12,4)]),qVar"s")),
                              Let(TP[Var("v",F32),qVar"s"],
                                  Apply
                                    (Call
                                       ("MemA",ATy(qTy,PTy(F32,qTy)),
                                        TP[Bop(Add,Var("frameptr",F32),
                                               LW(24,32)),LN 4]),
                                     Apply
                                       (Call
                                          ("write'LR",ATy(qTy,qTy),
                                           Var("v",F32)),qVar"s")),
                                  Let(TP[Var("v",F32),qVar"s"],
                                      Apply
                                        (Call
                                           ("MemA",ATy(qTy,PTy(F32,qTy)),
                                            TP[Bop(Add,
                                                   Var("frameptr",F32),
                                                   LW(28,32)),LN 4]),
                                         Apply
                                           (Call
                                              ("write'PC",ATy(qTy,qTy),
                                               Var("v",F32)),qVar"s")),
                                      Let(Var("spmask",F32),
                                          Mop(Cast F32,
                                              CC[EX(Var("v",F32),LN 9,
                                                    LN 9,F1),LW(0,2)]),
                                          Let(qVar"s",
                                              Let(TP[bVar"b'3",bVar"b'2",
                                                     bVar"b'1",bVar"b'0"],
                                                  BL(4,
                                                     EX(Var("EXC_RETURN",
                                                            FTy 28),LN 3,
                                                        LN 0,F4)),
                                                  ITE(Bop(And,
                                                          Mop(Not,
                                                              bVar"b'1"),
                                                          bVar"b'0"),
                                                      ITB([(Mop(Not,
                                                                bVar"b'2"),
                                                            Apply
                                                              (Call
                                                                 ("write'SP_main",
                                                                  ATy(qTy,
                                                                      qTy),
                                                                  Bop(BOr,
                                                                      Bop(Add,
                                                                          Apply
                                                                            (Const
                                                                               ("SP_main",
                                                                                ATy(qTy,
                                                                                    F32)),
                                                                             qVar"s"),
                                                                          LW(32,
                                                                             32)),
                                                                      Var("spmask",
                                                                          F32))),
                                                               qVar"s")),
                                                           (Bop(And,
                                                                bVar"b'3",
                                                                bVar"b'2"),
                                                            Apply
                                                              (Call
                                                                 ("write'SP_process",
                                                                  ATy(qTy,
                                                                      qTy),
                                                                  Bop(BOr,
                                                                      Bop(Add,
                                                                          Apply
                                                                            (Const
                                                                               ("SP_process",
                                                                                ATy(qTy,
                                                                                    F32)),
                                                                             qVar"s"),
                                                                          LW(32,
                                                                             32)),
                                                                      Var("spmask",
                                                                          F32))),
                                                               qVar"s"))],
                                                          qVar"s"),qVar"s")),
                                              Let(qVar"s",
                                                  Rupd
                                                    ("PSR",
                                                     TP[qVar"s",
                                                        Call
                                                          ("write'reg'PSR",
                                                           CTy"PSR",
                                                           TP[Dest
                                                                ("PSR",
                                                                 CTy"PSR",
                                                                 qVar"s"),
                                                              BFI(LN 31,
                                                                  LN 27,
                                                                  EX(Var("v",
                                                                         F32),
                                                                     LN 31,
                                                                     LN 27,
                                                                     FTy 5),
                                                                  Call
                                                                    ("reg'PSR",
                                                                     F32,
                                                                     Dest
                                                                       ("PSR",
                                                                        CTy"PSR",
                                                                        qVar"s")))])]),
                                                  Let(qVar"s",
                                                      Rupd
                                                        ("PSR",
                                                         TP[qVar"s",
                                                            Call
                                                              ("write'reg'PSR",
                                                               CTy"PSR",
                                                               TP[Dest
                                                                    ("PSR",
                                                                     CTy"PSR",
                                                                     qVar"s"),
                                                                  BFI(LN
                                                                       24,
                                                                      LN
                                                                       24,
                                                                      Mop(Cast
                                                                            F1,
                                                                          Bop(Bit,
                                                                              Var("v",
                                                                                  F32),
                                                                              LN
                                                                               24)),
                                                                      Call
                                                                        ("reg'PSR",
                                                                         F32,
                                                                         Dest
                                                                           ("PSR",
                                                                            CTy"PSR",
                                                                            qVar"s")))])]),
                                                      Rupd
                                                        ("PSR",
                                                         TP[qVar"s",
                                                            Call
                                                              ("write'reg'PSR",
                                                               CTy"PSR",
                                                               TP[Dest
                                                                    ("PSR",
                                                                     CTy"PSR",
                                                                     qVar"s"),
                                                                  BFI(LN 5,
                                                                      LN 0,
                                                                      EX(Var("v",
                                                                             F32),
                                                                         LN
                                                                          5,
                                                                         LN
                                                                          0,
                                                                         FTy 6),
                                                                      Call
                                                                        ("reg'PSR",
                                                                         F32,
                                                                         Dest
                                                                           ("PSR",
                                                                            CTy"PSR",
                                                                            qVar"s")))])])))))))))))))))
;
val DeActivate_def = Def
  ("DeActivate",Var("ReturningExceptionNumber",FTy 6),
   Close
     (qVar"state",
      Rupd
        ("ExceptionActive",
         TP[qVar"state",
            Fupd
              (Dest("ExceptionActive",ATy(FTy 6,bTy),qVar"state"),
               Var("ReturningExceptionNumber",FTy 6),LF)])))
;
val IsOnes_def = Def
  ("IsOnes",Var("w",BTy"N"),EQ(Var("w",BTy"N"),Mop(Neg,LY(1,"N"))))
;
val ExceptionActiveBitCount_def = Def
  ("ExceptionActiveBitCount",AVar uTy,
   Close
     (qVar"state",
      Let(TP[nVar"r",Var("s1",PTy(nTy,qTy))],
          Let(Var("s",PTy(nTy,qTy)),
              Mop(Snd,
                  Apply
                    (For(TP[LN 0,LN 63,
                            Close
                              (nVar"i",
                               Close
                                 (Var("state",PTy(nTy,qTy)),
                                  TP[LU,
                                     ITE(Apply
                                           (Dest
                                              ("ExceptionActive",
                                               ATy(FTy 6,bTy),
                                               Mop(Snd,
                                                   Var("state",
                                                       PTy(nTy,qTy)))),
                                            Mop(Cast(FTy 6),nVar"i")),
                                         TP[Bop(Add,
                                                Mop(Fst,
                                                    Var("state",
                                                        PTy(nTy,qTy))),
                                                LN 1),
                                            Mop(Snd,
                                                Var("state",PTy(nTy,qTy)))],
                                         Var("state",PTy(nTy,qTy)))]))]),
                     TP[LN 0,qVar"state"])),
              TP[Mop(Fst,Var("s",PTy(nTy,qTy))),Var("s",PTy(nTy,qTy))]),
          TP[nVar"r",Mop(Snd,Var("s1",PTy(nTy,qTy)))])))
;
val ExceptionReturn_def = Def
  ("ExceptionReturn",Var("EXC_RETURN",FTy 28),
   Close
     (qVar"state",
      Let(qVar"s",
          ITE(Mop(Not,
                  EQ(Dest("CurrentMode",CTy"Mode",qVar"state"),
                     LC("Mode_Handler",CTy"Mode"))),
              Mop(Snd,
                  Apply
                    (Call
                       ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                        Call
                          ("ASSERT",CTy"exception",
                           LS"CurrentMode == Mode_Handler")),qVar"state")),
              qVar"state"),
          Let(qVar"s",
              ITE(Mop(Not,
                      Call
                        ("IsOnes",bTy,
                         EX(Var("EXC_RETURN",FTy 28),LN 27,LN 4,FTy 24))),
                  Mop(Snd,
                      Apply
                        (Call
                           ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                            Call
                              ("UNPREDICTABLE",CTy"exception",
                               LS"ExceptionReturn")),qVar"s")),qVar"s"),
              Let(Var("v",FTy 6),
                  Dest
                    ("ExceptionNumber",FTy 6,Dest("PSR",CTy"PSR",qVar"s")),
                  Let(TP[nVar"v0",qVar"s"],
                      Apply
                        (Call
                           ("ExceptionActiveBitCount",
                            ATy(qTy,PTy(nTy,qTy)),LU),qVar"s"),
                      ITE(Mop(Not,
                              Apply
                                (Dest
                                   ("ExceptionActive",ATy(FTy 6,bTy),
                                    qVar"s"),Var("v",FTy 6))),
                          Mop(Snd,
                              Apply
                                (Call
                                   ("raise'exception",
                                    ATy(qTy,PTy(uTy,qTy)),
                                    Call
                                      ("UNPREDICTABLE",CTy"exception",
                                       LS"ExceptionReturn")),qVar"s")),
                          Let(Var("s",PTy(F32,qTy)),
                              CS(EX(Var("EXC_RETURN",FTy 28),LN 3,LN 0,F4),
                                 [(LW(1,4),
                                   ITE(EQ(nVar"v0",LN 1),
                                       TP[LX F32,
                                          Mop(Snd,
                                              Apply
                                                (Call
                                                   ("raise'exception",
                                                    ATy(qTy,PTy(uTy,qTy)),
                                                    Call
                                                      ("UNPREDICTABLE",
                                                       CTy"exception",
                                                       LS"ExceptionReturn")),
                                                 qVar"s"))],
                                       Let(qVar"s1",
                                           Rupd
                                             ("CurrentMode",
                                              TP[qVar"s",
                                                 LC("Mode_Handler",
                                                    CTy"Mode")]),
                                           TP[Apply
                                                (Const
                                                   ("SP_main",ATy(qTy,F32)),
                                                 qVar"s"),
                                              Rupd
                                                ("CONTROL",
                                                 TP[qVar"s1",
                                                    Rupd
                                                      ("SPSEL",
                                                       TP[Dest
                                                            ("CONTROL",
                                                             CTy"CONTROL",
                                                             qVar"s1"),LF])])]))),
                                  (LW(9,4),
                                   ITE(Mop(Not,EQ(nVar"v0",LN 1)),
                                       TP[LX F32,
                                          Mop(Snd,
                                              Apply
                                                (Call
                                                   ("raise'exception",
                                                    ATy(qTy,PTy(uTy,qTy)),
                                                    Call
                                                      ("UNPREDICTABLE",
                                                       CTy"exception",
                                                       LS"ExceptionReturn")),
                                                 qVar"s"))],
                                       Let(qVar"s1",
                                           Rupd
                                             ("CurrentMode",
                                              TP[qVar"s",
                                                 LC("Mode_Thread",
                                                    CTy"Mode")]),
                                           TP[Apply
                                                (Const
                                                   ("SP_main",ATy(qTy,F32)),
                                                 qVar"s"),
                                              Rupd
                                                ("CONTROL",
                                                 TP[qVar"s1",
                                                    Rupd
                                                      ("SPSEL",
                                                       TP[Dest
                                                            ("CONTROL",
                                                             CTy"CONTROL",
                                                             qVar"s1"),LF])])]))),
                                  (LW(13,4),
                                   ITE(Mop(Not,EQ(nVar"v0",LN 1)),
                                       TP[LX F32,
                                          Mop(Snd,
                                              Apply
                                                (Call
                                                   ("raise'exception",
                                                    ATy(qTy,PTy(uTy,qTy)),
                                                    Call
                                                      ("UNPREDICTABLE",
                                                       CTy"exception",
                                                       LS"ExceptionReturn")),
                                                 qVar"s"))],
                                       Let(qVar"s1",
                                           Rupd
                                             ("CurrentMode",
                                              TP[qVar"s",
                                                 LC("Mode_Thread",
                                                    CTy"Mode")]),
                                           TP[Apply
                                                (Const
                                                   ("SP_process",
                                                    ATy(qTy,F32)),qVar"s"),
                                              Rupd
                                                ("CONTROL",
                                                 TP[qVar"s1",
                                                    Rupd
                                                      ("SPSEL",
                                                       TP[Dest
                                                            ("CONTROL",
                                                             CTy"CONTROL",
                                                             qVar"s1"),LT])])]))),
                                  (AVar F4,
                                   TP[LX F32,
                                      Mop(Snd,
                                          Apply
                                            (Call
                                               ("raise'exception",
                                                ATy(qTy,PTy(uTy,qTy)),
                                                Call
                                                  ("UNPREDICTABLE",
                                                   CTy"exception",
                                                   LS"ExceptionReturn")),
                                             qVar"s"))])]),
                              Let(qVar"s1",
                                  Apply
                                    (Call
                                       ("PopStack",ATy(qTy,qTy),
                                        TP[Mop(Fst,Var("s",PTy(F32,qTy))),
                                           Var("EXC_RETURN",FTy 28)]),
                                     Apply
                                       (Call
                                          ("DeActivate",ATy(qTy,qTy),
                                           Var("v",FTy 6)),
                                        Mop(Snd,Var("s",PTy(F32,qTy))))),
                                  ITB([(EQ(Dest
                                             ("CurrentMode",CTy"Mode",
                                              qVar"s1"),
                                           LC("Mode_Handler",CTy"Mode")),
                                        ITE(EQ(Dest
                                                 ("ExceptionNumber",FTy 6,
                                                  Dest
                                                    ("PSR",CTy"PSR",
                                                     qVar"s1")),LW(0,6)),
                                            Mop(Snd,
                                                Apply
                                                  (Call
                                                     ("raise'exception",
                                                      ATy(qTy,PTy(uTy,qTy)),
                                                      Call
                                                        ("UNPREDICTABLE",
                                                         CTy"exception",
                                                         LS
                                                          "ExceptionReturn")),
                                                   qVar"s1")),qVar"s1")),
                                       (Mop(Not,
                                            EQ(Dest
                                                 ("ExceptionNumber",FTy 6,
                                                  Dest
                                                    ("PSR",CTy"PSR",
                                                     qVar"s1")),LW(0,6))),
                                        Mop(Snd,
                                            Apply
                                              (Call
                                                 ("raise'exception",
                                                  ATy(qTy,PTy(uTy,qTy)),
                                                  Call
                                                    ("UNPREDICTABLE",
                                                     CTy"exception",
                                                     LS"ExceptionReturn")),
                                               qVar"s1")))],qVar"s1"))))))))))
;
val CallSupervisor_def = Def
  ("CallSupervisor",AVar uTy,
   Close
     (qVar"state",
      Apply
        (Call("Raise",ATy(qTy,qTy),Const("SVCall",CTy"ARM_Exception")),
         qVar"state")))
;
val BranchTo_def = Def
  ("BranchTo",Var("address",F32),
   Close
     (qVar"state",
      Apply(Call("write'PC",ATy(qTy,qTy),Var("address",F32)),qVar"state")))
;
val BranchWritePC_def = Def
  ("BranchWritePC",Var("address",F32),
   Close
     (qVar"state",
      Apply
        (Call
           ("BranchTo",ATy(qTy,qTy),
            CC[EX(Var("address",F32),LN 31,LN 1,FTy 31),LW(0,1)]),
         qVar"state")))
;
val BXWritePC_def = Def
  ("BXWritePC",Var("address",F32),
   Close
     (qVar"state",
      ITE(Bop(And,
              EQ(Dest("CurrentMode",CTy"Mode",qVar"state"),
                 LC("Mode_Handler",CTy"Mode")),
              EQ(EX(Var("address",F32),LN 31,LN 28,F4),LW(15,4))),
          Apply
            (Call
               ("ExceptionReturn",ATy(qTy,qTy),
                EX(Var("address",F32),LN 27,LN 0,FTy 28)),qVar"state"),
          Apply
            (Call
               ("BranchTo",ATy(qTy,qTy),
                CC[EX(Var("address",F32),LN 31,LN 1,FTy 31),LW(0,1)]),
             ITE(Mop(Not,Bop(Bit,Var("address",F32),LN 0)),
                 Apply
                   (Call
                      ("Raise",ATy(qTy,qTy),
                       Const("HardFault",CTy"ARM_Exception")),qVar"state"),
                 qVar"state")))))
;
val BLXWritePC_def = Def
  ("BLXWritePC",Var("address",F32),
   Close
     (qVar"state",
      Apply
        (Call
           ("BranchTo",ATy(qTy,qTy),
            CC[EX(Var("address",F32),LN 31,LN 1,FTy 31),LW(0,1)]),
         ITE(Mop(Not,Bop(Bit,Var("address",F32),LN 0)),
             Apply
               (Call
                  ("Raise",ATy(qTy,qTy),
                   Const("HardFault",CTy"ARM_Exception")),qVar"state"),
             qVar"state"))))
;
val LoadWritePC_def = Def
  ("LoadWritePC",Var("address",F32),
   Close
     (qVar"state",
      Apply(Call("BXWritePC",ATy(qTy,qTy),Var("address",F32)),qVar"state")))
;
val ALUWritePC_def = Def
  ("ALUWritePC",Var("address",F32),
   Close
     (qVar"state",
      Apply
        (Call("BranchWritePC",ATy(qTy,qTy),Var("address",F32)),qVar"state")))
;
val IncPC_def = Def
  ("IncPC",AVar uTy,
   Close
     (qVar"state",
      Apply
        (Call
           ("BranchTo",ATy(qTy,qTy),
            Bop(Add,
                Apply
                  (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
                   LC("RName_PC",CTy"RName")),
                Dest("pcinc",F32,qVar"state"))),qVar"state")))
;
val HighestSetBit_def = Def
  ("HighestSetBit",Var("w",BTy"N"),
   ITE(EQ(Var("w",BTy"N"),LY(0,"N")),Mop(Neg,LI 1),
       Mop(Cast iTy,Mop(Log,Var("w",BTy"N")))))
;
val CountLeadingZeroBits_def = Def
  ("CountLeadingZeroBits",Var("w",BTy"N"),
   Mop(Cast nTy,
       Bop(Sub,Bop(Sub,Mop(Cast iTy,Mop(Size,LY(0,"N"))),LI 1),
           Call("HighestSetBit",iTy,Var("w",BTy"N")))))
;
val LowestSetBit_def = Def
  ("LowestSetBit",Var("w",BTy"N"),
   Call("CountLeadingZeroBits",nTy,Mop(Rev,Var("w",BTy"N"))))
;
val BitCount_def = Def
  ("BitCount",Var("w",BTy"N"),
   Mop(Fst,
       Mop(Snd,
           Apply
             (For(TP[LN 0,Bop(Sub,Mop(Size,LY(0,"N")),LN 1),
                     Close
                       (nVar"i",
                        Close
                          (Var("state",PTy(nTy,uTy)),
                           TP[LU,
                              ITE(Bop(Bit,Var("w",BTy"N"),nVar"i"),
                                  TP[Bop(Add,
                                         Mop(Fst,Var("state",PTy(nTy,uTy))),
                                         LN 1),LU],
                                  Var("state",PTy(nTy,uTy)))]))]),
              TP[LN 0,LU]))))
;
val SignExtendFrom_def = Def
  ("SignExtendFrom",TP[Var("w",BTy"N"),nVar"p"],
   Let(nVar"s",Bop(Sub,Mop(Size,LY(0,"N")),nVar"p"),
       Bop(Asr,Bop(Lsl,Var("w",BTy"N"),nVar"s"),nVar"s")))
;
val Extend_def = Def
  ("Extend",TP[bVar"unsigned",Var("w",BTy"M")],
   ITE(bVar"unsigned",Mop(Cast(BTy"N"),Var("w",BTy"M")),
       Mop(SE(BTy"N"),Var("w",BTy"M"))))
;
val UInt_def = Def
  ("UInt",Var("w",BTy"N"),Mop(Cast iTy,Mop(Cast nTy,Var("w",BTy"N"))))
;
val LSL_C_def = Def
  ("LSL_C",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      TP[TP[Bop(Lsl,Var("x",BTy"N"),nVar"shift"),
            Bop(Bit,
                CC[Mop(Cast vTy,Var("x",BTy"N")),
                   Bop(Rep,LV"0",nVar"shift")],Mop(Size,LY(0,"N")))],
         ITE(EQ(nVar"shift",LN 0),
             Mop(Snd,
                 Apply
                   (Call
                      ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                       Call("ASSERT",CTy"exception",LS"LSL_C")),
                    qVar"state")),qVar"state")]))
;
val LSL_def = Def
  ("LSL",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      ITE(EQ(nVar"shift",LN 0),TP[Var("x",BTy"N"),qVar"state"],
          Let(TP[Var("v",PTy(BTy"N",bTy)),qVar"s"],
              Apply
                (Call
                   ("LSL_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                    TP[Var("x",BTy"N"),nVar"shift"]),qVar"state"),
              TP[Mop(Fst,Var("v",PTy(BTy"N",bTy))),qVar"s"]))))
;
val LSR_C_def = Def
  ("LSR_C",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      TP[TP[Bop(Lsr,Var("x",BTy"N"),nVar"shift"),
            Bop(And,Bop(Le,nVar"shift",Mop(Size,LY(0,"N"))),
                Bop(Bit,Var("x",BTy"N"),Bop(Sub,nVar"shift",LN 1)))],
         ITE(EQ(nVar"shift",LN 0),
             Mop(Snd,
                 Apply
                   (Call
                      ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                       Call("ASSERT",CTy"exception",LS"LSR_C")),
                    qVar"state")),qVar"state")]))
;
val LSR_def = Def
  ("LSR",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      ITE(EQ(nVar"shift",LN 0),TP[Var("x",BTy"N"),qVar"state"],
          Let(TP[Var("v",PTy(BTy"N",bTy)),qVar"s"],
              Apply
                (Call
                   ("LSR_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                    TP[Var("x",BTy"N"),nVar"shift"]),qVar"state"),
              TP[Mop(Fst,Var("v",PTy(BTy"N",bTy))),qVar"s"]))))
;
val ASR_C_def = Def
  ("ASR_C",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      TP[TP[Bop(Asr,Var("x",BTy"N"),nVar"shift"),
            Bop(Bit,Var("x",BTy"N"),
                Bop(Sub,Mop(Min,TP[Mop(Size,LY(0,"N")),nVar"shift"]),LN 1))],
         ITE(EQ(nVar"shift",LN 0),
             Mop(Snd,
                 Apply
                   (Call
                      ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                       Call("ASSERT",CTy"exception",LS"ASR_C")),
                    qVar"state")),qVar"state")]))
;
val ASR_def = Def
  ("ASR",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      ITE(EQ(nVar"shift",LN 0),TP[Var("x",BTy"N"),qVar"state"],
          Let(TP[Var("v",PTy(BTy"N",bTy)),qVar"s"],
              Apply
                (Call
                   ("ASR_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                    TP[Var("x",BTy"N"),nVar"shift"]),qVar"state"),
              TP[Mop(Fst,Var("v",PTy(BTy"N",bTy))),qVar"s"]))))
;
val ROR_C_def = Def
  ("ROR_C",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      TP[Let(Var("result",BTy"N"),Bop(Ror,Var("x",BTy"N"),nVar"shift"),
             TP[Var("result",BTy"N"),Mop(Msb,Var("result",BTy"N"))]),
         ITE(EQ(nVar"shift",LN 0),
             Mop(Snd,
                 Apply
                   (Call
                      ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                       Call("ASSERT",CTy"exception",LS"ROR_C")),
                    qVar"state")),qVar"state")]))
;
val ROR_def = Def
  ("ROR",TP[Var("x",BTy"N"),nVar"shift"],
   Close
     (qVar"state",
      ITE(EQ(nVar"shift",LN 0),TP[Var("x",BTy"N"),qVar"state"],
          Let(TP[Var("v",PTy(BTy"N",bTy)),qVar"s"],
              Apply
                (Call
                   ("ROR_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                    TP[Var("x",BTy"N"),nVar"shift"]),qVar"state"),
              TP[Mop(Fst,Var("v",PTy(BTy"N",bTy))),qVar"s"]))))
;
val RRX_C_def = Def
  ("RRX_C",TP[Var("x",BTy"N"),bVar"carry_in"],
   TP[Mop(Cast(BTy"N"),
          CC[Mop(Cast vTy,bVar"carry_in"),
             EX(Mop(Cast vTy,Var("x",BTy"N")),
                Bop(Sub,Mop(Size,LY(0,"N")),LN 1),LN 1,vTy)]),
      Bop(Bit,Var("x",BTy"N"),LN 0)])
;
val RRX_def = Def
  ("RRX",TP[Var("x",BTy"N"),bVar"carry_in"],
   Mop(Fst,
       Call("RRX_C",PTy(BTy"N",bTy),TP[Var("x",BTy"N"),bVar"carry_in"])))
;
val DecodeImmShift_def = Def
  ("DecodeImmShift",TP[Var("typ",FTy 2),Var("imm5",FTy 5)],
   CS(Var("typ",FTy 2),
      [(LW(0,2),
        TP[LC("SRType_LSL",CTy"SRType"),Mop(Cast nTy,Var("imm5",FTy 5))]),
       (LW(1,2),
        TP[LC("SRType_LSR",CTy"SRType"),
           ITE(EQ(Var("imm5",FTy 5),LW(0,5)),LN 32,
               Mop(Cast nTy,Var("imm5",FTy 5)))]),
       (LW(2,2),
        TP[LC("SRType_ASR",CTy"SRType"),
           ITE(EQ(Var("imm5",FTy 5),LW(0,5)),LN 32,
               Mop(Cast nTy,Var("imm5",FTy 5)))]),
       (LW(3,2),
        ITE(EQ(Var("imm5",FTy 5),LW(0,5)),
            TP[LC("SRType_RRX",CTy"SRType"),LN 1],
            TP[LC("SRType_ROR",CTy"SRType"),
               Mop(Cast nTy,Var("imm5",FTy 5))]))]))
;
val DecodeRegShift_def = Def
  ("DecodeRegShift",Var("typ",FTy 2),
   CS(Var("typ",FTy 2),
      [(LW(0,2),LC("SRType_LSL",CTy"SRType")),
       (LW(1,2),LC("SRType_LSR",CTy"SRType")),
       (LW(2,2),LC("SRType_ASR",CTy"SRType")),
       (LW(3,2),LC("SRType_ROR",CTy"SRType"))]))
;
val Shift_C_def = Def
  ("Shift_C",
   TP[Var("value",BTy"N"),Var("typ",CTy"SRType"),nVar"amount",
      bVar"carry_in"],
   Close
     (qVar"state",
      ITE(EQ(nVar"amount",LN 0),
          TP[TP[Var("value",BTy"N"),bVar"carry_in"],qVar"state"],
          CS(Var("typ",CTy"SRType"),
             [(LC("SRType_LSL",CTy"SRType"),
               Apply
                 (Call
                    ("LSL_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                     TP[Var("value",BTy"N"),nVar"amount"]),qVar"state")),
              (LC("SRType_LSR",CTy"SRType"),
               Apply
                 (Call
                    ("LSR_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                     TP[Var("value",BTy"N"),nVar"amount"]),qVar"state")),
              (LC("SRType_ASR",CTy"SRType"),
               Apply
                 (Call
                    ("ASR_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                     TP[Var("value",BTy"N"),nVar"amount"]),qVar"state")),
              (LC("SRType_ROR",CTy"SRType"),
               Apply
                 (Call
                    ("ROR_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                     TP[Var("value",BTy"N"),nVar"amount"]),qVar"state")),
              (LC("SRType_RRX",CTy"SRType"),
               TP[Call
                    ("RRX_C",PTy(BTy"N",bTy),
                     TP[Var("value",BTy"N"),bVar"carry_in"]),qVar"state"])]))))
;
val Shift_def = Def
  ("Shift",
   TP[Var("value",BTy"N"),Var("typ",CTy"SRType"),nVar"amount",
      bVar"carry_in"],
   Close
     (qVar"state",
      Let(TP[Var("v",PTy(BTy"N",bTy)),qVar"s"],
          Apply
            (Call
               ("Shift_C",ATy(qTy,PTy(PTy(BTy"N",bTy),qTy)),
                TP[Var("value",BTy"N"),Var("typ",CTy"SRType"),
                   nVar"amount",bVar"carry_in"]),qVar"state"),
          TP[Mop(Fst,Var("v",PTy(BTy"N",bTy))),qVar"s"])))
;
val AddWithCarry_def = Def
  ("AddWithCarry",TP[Var("x",BTy"N"),Var("y",BTy"N"),bVar"carry_in"],
   Let(nVar"unsigned_sum",
       Bop(Add,
           Bop(Add,Mop(Cast nTy,Var("x",BTy"N")),
               Mop(Cast nTy,Var("y",BTy"N"))),Mop(Cast nTy,bVar"carry_in")),
       Let(Var("result",BTy"N"),Mop(Cast(BTy"N"),nVar"unsigned_sum"),
           TP[Var("result",BTy"N"),
              Mop(Not,
                  EQ(Mop(Cast nTy,Var("result",BTy"N")),nVar"unsigned_sum")),
              Mop(Not,
                  EQ(Mop(Cast iTy,Var("result",BTy"N")),
                     Bop(Add,
                         Bop(Add,Mop(Cast iTy,Var("x",BTy"N")),
                             Mop(Cast iTy,Var("y",BTy"N"))),
                         Mop(Cast iTy,bVar"carry_in"))))])))
;
val DataProcessingALU_def = Def
  ("DataProcessingALU",
   TP[Var("opc",F4),Var("a",F32),Var("b",F32),bVar"c"],
   CS(Var("opc",F4),
      [(LW(0,4),TP[Bop(BAnd,Var("a",F32),Var("b",F32)),bVar"c",LX bTy]),
       (LW(8,4),TP[Bop(BAnd,Var("a",F32),Var("b",F32)),bVar"c",LX bTy]),
       (LW(1,4),TP[Bop(BXor,Var("a",F32),Var("b",F32)),bVar"c",LX bTy]),
       (LW(9,4),TP[Bop(BXor,Var("a",F32),Var("b",F32)),bVar"c",LX bTy]),
       (LW(2,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Var("a",F32),Mop(BNot,Var("b",F32)),LT])),
       (LW(10,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Var("a",F32),Mop(BNot,Var("b",F32)),LT])),
       (LW(3,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Mop(BNot,Var("a",F32)),Var("b",F32),LT])),
       (LW(4,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Var("a",F32),Var("b",F32),LF])),
       (LW(11,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Var("a",F32),Var("b",F32),LF])),
       (LW(5,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Var("a",F32),Var("b",F32),bVar"c"])),
       (LW(6,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Var("a",F32),Mop(BNot,Var("b",F32)),bVar"c"])),
       (LW(7,4),
        Call
          ("AddWithCarry",PTy(F32,PTy(bTy,bTy)),
           TP[Mop(BNot,Var("a",F32)),Var("b",F32),bVar"c"])),
       (LW(12,4),TP[Bop(BOr,Var("a",F32),Var("b",F32)),bVar"c",LX bTy]),
       (LW(13,4),TP[Var("b",F32),bVar"c",LX bTy]),
       (LW(14,4),
        TP[Bop(BAnd,Var("a",F32),Mop(BNot,Var("b",F32))),bVar"c",LX bTy]),
       (LW(15,4),TP[Mop(BNot,Var("b",F32)),bVar"c",LX bTy])]))
;
val ArithmeticOpcode_def = Def
  ("ArithmeticOpcode",Var("opc",F4),
   Bop(And,
       Bop(Or,Bop(Bit,Var("opc",F4),LN 2),Bop(Bit,Var("opc",F4),LN 1)),
       Mop(Not,
           Bop(And,Bop(Bit,Var("opc",F4),LN 3),Bop(Bit,Var("opc",F4),LN 2)))))
;
val dfn'BranchTarget_def = Def
  ("dfn'BranchTarget",Var("imm32",F32),
   Close
     (qVar"state",
      Let(qVar"s",
          Apply
            (Call
               ("BranchWritePC",ATy(qTy,qTy),
                Bop(Add,Apply(Const("PC",ATy(qTy,F32)),qVar"state"),
                    Var("imm32",F32))),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 3)]))))
;
val dfn'BranchExchange_def = Def
  ("dfn'BranchExchange",Var("m",F4),
   Close
     (qVar"state",
      Let(qVar"s",
          Apply
            (Call
               ("BXWritePC",ATy(qTy,qTy),
                Apply(Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state")),
             qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 3)]))))
;
val dfn'BranchLinkImmediate_def = Def
  ("dfn'BranchLinkImmediate",Var("imm32",F32),
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          Let(qVar"s0",
              Apply
                (Call
                   ("write'LR",ATy(qTy,qTy),
                    CC[EX(Apply(Const("PC",ATy(qTy,F32)),qVar"state"),
                          LN 31,LN 1,FTy 31),LW(1,1)]),qVar"state"),
              TP[Apply(Const("PC",ATy(qTy,F32)),qVar"s0"),qVar"s0"]),
          Let(qVar"s",
              Apply
                (Call
                   ("BranchWritePC",ATy(qTy,qTy),
                    Bop(Add,Var("v",F32),Var("imm32",F32))),qVar"s"),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 4)])))))
;
val dfn'BranchLinkExchangeRegister_def = Def
  ("dfn'BranchLinkExchangeRegister",Var("m",F4),
   Close
     (qVar"state",
      Let(qVar"s",
          Apply
            (Call
               ("BLXWritePC",ATy(qTy,qTy),
                Apply(Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state")),
             Apply
               (Call
                  ("write'LR",ATy(qTy,qTy),
                   CC[EX(Bop(Sub,
                             Apply(Const("PC",ATy(qTy,F32)),qVar"state"),
                             LW(2,32)),LN 31,LN 1,FTy 31),LW(1,1)]),
                qVar"state")),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 3)]))))
;
val DataProcessing_def = Def
  ("DataProcessing",
   TP[Var("opc",F4),bVar"setflags",Var("d",F4),Var("n",F4),
      Var("imm32",F32),bVar"C"],
   Close
     (qVar"state",
      Let(TP[Var("result",F32),bVar"carry",bVar"overflow"],
          Call
            ("DataProcessingALU",PTy(F32,PTy(bTy,bTy)),
             TP[Var("opc",F4),
                ITB([(Bop(Or,EQ(Var("opc",F4),LW(13,4)),
                          EQ(Var("opc",F4),LW(15,4))),LW(0,32)),
                     (Bop(And,Bop(In,Var("opc",F4),SL[LW(4,4),LW(2,4)]),
                          Bop(And,EQ(Var("n",F4),LW(15,4)),
                              Mop(Not,bVar"setflags"))),
                      Call
                        ("Align",F32,
                         TP[Apply(Const("PC",ATy(qTy,F32)),qVar"state"),
                            LN 4]))],
                    Apply(Call("R",ATy(qTy,F32),Var("n",F4)),qVar"state")),
                Var("imm32",F32),bVar"C"]),
          Let(qVar"s",
              ITE(Mop(Not,EQ(EX(Var("opc",F4),LN 3,LN 2,FTy 2),LW(2,2))),
                  Apply
                    (Call
                       ("write'R",ATy(qTy,qTy),
                        TP[Var("result",F32),Var("d",F4)]),qVar"state"),
                  qVar"state"),
              Let(qVar"s",
                  Apply
                    (Call("IncPC",ATy(qTy,qTy),LU),
                     ITE(bVar"setflags",
                         Let(qVar"s",
                             Rupd
                               ("PSR",
                                TP[qVar"s",
                                   Rupd
                                     ("N",
                                      TP[Dest("PSR",CTy"PSR",qVar"s"),
                                         Bop(Bit,Var("result",F32),LN 31)])]),
                             Let(qVar"s",
                                 Rupd
                                   ("PSR",
                                    TP[qVar"s",
                                       Rupd
                                         ("Z",
                                          TP[Dest("PSR",CTy"PSR",qVar"s"),
                                             EQ(Var("result",F32),LW(0,32))])]),
                                 Let(qVar"s",
                                     Rupd
                                       ("PSR",
                                        TP[qVar"s",
                                           Rupd
                                             ("C",
                                              TP[Dest
                                                   ("PSR",CTy"PSR",qVar"s"),
                                                 bVar"carry"])]),
                                     ITE(Call
                                           ("ArithmeticOpcode",bTy,
                                            Var("opc",F4)),
                                         Rupd
                                           ("PSR",
                                            TP[qVar"s",
                                               Rupd
                                                 ("V",
                                                  TP[Dest
                                                       ("PSR",CTy"PSR",
                                                        qVar"s"),
                                                     bVar"overflow"])]),
                                         qVar"s")))),qVar"s")),
                  Rupd
                    ("count",
                     TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)]))))))
;
val DataProcessingPC_def = Def
  ("DataProcessingPC",
   TP[Var("opc",F4),Var("n",F4),Var("imm32",F32),bVar"C"],
   Close
     (qVar"state",
      Let(TP[Var("result",F32),AVar(PTy(bTy,bTy))],
          Call
            ("DataProcessingALU",PTy(F32,PTy(bTy,bTy)),
             TP[Var("opc",F4),
                ITB([(EQ(Var("opc",F4),LW(13,4)),LW(0,32)),
                     (EQ(Var("n",F4),LW(15,4)),
                      Apply(Const("PC",ATy(qTy,F32)),qVar"state"))],
                    Apply(Call("R",ATy(qTy,F32),Var("n",F4)),qVar"state")),
                Var("imm32",F32),bVar"C"]),
          Let(qVar"s",
              Apply
                (Call("ALUWritePC",ATy(qTy,qTy),Var("result",F32)),
                 qVar"state"),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 3)])))))
;
val dfn'Move_def = Def
  ("dfn'Move",TP[Var("d",F4),Var("imm32",F32)],
   Close
     (qVar"state",
      Apply
        (Call
           ("DataProcessing",ATy(qTy,qTy),
            TP[LW(13,4),LT,Var("d",F4),LW(15,4),Var("imm32",F32),
               Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
         qVar"state")))
;
val dfn'CompareImmediate_def = Def
  ("dfn'CompareImmediate",TP[Var("n",F4),Var("imm32",F32)],
   Close
     (qVar"state",
      Apply
        (Call
           ("DataProcessing",ATy(qTy,qTy),
            TP[LW(10,4),LT,LX F4,Var("n",F4),Var("imm32",F32),
               Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
         qVar"state")))
;
val dfn'ArithLogicImmediate_def = Def
  ("dfn'ArithLogicImmediate",
   TP[Var("opc",F4),bVar"setflags",Var("d",F4),Var("n",F4),
      Var("imm32",F32)],
   Close
     (qVar"state",
      Apply
        (Call
           ("DataProcessing",ATy(qTy,qTy),
            TP[Var("opc",F4),bVar"setflags",Var("d",F4),Var("n",F4),
               Var("imm32",F32),
               Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
         qVar"state")))
;
val doRegister_def = Def
  ("doRegister",
   TP[Var("opc",F4),bVar"setflags",Var("d",F4),Var("n",F4),Var("m",F4),
      Var("shift_t",CTy"SRType"),nVar"shift_n"],
   Close
     (qVar"state",
      Let(TP[Var("v",PTy(F32,bTy)),qVar"s"],
          Apply
            (Call
               ("Shift_C",ATy(qTy,PTy(PTy(F32,bTy),qTy)),
                TP[Apply(Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
                   Var("shift_t",CTy"SRType"),nVar"shift_n",
                   Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
             qVar"state"),
          Let(TP[Var("shifted",F32),bVar"carry"],Var("v",PTy(F32,bTy)),
              Let(bVar"v",
                  ITE(Call("ArithmeticOpcode",bTy,Var("opc",F4)),
                      Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"s")),
                      bVar"carry"),
                  ITE(EQ(Var("d",F4),LW(15,4)),
                      Apply
                        (Call
                           ("DataProcessingPC",ATy(qTy,qTy),
                            TP[Var("opc",F4),Var("n",F4),
                               Var("shifted",F32),bVar"v"]),qVar"s"),
                      Apply
                        (Call
                           ("DataProcessing",ATy(qTy,qTy),
                            TP[Var("opc",F4),bVar"setflags",Var("d",F4),
                               Var("n",F4),Var("shifted",F32),bVar"v"]),
                         qVar"s")))))))
;
val dfn'Register_def = Def
  ("dfn'Register",
   TP[Var("opc",F4),bVar"setflags",Var("d",F4),Var("n",F4),Var("m",F4)],
   Close
     (qVar"state",
      Apply
        (Call
           ("doRegister",ATy(qTy,qTy),
            TP[Var("opc",F4),bVar"setflags",Var("d",F4),Var("n",F4),
               Var("m",F4),LC("SRType_LSL",CTy"SRType"),LN 0]),qVar"state")))
;
val dfn'TestCompareRegister_def = Def
  ("dfn'TestCompareRegister",TP[Var("opc",FTy 2),Var("n",F4),Var("m",F4)],
   Close
     (qVar"state",
      Apply
        (Call
           ("doRegister",ATy(qTy,qTy),
            TP[CC[LW(2,2),Var("opc",FTy 2)],LT,LW(0,4),Var("n",F4),
               Var("m",F4),LC("SRType_LSL",CTy"SRType"),LN 0]),qVar"state")))
;
val dfn'ShiftImmediate_def = Def
  ("dfn'ShiftImmediate",
   TP[bVar"negate",bVar"setflags",Var("d",F4),Var("m",F4),
      Var("shift_t",CTy"SRType"),nVar"shift_n"],
   Close
     (qVar"state",
      ITE(bVar"negate",
          Apply
            (Call
               ("doRegister",ATy(qTy,qTy),
                TP[LW(15,4),bVar"setflags",Var("d",F4),LW(15,4),
                   Var("m",F4),Var("shift_t",CTy"SRType"),nVar"shift_n"]),
             qVar"state"),
          Apply
            (Call
               ("doRegister",ATy(qTy,qTy),
                TP[LW(13,4),bVar"setflags",Var("d",F4),LX F4,Var("m",F4),
                   Var("shift_t",CTy"SRType"),nVar"shift_n"]),qVar"state"))))
;
val dfn'ShiftRegister_def = Def
  ("dfn'ShiftRegister",
   TP[Var("d",F4),Var("n",F4),Var("shift_t",CTy"SRType"),Var("m",F4)],
   Close
     (qVar"state",
      Let(TP[Var("v",PTy(F32,bTy)),qVar"s"],
          Apply
            (Call
               ("Shift_C",ATy(qTy,PTy(PTy(F32,bTy),qTy)),
                TP[Apply(Call("R",ATy(qTy,F32),Var("n",F4)),qVar"state"),
                   Var("shift_t",CTy"SRType"),
                   Mop(Cast nTy,
                       EX(Apply
                            (Call("R",ATy(qTy,F32),Var("m",F4)),
                             qVar"state"),LN 7,LN 0,F8)),
                   Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
             qVar"state"),
          Let(TP[Var("shifted",F32),bVar"carry"],Var("v",PTy(F32,bTy)),
              Apply
                (Call
                   ("DataProcessing",ATy(qTy,qTy),
                    TP[LW(13,4),LT,Var("d",F4),LX F4,Var("shifted",F32),
                       bVar"carry"]),qVar"s")))))
;
val dfn'Multiply32_def = Def
  ("dfn'Multiply32",TP[Var("d",F4),Var("n",F4),Var("m",F4)],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Bop(Mul,Apply(Call("R",ATy(qTy,F32),Var("n",F4)),qVar"state"),
              Apply(Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state")),
          Let(qVar"s",
              Apply
                (Call("write'R",ATy(qTy,qTy),TP[Var("v",F32),Var("d",F4)]),
                 qVar"state"),
              Let(qVar"s",
                  Rupd
                    ("PSR",
                     TP[qVar"s",
                        Rupd
                          ("N",
                           TP[Dest("PSR",CTy"PSR",qVar"s"),
                              Bop(Bit,Var("v",F32),LN 31)])]),
                  Let(qVar"s",
                      Apply
                        (Call("IncPC",ATy(qTy,qTy),LU),
                         Rupd
                           ("PSR",
                            TP[qVar"s",
                               Rupd
                                 ("Z",
                                  TP[Dest("PSR",CTy"PSR",qVar"s"),
                                     EQ(Var("v",F32),LW(0,32))])])),
                      Rupd
                        ("count",
                         TP[qVar"s",
                            Bop(Add,Dest("count",nTy,qVar"s"),LN 1)])))))))
;
val dfn'ExtendByte_def = Def
  ("dfn'ExtendByte",TP[bVar"unsigned",Var("d",F4),Var("m",F4)],
   Close
     (qVar"state",
      Let(qVar"s",
          Apply
            (Call("IncPC",ATy(qTy,qTy),LU),
             Apply
               (Call
                  ("write'R",ATy(qTy,qTy),
                   TP[Call
                        ("Extend",F32,
                         TP[bVar"unsigned",
                            EX(Apply
                                 (Call("R",ATy(qTy,F32),Var("m",F4)),
                                  qVar"state"),LN 7,LN 0,F8)]),Var("d",F4)]),
                qVar"state")),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)]))))
;
val dfn'ExtendHalfword_def = Def
  ("dfn'ExtendHalfword",TP[bVar"unsigned",Var("d",F4),Var("m",F4)],
   Close
     (qVar"state",
      Let(qVar"s",
          Apply
            (Call("IncPC",ATy(qTy,qTy),LU),
             Apply
               (Call
                  ("write'R",ATy(qTy,qTy),
                   TP[Call
                        ("Extend",F32,
                         TP[bVar"unsigned",
                            EX(Apply
                                 (Call("R",ATy(qTy,F32),Var("m",F4)),
                                  qVar"state"),LN 15,LN 0,F16)]),
                      Var("d",F4)]),qVar"state")),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)]))))
;
val dfn'ByteReverse_def = Def
  ("dfn'ByteReverse",TP[Var("d",F4),Var("m",F4)],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Apply(Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 Apply
                   (Call
                      ("write'R",ATy(qTy,qTy),
                       TP[CC[EX(Var("v",F32),LN 7,LN 0,F8),
                             EX(Var("v",F32),LN 15,LN 8,F8),
                             EX(Var("v",F32),LN 23,LN 16,F8),
                             EX(Var("v",F32),LN 31,LN 24,F8)],Var("d",F4)]),
                    qVar"state")),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)])))))
;
val dfn'ByteReversePackedHalfword_def = Def
  ("dfn'ByteReversePackedHalfword",TP[Var("d",F4),Var("m",F4)],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Apply(Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 Apply
                   (Call
                      ("write'R",ATy(qTy,qTy),
                       TP[CC[EX(Var("v",F32),LN 23,LN 16,F8),
                             EX(Var("v",F32),LN 31,LN 24,F8),
                             EX(Var("v",F32),LN 7,LN 0,F8),
                             EX(Var("v",F32),LN 15,LN 8,F8)],Var("d",F4)]),
                    qVar"state")),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)])))))
;
val dfn'ByteReverseSignedHalfword_def = Def
  ("dfn'ByteReverseSignedHalfword",TP[Var("d",F4),Var("m",F4)],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Apply(Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 Apply
                   (Call
                      ("write'R",ATy(qTy,qTy),
                       TP[CC[Mop(SE(FTy 24),EX(Var("v",F32),LN 7,LN 0,F8)),
                             EX(Var("v",F32),LN 15,LN 8,F8)],Var("d",F4)]),
                    qVar"state")),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)])))))
;
val dfn'LoadWord_def = Def
  ("dfn'LoadWord",TP[Var("t",F4),Var("n",F4),Var("m",CTy"offset")],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          CS(Var("m",CTy"offset"),
             [(Call("register_form",CTy"offset",Var("m",F4)),
               Apply
                 (Call
                    ("Shift",ATy(qTy,PTy(F32,qTy)),
                     TP[Apply
                          (Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
                        LC("SRType_LSL",CTy"SRType"),LN 0,
                        Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
                  qVar"state")),
              (Call("immediate_form",CTy"offset",Var("imm32",F32)),
               TP[Var("imm32",F32),qVar"state"])]),
          Let(TP[Var("v",F32),qVar"s"],
              Apply
                (Call
                   ("MemU",ATy(qTy,PTy(F32,qTy)),
                    TP[Bop(Add,
                           Apply
                             (Call("R",ATy(qTy,F32),Var("n",F4)),qVar"s"),
                           Var("v",F32)),LN 4]),qVar"s"),
              Let(qVar"s",
                  Apply
                    (Call("IncPC",ATy(qTy,qTy),LU),
                     Apply
                       (Call
                          ("write'R",ATy(qTy,qTy),
                           TP[Var("v",F32),Var("t",F4)]),qVar"s")),
                  Rupd
                    ("count",
                     TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)]))))))
;
val dfn'LoadLiteral_def = Def
  ("dfn'LoadLiteral",TP[Var("t",F4),Var("imm32",F32)],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          Apply
            (Call
               ("MemU",ATy(qTy,PTy(F32,qTy)),
                TP[Bop(Add,
                       Call
                         ("Align",F32,
                          TP[Apply(Const("PC",ATy(qTy,F32)),qVar"state"),
                             LN 4]),Var("imm32",F32)),LN 4]),qVar"state"),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 Apply
                   (Call
                      ("write'R",ATy(qTy,qTy),TP[Var("v",F32),Var("t",F4)]),
                    qVar"s")),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)])))))
;
val dfn'LoadByte_def = Def
  ("dfn'LoadByte",
   TP[bVar"unsigned",Var("t",F4),Var("n",F4),Var("m",CTy"offset")],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          CS(Var("m",CTy"offset"),
             [(Call("register_form",CTy"offset",Var("m",F4)),
               Apply
                 (Call
                    ("Shift",ATy(qTy,PTy(F32,qTy)),
                     TP[Apply
                          (Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
                        LC("SRType_LSL",CTy"SRType"),LN 0,
                        Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
                  qVar"state")),
              (Call("immediate_form",CTy"offset",Var("imm32",F32)),
               TP[Var("imm32",F32),qVar"state"])]),
          Let(TP[Var("v",F8),qVar"s"],
              Apply
                (Call
                   ("MemU",ATy(qTy,PTy(F8,qTy)),
                    TP[Bop(Add,
                           Apply
                             (Call("R",ATy(qTy,F32),Var("n",F4)),qVar"s"),
                           Var("v",F32)),LN 1]),qVar"s"),
              Let(qVar"s",
                  Apply
                    (Call("IncPC",ATy(qTy,qTy),LU),
                     Apply
                       (Call
                          ("write'R",ATy(qTy,qTy),
                           TP[Call
                                ("Extend",F32,
                                 TP[bVar"unsigned",Var("v",F8)]),
                              Var("t",F4)]),qVar"s")),
                  Rupd
                    ("count",
                     TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)]))))))
;
val dfn'LoadHalf_def = Def
  ("dfn'LoadHalf",
   TP[bVar"unsigned",Var("t",F4),Var("n",F4),Var("m",CTy"offset")],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          CS(Var("m",CTy"offset"),
             [(Call("register_form",CTy"offset",Var("m",F4)),
               Apply
                 (Call
                    ("Shift",ATy(qTy,PTy(F32,qTy)),
                     TP[Apply
                          (Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
                        LC("SRType_LSL",CTy"SRType"),LN 0,
                        Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
                  qVar"state")),
              (Call("immediate_form",CTy"offset",Var("imm32",F32)),
               TP[Var("imm32",F32),qVar"state"])]),
          Let(TP[Var("v",F16),qVar"s"],
              Apply
                (Call
                   ("MemU",ATy(qTy,PTy(F16,qTy)),
                    TP[Bop(Add,
                           Apply
                             (Call("R",ATy(qTy,F32),Var("n",F4)),qVar"s"),
                           Var("v",F32)),LN 2]),qVar"s"),
              Let(qVar"s",
                  Apply
                    (Call("IncPC",ATy(qTy,qTy),LU),
                     Apply
                       (Call
                          ("write'R",ATy(qTy,qTy),
                           TP[Call
                                ("Extend",F32,
                                 TP[bVar"unsigned",Var("v",F16)]),
                              Var("t",F4)]),qVar"s")),
                  Rupd
                    ("count",
                     TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)]))))))
;
val dfn'LoadMultiple_def = Def
  ("dfn'LoadMultiple",TP[bVar"wback",Var("n",F4),Var("registers",FTy 9)],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Apply(Call("R",ATy(qTy,F32),Var("n",F4)),qVar"state"),
          Let(nVar"bitcount",Call("BitCount",nTy,Var("registers",FTy 9)),
              Let(Var("s",PTy(F32,qTy)),
                  Mop(Snd,
                      Apply
                        (For(TP[LN 0,LN 7,
                                Close
                                  (nVar"i",
                                   Close
                                     (Var("state",PTy(F32,qTy)),
                                      ITE(Bop(Bit,Var("registers",FTy 9),
                                              nVar"i"),
                                          Let(Var("s",PTy(F32,qTy)),
                                              Let(TP[Var("v",PTy(F32,F4)),
                                                     Var("s",PTy(F32,qTy))],
                                                  Let(TP[Var("v",F32),
                                                         Var("s",
                                                             PTy(F32,qTy))],
                                                      CS(Apply
                                                           (Call
                                                              ("MemA",
                                                               ATy(qTy,
                                                                   PTy(F32,
                                                                       qTy)),
                                                               TP[Mop(Fst,
                                                                      Var("state",
                                                                          PTy(F32,
                                                                              qTy))),
                                                                  LN 4]),
                                                            Mop(Snd,
                                                                Var("state",
                                                                    PTy(F32,
                                                                        qTy)))),
                                                         [(TP[Var("v",F32),
                                                              qVar"s3"],
                                                           TP[Var("v",F32),
                                                              Mop(Fst,
                                                                  Var("state",
                                                                      PTy(F32,
                                                                          qTy))),
                                                              qVar"s3"])]),
                                                      TP[TP[Var("v",F32),
                                                            Mop(Cast F4,
                                                                nVar"i")],
                                                         Var("s",
                                                             PTy(F32,qTy))]),
                                                  TP[Mop(Fst,
                                                         Var("s",
                                                             PTy(F32,qTy))),
                                                     Apply
                                                       (Call
                                                          ("write'R",
                                                           ATy(qTy,qTy),
                                                           Var("v",
                                                               PTy(F32,F4))),
                                                        Mop(Snd,
                                                            Var("s",
                                                                PTy(F32,
                                                                    qTy))))]),
                                              TP[LU,
                                                 Bop(Add,
                                                     Mop(Fst,
                                                         Var("s",
                                                             PTy(F32,qTy))),
                                                     LW(4,32)),
                                                 Mop(Snd,
                                                     Var("s",PTy(F32,qTy)))]),
                                          TP[LU,Var("state",PTy(F32,qTy))])))]),
                         TP[Var("v",F32),qVar"state"])),
                  Let(Var("s",PTy(F32,qTy)),
                      ITE(Bop(Bit,Var("registers",FTy 9),LN 8),
                          Let(Var("s",PTy(F32,qTy)),
                              Let(TP[Var("v",F32),Var("s",PTy(F32,qTy))],
                                  CS(Apply
                                       (Call
                                          ("MemA",ATy(qTy,PTy(F32,qTy)),
                                           TP[Mop(Fst,
                                                  Var("s",PTy(F32,qTy))),
                                              LN 4]),
                                        Mop(Snd,Var("s",PTy(F32,qTy)))),
                                     [(TP[Var("v",F32),qVar"s3"],
                                       TP[Var("v",F32),
                                          Mop(Fst,Var("s",PTy(F32,qTy))),
                                          qVar"s3"])]),
                                  TP[Mop(Fst,Var("s",PTy(F32,qTy))),
                                     Apply
                                       (Call
                                          ("LoadWritePC",ATy(qTy,qTy),
                                           Var("v",F32)),
                                        Mop(Snd,Var("s",PTy(F32,qTy))))]),
                              TP[Mop(Fst,Var("s",PTy(F32,qTy))),
                                 Rupd
                                   ("count",
                                    TP[Mop(Snd,Var("s",PTy(F32,qTy))),
                                       Bop(Add,
                                           Bop(Add,
                                               Dest
                                                 ("count",nTy,
                                                  Mop(Snd,
                                                      Var("s",PTy(F32,qTy)))),
                                               nVar"bitcount"),LN 4)])]),
                          Let(qVar"s1",
                              Apply
                                (Call("IncPC",ATy(qTy,qTy),LU),
                                 Mop(Snd,Var("s",PTy(F32,qTy)))),
                              TP[Mop(Fst,Var("s",PTy(F32,qTy))),
                                 Rupd
                                   ("count",
                                    TP[qVar"s1",
                                       Bop(Add,
                                           Bop(Add,
                                               Dest("count",nTy,qVar"s1"),
                                               nVar"bitcount"),LN 1)])])),
                      ITE(Bop(And,bVar"wback",
                              Mop(Not,
                                  Bop(Bit,Var("registers",FTy 9),
                                      Mop(Cast nTy,Var("n",F4))))),
                          Apply
                            (Call
                               ("write'R",ATy(qTy,qTy),
                                TP[Bop(Add,Var("v",F32),
                                       Bop(Mul,LW(4,32),
                                           Mop(Cast F32,nVar"bitcount"))),
                                   Var("n",F4)]),
                             Mop(Snd,Var("s",PTy(F32,qTy)))),
                          Mop(Snd,Var("s",PTy(F32,qTy))))))))))
;
val dfn'StoreWord_def = Def
  ("dfn'StoreWord",TP[Var("t",F4),Var("n",F4),Var("m",CTy"offset")],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          CS(Var("m",CTy"offset"),
             [(Call("register_form",CTy"offset",Var("m",F4)),
               Apply
                 (Call
                    ("Shift",ATy(qTy,PTy(F32,qTy)),
                     TP[Apply
                          (Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
                        LC("SRType_LSL",CTy"SRType"),LN 0,
                        Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
                  qVar"state")),
              (Call("immediate_form",CTy"offset",Var("imm32",F32)),
               TP[Var("imm32",F32),qVar"state"])]),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 Apply
                   (Call
                      ("write'MemU",ATy(qTy,qTy),
                       TP[Apply
                            (Call("R",ATy(qTy,F32),Var("t",F4)),qVar"s"),
                          Bop(Add,
                              Apply
                                (Call("R",ATy(qTy,F32),Var("n",F4)),
                                 qVar"s"),Var("v",F32)),LN 4]),qVar"s")),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)])))))
;
val dfn'StoreByte_def = Def
  ("dfn'StoreByte",TP[Var("t",F4),Var("n",F4),Var("m",CTy"offset")],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          CS(Var("m",CTy"offset"),
             [(Call("register_form",CTy"offset",Var("m",F4)),
               Apply
                 (Call
                    ("Shift",ATy(qTy,PTy(F32,qTy)),
                     TP[Apply
                          (Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
                        LC("SRType_LSL",CTy"SRType"),LN 0,
                        Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
                  qVar"state")),
              (Call("immediate_form",CTy"offset",Var("imm32",F32)),
               TP[Var("imm32",F32),qVar"state"])]),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 Apply
                   (Call
                      ("write'MemU",ATy(qTy,qTy),
                       TP[EX(Apply
                               (Call("R",ATy(qTy,F32),Var("t",F4)),qVar"s"),
                             LN 7,LN 0,F8),
                          Bop(Add,
                              Apply
                                (Call("R",ATy(qTy,F32),Var("n",F4)),
                                 qVar"s"),Var("v",F32)),LN 1]),qVar"s")),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)])))))
;
val dfn'StoreHalf_def = Def
  ("dfn'StoreHalf",TP[Var("t",F4),Var("n",F4),Var("m",CTy"offset")],
   Close
     (qVar"state",
      Let(TP[Var("v",F32),qVar"s"],
          CS(Var("m",CTy"offset"),
             [(Call("register_form",CTy"offset",Var("m",F4)),
               Apply
                 (Call
                    ("Shift",ATy(qTy,PTy(F32,qTy)),
                     TP[Apply
                          (Call("R",ATy(qTy,F32),Var("m",F4)),qVar"state"),
                        LC("SRType_LSL",CTy"SRType"),LN 0,
                        Dest("C",bTy,Dest("PSR",CTy"PSR",qVar"state"))]),
                  qVar"state")),
              (Call("immediate_form",CTy"offset",Var("imm32",F32)),
               TP[Var("imm32",F32),qVar"state"])]),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 Apply
                   (Call
                      ("write'MemU",ATy(qTy,qTy),
                       TP[EX(Apply
                               (Call("R",ATy(qTy,F32),Var("t",F4)),qVar"s"),
                             LN 15,LN 0,F16),
                          Bop(Add,
                              Apply
                                (Call("R",ATy(qTy,F32),Var("n",F4)),
                                 qVar"s"),Var("v",F32)),LN 2]),qVar"s")),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)])))))
;
val dfn'StoreMultiple_def = Def
  ("dfn'StoreMultiple",TP[Var("n",F4),Var("registers",F8)],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Apply(Call("R",ATy(qTy,F32),Var("n",F4)),qVar"state"),
          Let(nVar"bitcount",Call("BitCount",nTy,Var("registers",F8)),
              Let(qVar"s1",
                  Apply
                    (Call("IncPC",ATy(qTy,qTy),LU),
                     Apply
                       (Call
                          ("write'R",ATy(qTy,qTy),
                           TP[Bop(Add,Var("v",F32),
                                  Bop(Mul,LW(4,32),
                                      Mop(Cast F32,nVar"bitcount"))),
                              Var("n",F4)]),
                        Mop(Snd,
                            Mop(Snd,
                                Apply
                                  (For(TP[LN 0,LN 7,
                                          Close
                                            (nVar"i",
                                             Close
                                               (Var("state",PTy(F32,qTy)),
                                                TP[LU,
                                                   ITE(Bop(Bit,
                                                           Var("registers",
                                                               F8),nVar"i"),
                                                       TP[Bop(Add,
                                                              Mop(Fst,
                                                                  Var("state",
                                                                      PTy(F32,
                                                                          qTy))),
                                                              LW(4,32)),
                                                          ITE(Bop(And,
                                                                  EQ(Mop(Cast
                                                                           F4,
                                                                         nVar"i"),
                                                                     Var("n",
                                                                         F4)),
                                                                  Mop(Not,
                                                                      EQ(nVar"i",
                                                                         Call
                                                                           ("LowestSetBit",
                                                                            nTy,
                                                                            Var("registers",
                                                                                F8))))),
                                                              Apply
                                                                (Call
                                                                   ("write'MemA",
                                                                    ATy(qTy,
                                                                        qTy),
                                                                    TP[LX F32,
                                                                       Mop(Fst,
                                                                           Var("state",
                                                                               PTy(F32,
                                                                                   qTy))),
                                                                       LN
                                                                        4]),
                                                                 Mop(Snd,
                                                                     Var("state",
                                                                         PTy(F32,
                                                                             qTy)))),
                                                              Apply
                                                                (Call
                                                                   ("write'MemA",
                                                                    ATy(qTy,
                                                                        qTy),
                                                                    TP[Apply
                                                                         (Call
                                                                            ("R",
                                                                             ATy(qTy,
                                                                                 F32),
                                                                             Mop(Cast
                                                                                   F4,
                                                                                 nVar"i")),
                                                                          Mop(Snd,
                                                                              Var("state",
                                                                                  PTy(F32,
                                                                                      qTy)))),
                                                                       Mop(Fst,
                                                                           Var("state",
                                                                               PTy(F32,
                                                                                   qTy))),
                                                                       LN
                                                                        4]),
                                                                 Mop(Snd,
                                                                     Var("state",
                                                                         PTy(F32,
                                                                             qTy)))))],
                                                       Var("state",
                                                           PTy(F32,qTy)))]))]),
                                   TP[Var("v",F32),qVar"state"]))))),
                  Rupd
                    ("count",
                     TP[qVar"s1",
                        Bop(Add,
                            Bop(Add,Dest("count",nTy,qVar"s1"),
                                nVar"bitcount"),LN 1)]))))))
;
val dfn'Push_def = Def
  ("dfn'Push",Var("registers",FTy 9),
   Close
     (qVar"state",
      Let(Var("v",F32),Apply(Const("SP",ATy(qTy,F32)),qVar"state"),
          Let(nVar"bitcount",Call("BitCount",nTy,Var("registers",FTy 9)),
              Let(Var("length",F32),
                  Bop(Mul,LW(4,32),Mop(Cast F32,nVar"bitcount")),
                  Let(qVar"s1",
                      Apply
                        (Call("IncPC",ATy(qTy,qTy),LU),
                         Apply
                           (Call
                              ("write'SP",ATy(qTy,qTy),
                               Bop(Sub,Var("v",F32),Var("length",F32))),
                            Mop(Snd,
                                Mop(Snd,
                                    Apply
                                      (For(TP[LN 0,LN 8,
                                              Close
                                                (nVar"i",
                                                 Close
                                                   (Var("state",
                                                        PTy(F32,qTy)),
                                                    TP[LU,
                                                       ITE(Bop(Bit,
                                                               Var("registers",
                                                                   FTy 9),
                                                               nVar"i"),
                                                           TP[Bop(Add,
                                                                  Mop(Fst,
                                                                      Var("state",
                                                                          PTy(F32,
                                                                              qTy))),
                                                                  LW(4,32)),
                                                              Apply
                                                                (Call
                                                                   ("write'MemA",
                                                                    ATy(qTy,
                                                                        qTy),
                                                                    TP[ITE(EQ(nVar"i",
                                                                              LN
                                                                               8),
                                                                           Apply
                                                                             (Const
                                                                                ("LR",
                                                                                 ATy(qTy,
                                                                                     F32)),
                                                                              Mop(Snd,
                                                                                  Var("state",
                                                                                      PTy(F32,
                                                                                          qTy)))),
                                                                           Apply
                                                                             (Call
                                                                                ("R",
                                                                                 ATy(qTy,
                                                                                     F32),
                                                                                 Mop(Cast
                                                                                       F4,
                                                                                     nVar"i")),
                                                                              Mop(Snd,
                                                                                  Var("state",
                                                                                      PTy(F32,
                                                                                          qTy))))),
                                                                       Mop(Fst,
                                                                           Var("state",
                                                                               PTy(F32,
                                                                                   qTy))),
                                                                       LN
                                                                        4]),
                                                                 Mop(Snd,
                                                                     Var("state",
                                                                         PTy(F32,
                                                                             qTy))))],
                                                           Var("state",
                                                               PTy(F32,qTy)))]))]),
                                       TP[Bop(Sub,Var("v",F32),
                                              Var("length",F32)),
                                          qVar"state"]))))),
                      Rupd
                        ("count",
                         TP[qVar"s1",
                            Bop(Add,
                                Bop(Add,Dest("count",nTy,qVar"s1"),
                                    nVar"bitcount"),LN 1)])))))))
;
val dfn'SupervisorCall_def = Def
  ("dfn'SupervisorCall",Var("imm32",F32),
   Close
     (qVar"state",
      Let(qVar"s",
          Apply(Call("CallSupervisor",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LX nTy)]))))
;
val dfn'ChangeProcessorState_def = Def
  ("dfn'ChangeProcessorState",bVar"im",
   Close
     (qVar"state",
      Let(qVar"s",
          Apply
            (Call("IncPC",ATy(qTy,qTy),LU),
             ITE(Apply
                   (Call("CurrentModeIsPrivileged",ATy(qTy,bTy),LU),
                    qVar"state"),
                 Rupd
                   ("PRIMASK",
                    TP[qVar"state",
                       Rupd
                         ("PM",
                          TP[Dest("PRIMASK",CTy"PRIMASK",qVar"state"),
                             bVar"im"])]),qVar"state")),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)]))))
;
val dfn'MoveToRegisterFromSpecial_def = Def
  ("dfn'MoveToRegisterFromSpecial",TP[Var("SYSm",F8),Var("d",F4)],
   Close
     (qVar"state",
      Let(qVar"s",
          Apply
            (Call("write'R",ATy(qTy,qTy),TP[LW(0,32),Var("d",F4)]),
             qVar"state"),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 CS(EX(Var("SYSm",F8),LN 7,LN 3,FTy 5),
                    [(LW(0,5),
                      Let(qVar"s",
                          ITE(Bop(Bit,Var("SYSm",F8),LN 0),
                              Apply
                                (Call
                                   ("write'R",ATy(qTy,qTy),
                                    TP[BFI(LN 8,LN 0,
                                           EX(Call
                                                ("reg'PSR",F32,
                                                 Dest
                                                   ("PSR",CTy"PSR",qVar"s")),
                                              LN 8,LN 0,FTy 9),
                                           Apply
                                             (Call
                                                ("R",ATy(qTy,F32),
                                                 Var("d",F4)),qVar"s")),
                                       Var("d",F4)]),qVar"s"),qVar"s"),
                          Let(qVar"s",
                              ITE(Bop(Bit,Var("SYSm",F8),LN 1),
                                  Apply
                                    (Call
                                       ("write'R",ATy(qTy,qTy),
                                        TP[BFI(LN 24,LN 24,
                                               Mop(Cast F1,LF),
                                               Apply
                                                 (Call
                                                    ("R",ATy(qTy,F32),
                                                     Var("d",F4)),qVar"s")),
                                           Var("d",F4)]),qVar"s"),qVar"s"),
                              ITE(Mop(Not,Bop(Bit,Var("SYSm",F8),LN 2)),
                                  Apply
                                    (Call
                                       ("write'R",ATy(qTy,qTy),
                                        TP[BFI(LN 31,LN 27,
                                               EX(Call
                                                    ("reg'PSR",F32,
                                                     Dest
                                                       ("PSR",CTy"PSR",
                                                        qVar"s")),LN 31,
                                                  LN 27,FTy 5),
                                               Apply
                                                 (Call
                                                    ("R",ATy(qTy,F32),
                                                     Var("d",F4)),qVar"s")),
                                           Var("d",F4)]),qVar"s"),qVar"s")))),
                     (LW(1,5),
                      CS(EX(Var("SYSm",F8),LN 2,LN 0,FTy 3),
                         [(LW(0,3),
                           Apply
                             (Call
                                ("write'R",ATy(qTy,qTy),
                                 TP[Apply
                                      (Const("SP_main",ATy(qTy,F32)),
                                       qVar"s"),Var("d",F4)]),qVar"s")),
                          (LW(1,3),
                           Apply
                             (Call
                                ("write'R",ATy(qTy,qTy),
                                 TP[Apply
                                      (Const("SP_process",ATy(qTy,F32)),
                                       qVar"s"),Var("d",F4)]),qVar"s")),
                          (AVar(FTy 3),qVar"s")])),
                     (LW(2,5),
                      CS(EX(Var("SYSm",F8),LN 2,LN 0,FTy 3),
                         [(LW(0,3),
                           Apply
                             (Call
                                ("write'R",ATy(qTy,qTy),
                                 TP[BFI(LN 0,LN 0,
                                        Mop(Cast F1,
                                            Dest
                                              ("PM",bTy,
                                               Dest
                                                 ("PRIMASK",CTy"PRIMASK",
                                                  qVar"s"))),
                                        Apply
                                          (Call
                                             ("R",ATy(qTy,F32),Var("d",F4)),
                                           qVar"s")),Var("d",F4)]),qVar"s")),
                          (LW(4,3),
                           Apply
                             (Call
                                ("write'R",ATy(qTy,qTy),
                                 TP[BFI(LN 1,LN 0,
                                        EX(Call
                                             ("reg'CONTROL",FTy 3,
                                              Dest
                                                ("CONTROL",CTy"CONTROL",
                                                 qVar"s")),LN 1,LN 0,FTy 2),
                                        Apply
                                          (Call
                                             ("R",ATy(qTy,F32),Var("d",F4)),
                                           qVar"s")),Var("d",F4)]),qVar"s")),
                          (AVar(FTy 3),qVar"s")])),(AVar(FTy 5),qVar"s")])),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 4)])))))
;
val dfn'MoveToSpecialRegister_def = Def
  ("dfn'MoveToSpecialRegister",TP[Var("SYSm",F8),Var("n",F4)],
   Close
     (qVar"state",
      Let(Var("v",F32),
          Apply(Call("R",ATy(qTy,F32),Var("n",F4)),qVar"state"),
          Let(qVar"s",
              Apply
                (Call("IncPC",ATy(qTy,qTy),LU),
                 CS(EX(Var("SYSm",F8),LN 7,LN 3,FTy 5),
                    [(LW(0,5),
                      ITE(Mop(Not,Bop(Bit,Var("SYSm",F8),LN 2)),
                          Rupd
                            ("PSR",
                             TP[qVar"state",
                                Call
                                  ("write'reg'PSR",CTy"PSR",
                                   TP[Dest("PSR",CTy"PSR",qVar"state"),
                                      BFI(LN 31,LN 27,
                                          EX(Var("v",F32),LN 31,LN 27,
                                             FTy 5),
                                          Call
                                            ("reg'PSR",F32,
                                             Dest
                                               ("PSR",CTy"PSR",qVar"state")))])]),
                          qVar"state")),
                     (LW(1,5),
                      ITE(Apply
                            (Call
                               ("CurrentModeIsPrivileged",ATy(qTy,bTy),LU),
                             qVar"state"),
                          CS(EX(Var("SYSm",F8),LN 2,LN 0,FTy 3),
                             [(LW(0,3),
                               Apply
                                 (Call
                                    ("write'SP_main",ATy(qTy,qTy),
                                     CC[EX(Var("v",F32),LN 31,LN 2,FTy 30),
                                        LW(0,2)]),qVar"state")),
                              (LW(1,3),
                               Apply
                                 (Call
                                    ("write'SP_process",ATy(qTy,qTy),
                                     CC[EX(Var("v",F32),LN 31,LN 2,FTy 30),
                                        LW(0,2)]),qVar"state")),
                              (AVar(FTy 3),qVar"state")]),qVar"state")),
                     (LW(2,5),
                      ITE(Apply
                            (Call
                               ("CurrentModeIsPrivileged",ATy(qTy,bTy),LU),
                             qVar"state"),
                          CS(EX(Var("SYSm",F8),LN 2,LN 0,FTy 3),
                             [(LW(0,3),
                               Rupd
                                 ("PRIMASK",
                                  TP[qVar"state",
                                     Rupd
                                       ("PM",
                                        TP[Dest
                                             ("PRIMASK",CTy"PRIMASK",
                                              qVar"state"),
                                           Bop(Bit,Var("v",F32),LN 0)])])),
                              (LW(4,3),
                               ITE(EQ(Dest
                                        ("CurrentMode",CTy"Mode",
                                         qVar"state"),
                                      LC("Mode_Thread",CTy"Mode")),
                                   Let(qVar"s",
                                       Rupd
                                         ("CONTROL",
                                          TP[qVar"state",
                                             Rupd
                                               ("SPSEL",
                                                TP[Dest
                                                     ("CONTROL",
                                                      CTy"CONTROL",
                                                      qVar"state"),
                                                   Bop(Bit,Var("v",F32),
                                                       LN 1)])]),
                                       Rupd
                                         ("CONTROL",
                                          TP[qVar"s",
                                             Rupd
                                               ("nPRIV",
                                                TP[Dest
                                                     ("CONTROL",
                                                      CTy"CONTROL",qVar"s"),
                                                   Bop(Bit,Var("v",F32),
                                                       LN 0)])])),
                                   qVar"state")),(AVar(FTy 3),qVar"state")]),
                          qVar"state")),(AVar(FTy 5),qVar"state")])),
              Rupd
                ("count",
                 TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 4)])))))
;
val dfn'Undefined_def = Def
  ("dfn'Undefined",Var("imm32",F32),
   Close
     (qVar"state",
      Apply
        (Call("Raise",ATy(qTy,qTy),Const("HardFault",CTy"ARM_Exception")),
         qVar"state")))
;
val dfn'NoOperation_def = Def
  ("dfn'NoOperation",AVar uTy,
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)]))))
;
val dfn'Breakpoint_def = Def
  ("dfn'Breakpoint",Var("imm32",F32),
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LX nTy)]))))
;
val dfn'DataMemoryBarrier_def = Def
  ("dfn'DataMemoryBarrier",Var("option",F4),
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 4)]))))
;
val dfn'DataSynchronizationBarrier_def = Def
  ("dfn'DataSynchronizationBarrier",Var("option",F4),
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 4)]))))
;
val dfn'InstructionSynchronizationBarrier_def = Def
  ("dfn'InstructionSynchronizationBarrier",Var("option",F4),
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 4)]))))
;
val dfn'SendEvent_def = Def
  ("dfn'SendEvent",AVar uTy,
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)]))))
;
val dfn'WaitForEvent_def = Def
  ("dfn'WaitForEvent",AVar uTy,
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)]))))
;
val dfn'WaitForInterrupt_def = Def
  ("dfn'WaitForInterrupt",AVar uTy,
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 2)]))))
;
val dfn'Yield_def = Def
  ("dfn'Yield",AVar uTy,
   Close
     (qVar"state",
      Let(qVar"s",Apply(Call("IncPC",ATy(qTy,qTy),LU),qVar"state"),
          Rupd
            ("count",TP[qVar"s",Bop(Add,Dest("count",nTy,qVar"s"),LN 1)]))))
;
val Run_def = Def
  ("Run",Var("v0",CTy"instruction"),
   Close
     (qVar"state",
      CS(Var("v0",CTy"instruction"),
         [(Call("NoOperation",CTy"instruction",uVar"v48"),
           Apply
             (Call("dfn'NoOperation",ATy(qTy,qTy),uVar"v48"),qVar"state")),
          (Call("Undefined",CTy"instruction",Var("v49",F32)),
           Apply
             (Call("dfn'Undefined",ATy(qTy,qTy),Var("v49",F32)),
              qVar"state")),
          (Call("Branch",CTy"instruction",Var("v1",CTy"Branch")),
           CS(Var("v1",CTy"Branch"),
              [(Call("BranchExchange",CTy"Branch",Var("v2",F4)),
                Apply
                  (Call("dfn'BranchExchange",ATy(qTy,qTy),Var("v2",F4)),
                   qVar"state")),
               (Call
                  ("BranchLinkExchangeRegister",CTy"Branch",Var("v3",F4)),
                Apply
                  (Call
                     ("dfn'BranchLinkExchangeRegister",ATy(qTy,qTy),
                      Var("v3",F4)),qVar"state")),
               (Call("BranchLinkImmediate",CTy"Branch",Var("v4",F32)),
                Apply
                  (Call
                     ("dfn'BranchLinkImmediate",ATy(qTy,qTy),Var("v4",F32)),
                   qVar"state")),
               (Call("BranchTarget",CTy"Branch",Var("v5",F32)),
                Apply
                  (Call("dfn'BranchTarget",ATy(qTy,qTy),Var("v5",F32)),
                   qVar"state"))])),
          (Call("Data",CTy"instruction",Var("v6",CTy"Data")),
           CS(Var("v6",CTy"Data"),
              [(Call
                  ("ArithLogicImmediate",CTy"Data",
                   Var("v7",PTy(F4,PTy(bTy,PTy(F4,PTy(F4,F32)))))),
                Apply
                  (Call
                     ("dfn'ArithLogicImmediate",ATy(qTy,qTy),
                      Var("v7",PTy(F4,PTy(bTy,PTy(F4,PTy(F4,F32)))))),
                   qVar"state")),
               (Call("CompareImmediate",CTy"Data",Var("v8",PTy(F4,F32))),
                Apply
                  (Call
                     ("dfn'CompareImmediate",ATy(qTy,qTy),
                      Var("v8",PTy(F4,F32))),qVar"state")),
               (Call("Move",CTy"Data",Var("v9",PTy(F4,F32))),
                Apply
                  (Call("dfn'Move",ATy(qTy,qTy),Var("v9",PTy(F4,F32))),
                   qVar"state")),
               (Call
                  ("Register",CTy"Data",
                   Var("v10",PTy(F4,PTy(bTy,PTy(F4,PTy(F4,F4)))))),
                Apply
                  (Call
                     ("dfn'Register",ATy(qTy,qTy),
                      Var("v10",PTy(F4,PTy(bTy,PTy(F4,PTy(F4,F4)))))),
                   qVar"state")),
               (Call
                  ("ShiftImmediate",CTy"Data",
                   Var("v11",
                       PTy(bTy,
                           PTy(bTy,PTy(F4,PTy(F4,PTy(CTy"SRType",nTy))))))),
                Apply
                  (Call
                     ("dfn'ShiftImmediate",ATy(qTy,qTy),
                      Var("v11",
                          PTy(bTy,
                              PTy(bTy,PTy(F4,PTy(F4,PTy(CTy"SRType",nTy))))))),
                   qVar"state")),
               (Call
                  ("ShiftRegister",CTy"Data",
                   Var("v12",PTy(F4,PTy(F4,PTy(CTy"SRType",F4))))),
                Apply
                  (Call
                     ("dfn'ShiftRegister",ATy(qTy,qTy),
                      Var("v12",PTy(F4,PTy(F4,PTy(CTy"SRType",F4))))),
                   qVar"state")),
               (Call
                  ("TestCompareRegister",CTy"Data",
                   Var("v13",PTy(FTy 2,PTy(F4,F4)))),
                Apply
                  (Call
                     ("dfn'TestCompareRegister",ATy(qTy,qTy),
                      Var("v13",PTy(FTy 2,PTy(F4,F4)))),qVar"state"))])),
          (Call("Hint",CTy"instruction",Var("v14",CTy"Hint")),
           CS(Var("v14",CTy"Hint"),
              [(Call("Breakpoint",CTy"Hint",Var("v15",F32)),
                Apply
                  (Call("dfn'Breakpoint",ATy(qTy,qTy),Var("v15",F32)),
                   qVar"state")),
               (Call("DataMemoryBarrier",CTy"Hint",Var("v16",F4)),
                Apply
                  (Call
                     ("dfn'DataMemoryBarrier",ATy(qTy,qTy),Var("v16",F4)),
                   qVar"state")),
               (Call("DataSynchronizationBarrier",CTy"Hint",Var("v17",F4)),
                Apply
                  (Call
                     ("dfn'DataSynchronizationBarrier",ATy(qTy,qTy),
                      Var("v17",F4)),qVar"state")),
               (Call
                  ("InstructionSynchronizationBarrier",CTy"Hint",
                   Var("v18",F4)),
                Apply
                  (Call
                     ("dfn'InstructionSynchronizationBarrier",
                      ATy(qTy,qTy),Var("v18",F4)),qVar"state")),
               (Call("SendEvent",CTy"Hint",uVar"v19"),
                Apply
                  (Call("dfn'SendEvent",ATy(qTy,qTy),uVar"v19"),
                   qVar"state")),
               (Call("WaitForEvent",CTy"Hint",uVar"v20"),
                Apply
                  (Call("dfn'WaitForEvent",ATy(qTy,qTy),uVar"v20"),
                   qVar"state")),
               (Call("WaitForInterrupt",CTy"Hint",uVar"v21"),
                Apply
                  (Call("dfn'WaitForInterrupt",ATy(qTy,qTy),uVar"v21"),
                   qVar"state")),
               (Call("Yield",CTy"Hint",uVar"v22"),
                Apply
                  (Call("dfn'Yield",ATy(qTy,qTy),uVar"v22"),qVar"state"))])),
          (Call("Load",CTy"instruction",Var("v23",CTy"Load")),
           CS(Var("v23",CTy"Load"),
              [(Call
                  ("LoadByte",CTy"Load",
                   Var("v24",PTy(bTy,PTy(F4,PTy(F4,CTy"offset"))))),
                Apply
                  (Call
                     ("dfn'LoadByte",ATy(qTy,qTy),
                      Var("v24",PTy(bTy,PTy(F4,PTy(F4,CTy"offset"))))),
                   qVar"state")),
               (Call
                  ("LoadHalf",CTy"Load",
                   Var("v25",PTy(bTy,PTy(F4,PTy(F4,CTy"offset"))))),
                Apply
                  (Call
                     ("dfn'LoadHalf",ATy(qTy,qTy),
                      Var("v25",PTy(bTy,PTy(F4,PTy(F4,CTy"offset"))))),
                   qVar"state")),
               (Call("LoadLiteral",CTy"Load",Var("v26",PTy(F4,F32))),
                Apply
                  (Call
                     ("dfn'LoadLiteral",ATy(qTy,qTy),
                      Var("v26",PTy(F4,F32))),qVar"state")),
               (Call
                  ("LoadMultiple",CTy"Load",
                   Var("v27",PTy(bTy,PTy(F4,FTy 9)))),
                Apply
                  (Call
                     ("dfn'LoadMultiple",ATy(qTy,qTy),
                      Var("v27",PTy(bTy,PTy(F4,FTy 9)))),qVar"state")),
               (Call
                  ("LoadWord",CTy"Load",
                   Var("v28",PTy(F4,PTy(F4,CTy"offset")))),
                Apply
                  (Call
                     ("dfn'LoadWord",ATy(qTy,qTy),
                      Var("v28",PTy(F4,PTy(F4,CTy"offset")))),qVar"state"))])),
          (Call("Media",CTy"instruction",Var("v29",CTy"Media")),
           CS(Var("v29",CTy"Media"),
              [(Call("ByteReverse",CTy"Media",Var("v30",PTy(F4,F4))),
                Apply
                  (Call
                     ("dfn'ByteReverse",ATy(qTy,qTy),Var("v30",PTy(F4,F4))),
                   qVar"state")),
               (Call
                  ("ByteReversePackedHalfword",CTy"Media",
                   Var("v31",PTy(F4,F4))),
                Apply
                  (Call
                     ("dfn'ByteReversePackedHalfword",ATy(qTy,qTy),
                      Var("v31",PTy(F4,F4))),qVar"state")),
               (Call
                  ("ByteReverseSignedHalfword",CTy"Media",
                   Var("v32",PTy(F4,F4))),
                Apply
                  (Call
                     ("dfn'ByteReverseSignedHalfword",ATy(qTy,qTy),
                      Var("v32",PTy(F4,F4))),qVar"state")),
               (Call
                  ("ExtendByte",CTy"Media",Var("v33",PTy(bTy,PTy(F4,F4)))),
                Apply
                  (Call
                     ("dfn'ExtendByte",ATy(qTy,qTy),
                      Var("v33",PTy(bTy,PTy(F4,F4)))),qVar"state")),
               (Call
                  ("ExtendHalfword",CTy"Media",
                   Var("v34",PTy(bTy,PTy(F4,F4)))),
                Apply
                  (Call
                     ("dfn'ExtendHalfword",ATy(qTy,qTy),
                      Var("v34",PTy(bTy,PTy(F4,F4)))),qVar"state"))])),
          (Call("Multiply",CTy"instruction",Var("v35",CTy"Multiply")),
           CS(Var("v35",CTy"Multiply"),
              [(Call
                  ("Multiply32",CTy"Multiply",
                   Var("v36",PTy(F4,PTy(F4,F4)))),
                Apply
                  (Call
                     ("dfn'Multiply32",ATy(qTy,qTy),
                      Var("v36",PTy(F4,PTy(F4,F4)))),qVar"state"))])),
          (Call("Store",CTy"instruction",Var("v37",CTy"Store")),
           CS(Var("v37",CTy"Store"),
              [(Call("Push",CTy"Store",Var("v38",FTy 9)),
                Apply
                  (Call("dfn'Push",ATy(qTy,qTy),Var("v38",FTy 9)),
                   qVar"state")),
               (Call
                  ("StoreByte",CTy"Store",
                   Var("v39",PTy(F4,PTy(F4,CTy"offset")))),
                Apply
                  (Call
                     ("dfn'StoreByte",ATy(qTy,qTy),
                      Var("v39",PTy(F4,PTy(F4,CTy"offset")))),qVar"state")),
               (Call
                  ("StoreHalf",CTy"Store",
                   Var("v40",PTy(F4,PTy(F4,CTy"offset")))),
                Apply
                  (Call
                     ("dfn'StoreHalf",ATy(qTy,qTy),
                      Var("v40",PTy(F4,PTy(F4,CTy"offset")))),qVar"state")),
               (Call("StoreMultiple",CTy"Store",Var("v41",PTy(F4,F8))),
                Apply
                  (Call
                     ("dfn'StoreMultiple",ATy(qTy,qTy),
                      Var("v41",PTy(F4,F8))),qVar"state")),
               (Call
                  ("StoreWord",CTy"Store",
                   Var("v42",PTy(F4,PTy(F4,CTy"offset")))),
                Apply
                  (Call
                     ("dfn'StoreWord",ATy(qTy,qTy),
                      Var("v42",PTy(F4,PTy(F4,CTy"offset")))),qVar"state"))])),
          (Call("System",CTy"instruction",Var("v43",CTy"System")),
           CS(Var("v43",CTy"System"),
              [(Call("ChangeProcessorState",CTy"System",bVar"v44"),
                Apply
                  (Call("dfn'ChangeProcessorState",ATy(qTy,qTy),bVar"v44"),
                   qVar"state")),
               (Call
                  ("MoveToRegisterFromSpecial",CTy"System",
                   Var("v45",PTy(F8,F4))),
                Apply
                  (Call
                     ("dfn'MoveToRegisterFromSpecial",ATy(qTy,qTy),
                      Var("v45",PTy(F8,F4))),qVar"state")),
               (Call
                  ("MoveToSpecialRegister",CTy"System",
                   Var("v46",PTy(F8,F4))),
                Apply
                  (Call
                     ("dfn'MoveToSpecialRegister",ATy(qTy,qTy),
                      Var("v46",PTy(F8,F4))),qVar"state")),
               (Call("SupervisorCall",CTy"System",Var("v47",F32)),
                Apply
                  (Call("dfn'SupervisorCall",ATy(qTy,qTy),Var("v47",F32)),
                   qVar"state"))]))])))
;
val Fetch_def = Def
  ("Fetch",qVar"state",
   Let(Var("v",F32),
       Apply
         (Dest("REG",ATy(CTy"RName",F32),qVar"state"),
          LC("RName_PC",CTy"RName")),
       Let(TP[Var("v0",F16),qVar"s"],
           Apply
             (Call("MemA",ATy(qTy,PTy(F16,qTy)),TP[Var("v",F32),LN 2]),
              qVar"state"),
           ITE(Bop(And,EQ(EX(Var("v0",F16),LN 15,LN 13,FTy 3),LW(7,3)),
                   Mop(Not,EQ(EX(Var("v0",F16),LN 12,LN 11,FTy 2),LW(0,2)))),
               Let(TP[Var("v1",F16),qVar"s"],
                   Apply
                     (Call
                        ("MemA",ATy(qTy,PTy(F16,qTy)),
                         TP[Bop(Add,Var("v",F32),LW(2,32)),LN 2]),qVar"s"),
                   TP[Call
                        ("Thumb2",CTy"MachineCode",
                         TP[Var("v0",F16),Var("v1",F16)]),qVar"s"]),
               TP[Call("Thumb",CTy"MachineCode",Var("v0",F16)),qVar"s"]))))
;
val DECODE_UNPREDICTABLE_def = Def
  ("DECODE_UNPREDICTABLE",TP[Var("mc",CTy"MachineCode"),sVar"s"],
   Close
     (qVar"state",
      Mop(Snd,
          Apply
            (Call
               ("raise'exception",ATy(qTy,PTy(uTy,qTy)),
                Call
                  ("UNPREDICTABLE",CTy"exception",
                   CC[LS"Decode ",
                      CS(Var("mc",CTy"MachineCode"),
                         [(Call("Thumb",CTy"MachineCode",Var("opc",F16)),
                           CC[Mop(Cast sTy,Mop(Cast vTy,Var("opc",F16))),
                              LS"; Thumb; "]),
                          (Call
                             ("Thumb2",CTy"MachineCode",
                              TP[Var("opc1",F16),Var("opc2",F16)]),
                           CC[Mop(Cast sTy,Mop(Cast vTy,Var("opc1",F16))),
                              LS", ",
                              Mop(Cast sTy,Mop(Cast vTy,Var("opc2",F16))),
                              LS"; Thumb2; "])]),sVar"s"])),qVar"state"))))
;
val DecodeThumb_def = Def
  ("DecodeThumb",Var("h",F16),
   Close
     (qVar"state",
      Let(Var("mc",CTy"MachineCode"),
          Call("Thumb",CTy"MachineCode",Var("h",F16)),
          Let(TP[bVar"b'15",bVar"b'14",bVar"b'13",bVar"b'12",bVar"b'11",
                 bVar"b'10",bVar"b'9",bVar"b'8",bVar"b'7",bVar"b'6",
                 bVar"b'5",bVar"b'4",bVar"b'3",bVar"b'2",bVar"b'1",
                 bVar"b'0"],BL(16,Var("h",F16)),
              ITB([(bVar"b'15",
                    ITB([(bVar"b'13",
                          ITB([(Bop(And,Mop(Not,bVar"b'14"),
                                    Mop(Not,bVar"b'12")),
                                TP[Call
                                     ("Data",CTy"instruction",
                                      Call
                                        ("ArithLogicImmediate",CTy"Data",
                                         TP[LW(4,4),LF,
                                            Mop(Cast F4,
                                                Mop(Cast(FTy 3),
                                                    LL[bVar"b'10",
                                                       bVar"b'9",bVar"b'8"])),
                                            ITE(EQ(Mop(Cast F1,
                                                       LL[bVar"b'11"]),
                                                   LW(1,1)),LW(13,4),
                                                LW(15,4)),
                                            Mop(Cast F32,
                                                CC[Mop(Cast F8,
                                                       LL[bVar"b'7",
                                                          bVar"b'6",
                                                          bVar"b'5",
                                                          bVar"b'4",
                                                          bVar"b'3",
                                                          bVar"b'2",
                                                          bVar"b'1",
                                                          bVar"b'0"]),
                                                   LW(0,2)])])),
                                   qVar"state"]),
                               (Bop(And,Mop(Not,bVar"b'14"),
                                    Bop(And,bVar"b'12",
                                        Bop(And,Mop(Not,bVar"b'11"),
                                            Bop(And,Mop(Not,bVar"b'10"),
                                                Bop(And,
                                                    Mop(Not,bVar"b'9"),
                                                    Mop(Not,bVar"b'8")))))),
                                TP[Call
                                     ("Data",CTy"instruction",
                                      Call
                                        ("ArithLogicImmediate",CTy"Data",
                                         TP[ITE(EQ(Mop(Cast F1,
                                                       LL[bVar"b'7"]),
                                                   LW(1,1)),LW(2,4),
                                                LW(4,4)),LF,LW(13,4),
                                            LW(13,4),
                                            Mop(Cast F32,
                                                CC[Mop(Cast(FTy 7),
                                                       LL[bVar"b'6",
                                                          bVar"b'5",
                                                          bVar"b'4",
                                                          bVar"b'3",
                                                          bVar"b'2",
                                                          bVar"b'1",
                                                          bVar"b'0"]),
                                                   LW(0,2)])])),
                                   qVar"state"]),
                               (Bop(And,Mop(Not,bVar"b'14"),
                                    Bop(And,bVar"b'12",
                                        Bop(And,Mop(Not,bVar"b'11"),
                                            Bop(And,Mop(Not,bVar"b'10"),
                                                Bop(And,bVar"b'9",
                                                    Bop(And,
                                                        Mop(Not,bVar"b'8"),
                                                        Mop(Not,bVar"b'6"))))))),
                                TP[Call
                                     ("Media",CTy"instruction",
                                      Call
                                        ("ExtendHalfword",CTy"Media",
                                         TP[EQ(Mop(Cast F1,LL[bVar"b'7"]),
                                               LW(1,1)),
                                            Mop(Cast F4,
                                                Mop(Cast(FTy 3),
                                                    LL[bVar"b'2",
                                                       bVar"b'1",bVar"b'0"])),
                                            Mop(Cast F4,
                                                Mop(Cast(FTy 3),
                                                    LL[bVar"b'5",
                                                       bVar"b'4",bVar"b'3"]))])),
                                   qVar"state"]),
                               (Bop(And,Mop(Not,bVar"b'14"),
                                    Bop(And,bVar"b'12",
                                        Bop(And,Mop(Not,bVar"b'11"),
                                            Bop(And,Mop(Not,bVar"b'10"),
                                                Bop(And,bVar"b'9",
                                                    Bop(And,
                                                        Mop(Not,bVar"b'8"),
                                                        bVar"b'6")))))),
                                TP[Call
                                     ("Media",CTy"instruction",
                                      Call
                                        ("ExtendByte",CTy"Media",
                                         TP[EQ(Mop(Cast F1,LL[bVar"b'7"]),
                                               LW(1,1)),
                                            Mop(Cast F4,
                                                Mop(Cast(FTy 3),
                                                    LL[bVar"b'2",
                                                       bVar"b'1",bVar"b'0"])),
                                            Mop(Cast F4,
                                                Mop(Cast(FTy 3),
                                                    LL[bVar"b'5",
                                                       bVar"b'4",bVar"b'3"]))])),
                                   qVar"state"]),
                               (Bop(And,Mop(Not,bVar"b'14"),
                                    Bop(And,bVar"b'12",
                                        Bop(And,Mop(Not,bVar"b'11"),
                                            Bop(And,bVar"b'10",
                                                Mop(Not,bVar"b'9"))))),
                                Let(Var("registers",FTy 9),
                                    Mop(Cast(FTy 9),
                                        LL[bVar"b'8",bVar"b'7",bVar"b'6",
                                           bVar"b'5",bVar"b'4",bVar"b'3",
                                           bVar"b'2",bVar"b'1",bVar"b'0"]),
                                    TP[Call
                                         ("Store",CTy"instruction",
                                          Call
                                            ("Push",CTy"Store",
                                             Var("registers",FTy 9))),
                                       ITE(Bop(Lt,
                                               Call
                                                 ("BitCount",nTy,
                                                  Var("registers",FTy 9)),
                                               LN 1),
                                           Apply
                                             (Call
                                                ("DECODE_UNPREDICTABLE",
                                                 ATy(qTy,qTy),
                                                 TP[Var("mc",
                                                        CTy"MachineCode"),
                                                    LS"Push"]),qVar"state"),
                                           qVar"state")])),
                               (Bop(And,Mop(Not,bVar"b'14"),
                                    Bop(And,bVar"b'12",
                                        Bop(And,Mop(Not,bVar"b'11"),
                                            Bop(And,bVar"b'10",
                                                Bop(And,bVar"b'9",
                                                    Bop(And,
                                                        Mop(Not,bVar"b'8"),
                                                        Bop(And,
                                                            Mop(Not,
                                                                bVar"b'7"),
                                                            Bop(And,
                                                                bVar"b'6",
                                                                bVar"b'5")))))))),
                                TP[Call
                                     ("System",CTy"instruction",
                                      Call
                                        ("ChangeProcessorState",
                                         CTy"System",
                                         Mop(Cast bTy,
                                             Mop(Cast F1,LL[bVar"b'4"])))),
                                   qVar"state"]),
                               (Bop(And,Mop(Not,bVar"b'14"),
                                    Bop(And,bVar"b'12",
                                        Bop(And,bVar"b'11",
                                            Bop(And,Mop(Not,bVar"b'10"),
                                                Bop(And,bVar"b'9",
                                                    Mop(Not,bVar"b'8")))))),
                                Let(Var("Rd",FTy 3),
                                    Mop(Cast(FTy 3),
                                        LL[bVar"b'2",bVar"b'1",bVar"b'0"]),
                                    Let(Var("Rm",FTy 3),
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'5",bVar"b'4",
                                               bVar"b'3"]),
                                        TP[CS(Mop(Cast(FTy 2),
                                                  LL[bVar"b'7",bVar"b'6"]),
                                              [(LW(0,2),
                                                Call
                                                  ("Media",
                                                   CTy"instruction",
                                                   Call
                                                     ("ByteReverse",
                                                      CTy"Media",
                                                      TP[Mop(Cast F4,
                                                             Var("Rd",
                                                                 FTy 3)),
                                                         Mop(Cast F4,
                                                             Var("Rm",
                                                                 FTy 3))]))),
                                               (LW(1,2),
                                                Call
                                                  ("Media",
                                                   CTy"instruction",
                                                   Call
                                                     ("ByteReversePackedHalfword",
                                                      CTy"Media",
                                                      TP[Mop(Cast F4,
                                                             Var("Rd",
                                                                 FTy 3)),
                                                         Mop(Cast F4,
                                                             Var("Rm",
                                                                 FTy 3))]))),
                                               (LW(3,2),
                                                Call
                                                  ("Media",
                                                   CTy"instruction",
                                                   Call
                                                     ("ByteReverseSignedHalfword",
                                                      CTy"Media",
                                                      TP[Mop(Cast F4,
                                                             Var("Rd",
                                                                 FTy 3)),
                                                         Mop(Cast F4,
                                                             Var("Rm",
                                                                 FTy 3))]))),
                                               (AVar(FTy 2),
                                                Call
                                                  ("Undefined",
                                                   CTy"instruction",
                                                   LW(0,32)))]),
                                           qVar"state"]))),
                               (Bop(And,Mop(Not,bVar"b'14"),
                                    Bop(And,bVar"b'12",
                                        Bop(And,bVar"b'11",
                                            Bop(And,bVar"b'10",
                                                Mop(Not,bVar"b'9"))))),
                                Let(Var("registers",FTy 9),
                                    Mop(Cast(FTy 9),
                                        LL[bVar"b'8",bVar"b'7",bVar"b'6",
                                           bVar"b'5",bVar"b'4",bVar"b'3",
                                           bVar"b'2",bVar"b'1",bVar"b'0"]),
                                    TP[Call
                                         ("Load",CTy"instruction",
                                          Call
                                            ("LoadMultiple",CTy"Load",
                                             TP[LT,LW(13,4),
                                                Var("registers",FTy 9)])),
                                       ITE(Bop(Lt,
                                               Call
                                                 ("BitCount",nTy,
                                                  Var("registers",FTy 9)),
                                               LN 1),
                                           Apply
                                             (Call
                                                ("DECODE_UNPREDICTABLE",
                                                 ATy(qTy,qTy),
                                                 TP[Var("mc",
                                                        CTy"MachineCode"),
                                                    LS"POP"]),qVar"state"),
                                           qVar"state")]))],
                              TP[ITB([(Bop(And,Mop(Not,bVar"b'14"),
                                           Bop(And,bVar"b'12",
                                               Bop(And,bVar"b'11",
                                                   Bop(And,bVar"b'10",
                                                       Bop(And,bVar"b'9",
                                                           Mop(Not,
                                                               bVar"b'8")))))),
                                       Call
                                         ("Hint",CTy"instruction",
                                          Call
                                            ("Breakpoint",CTy"Hint",
                                             Mop(Cast F32,
                                                 Mop(Cast F8,
                                                     LL[bVar"b'7",
                                                        bVar"b'6",
                                                        bVar"b'5",
                                                        bVar"b'4",
                                                        bVar"b'3",
                                                        bVar"b'2",
                                                        bVar"b'1",
                                                        bVar"b'0"]))))),
                                      (Bop(And,Mop(Not,bVar"b'14"),
                                           Bop(And,bVar"b'12",
                                               Bop(And,bVar"b'11",
                                                   Bop(And,bVar"b'10",
                                                       Bop(And,bVar"b'9",
                                                           Bop(And,
                                                               bVar"b'8",
                                                               Bop(And,
                                                                   Mop(Not,
                                                                       bVar"b'3"),
                                                                   Bop(And,
                                                                       Mop(Not,
                                                                           bVar"b'2"),
                                                                       Bop(And,
                                                                           Mop(Not,
                                                                               bVar"b'1"),
                                                                           Mop(Not,
                                                                               bVar"b'0")))))))))),
                                       CS(Mop(Cast F4,
                                              LL[bVar"b'7",bVar"b'6",
                                                 bVar"b'5",bVar"b'4"]),
                                          [(LW(1,4),
                                            Call
                                              ("Hint",CTy"instruction",
                                               Call("Yield",CTy"Hint",LU))),
                                           (LW(2,4),
                                            Call
                                              ("Hint",CTy"instruction",
                                               Call
                                                 ("WaitForEvent",
                                                  CTy"Hint",LU))),
                                           (LW(3,4),
                                            Call
                                              ("Hint",CTy"instruction",
                                               Call
                                                 ("WaitForInterrupt",
                                                  CTy"Hint",LU))),
                                           (LW(4,4),
                                            Call
                                              ("Hint",CTy"instruction",
                                               Call
                                                 ("SendEvent",CTy"Hint",LU))),
                                           (AVar F4,
                                            Call
                                              ("NoOperation",
                                               CTy"instruction",LU))])),
                                      (Bop(And,bVar"b'14",
                                           Bop(And,Mop(Not,bVar"b'12"),
                                               Mop(Not,bVar"b'11"))),
                                       Call
                                         ("Branch",CTy"instruction",
                                          Call
                                            ("BranchTarget",CTy"Branch",
                                             Mop(SE F32,
                                                 CC[Mop(Cast(FTy 11),
                                                        LL[bVar"b'10",
                                                           bVar"b'9",
                                                           bVar"b'8",
                                                           bVar"b'7",
                                                           bVar"b'6",
                                                           bVar"b'5",
                                                           bVar"b'4",
                                                           bVar"b'3",
                                                           bVar"b'2",
                                                           bVar"b'1",
                                                           bVar"b'0"]),
                                                    LW(0,1)]))))],
                                     Call
                                       ("Undefined",CTy"instruction",
                                        LW(0,32))),qVar"state"])),
                         (Bop(And,Mop(Not,bVar"b'14"),Mop(Not,bVar"b'12")),
                          Let(Var("Rt",FTy 3),
                              Mop(Cast(FTy 3),
                                  LL[bVar"b'2",bVar"b'1",bVar"b'0"]),
                              Let(Var("Rn",FTy 3),
                                  Mop(Cast(FTy 3),
                                      LL[bVar"b'5",bVar"b'4",bVar"b'3"]),
                                  TP[Let(Var("m",CTy"offset"),
                                         Call
                                           ("immediate_form",CTy"offset",
                                            Mop(Cast F32,
                                                CC[Mop(Cast(FTy 5),
                                                       LL[bVar"b'10",
                                                          bVar"b'9",
                                                          bVar"b'8",
                                                          bVar"b'7",
                                                          bVar"b'6"]),
                                                   LW(0,1)])),
                                         ITE(EQ(Mop(Cast F1,LL[bVar"b'11"]),
                                                LW(1,1)),
                                             Call
                                               ("Load",CTy"instruction",
                                                Call
                                                  ("LoadHalf",CTy"Load",
                                                   TP[LT,
                                                      Mop(Cast F4,
                                                          Var("Rt",FTy 3)),
                                                      Mop(Cast F4,
                                                          Var("Rn",FTy 3)),
                                                      Var("m",CTy"offset")])),
                                             Call
                                               ("Store",CTy"instruction",
                                                Call
                                                  ("StoreHalf",CTy"Store",
                                                   TP[Mop(Cast F4,
                                                          Var("Rt",FTy 3)),
                                                      Mop(Cast F4,
                                                          Var("Rn",FTy 3)),
                                                      Var("m",CTy"offset")])))),
                                     qVar"state"]))),
                         (Bop(And,Mop(Not,bVar"b'14"),bVar"b'12"),
                          Let(Var("Rt",FTy 3),
                              Mop(Cast(FTy 3),
                                  LL[bVar"b'10",bVar"b'9",bVar"b'8"]),
                              TP[Let(Var("m",CTy"offset"),
                                     Call
                                       ("immediate_form",CTy"offset",
                                        Mop(Cast F32,
                                            CC[Mop(Cast F8,
                                                   LL[bVar"b'7",bVar"b'6",
                                                      bVar"b'5",bVar"b'4",
                                                      bVar"b'3",bVar"b'2",
                                                      bVar"b'1",bVar"b'0"]),
                                               LW(0,2)])),
                                     ITE(EQ(Mop(Cast F1,LL[bVar"b'11"]),
                                            LW(1,1)),
                                         Call
                                           ("Load",CTy"instruction",
                                            Call
                                              ("LoadWord",CTy"Load",
                                               TP[Mop(Cast F4,
                                                      Var("Rt",FTy 3)),
                                                  LW(13,4),
                                                  Var("m",CTy"offset")])),
                                         Call
                                           ("Store",CTy"instruction",
                                            Call
                                              ("StoreWord",CTy"Store",
                                               TP[Mop(Cast F4,
                                                      Var("Rt",FTy 3)),
                                                  LW(13,4),
                                                  Var("m",CTy"offset")])))),
                                 qVar"state"])),
                         (Bop(And,bVar"b'14",
                              Bop(And,Mop(Not,bVar"b'12"),
                                  Mop(Not,bVar"b'11"))),
                          Let(Var("registers",F8),
                              Mop(Cast F8,
                                  LL[bVar"b'7",bVar"b'6",bVar"b'5",
                                     bVar"b'4",bVar"b'3",bVar"b'2",
                                     bVar"b'1",bVar"b'0"]),
                              TP[Call
                                   ("Store",CTy"instruction",
                                    Call
                                      ("StoreMultiple",CTy"Store",
                                       TP[Mop(Cast F4,
                                              Mop(Cast(FTy 3),
                                                  LL[bVar"b'10",bVar"b'9",
                                                     bVar"b'8"])),
                                          Var("registers",F8)])),
                                 ITE(Bop(Lt,
                                         Call
                                           ("BitCount",nTy,
                                            Var("registers",F8)),LN 1),
                                     Apply
                                       (Call
                                          ("DECODE_UNPREDICTABLE",
                                           ATy(qTy,qTy),
                                           TP[Var("mc",CTy"MachineCode"),
                                              LS"StoreMultiple"]),
                                        qVar"state"),qVar"state")])),
                         (Bop(And,bVar"b'14",
                              Bop(And,Mop(Not,bVar"b'12"),bVar"b'11")),
                          Let(Var("Rn",FTy 3),
                              Mop(Cast(FTy 3),
                                  LL[bVar"b'10",bVar"b'9",bVar"b'8"]),
                              Let(Var("registers",FTy 9),
                                  Mop(Cast(FTy 9),
                                      Mop(Cast F8,
                                          LL[bVar"b'7",bVar"b'6",
                                             bVar"b'5",bVar"b'4",
                                             bVar"b'3",bVar"b'2",
                                             bVar"b'1",bVar"b'0"])),
                                  TP[Call
                                       ("Load",CTy"instruction",
                                        Call
                                          ("LoadMultiple",CTy"Load",
                                           TP[Mop(Not,
                                                  Bop(Bit,
                                                      Var("registers",
                                                          FTy 9),
                                                      Mop(Cast nTy,
                                                          Var("Rn",FTy 3)))),
                                              Mop(Cast F4,Var("Rn",FTy 3)),
                                              Var("registers",FTy 9)])),
                                     ITE(Bop(Lt,
                                             Call
                                               ("BitCount",nTy,
                                                Var("registers",FTy 9)),
                                             LN 1),
                                         Apply
                                           (Call
                                              ("DECODE_UNPREDICTABLE",
                                               ATy(qTy,qTy),
                                               TP[Var("mc",
                                                      CTy"MachineCode"),
                                                  LS"LoadMultiple"]),
                                            qVar"state"),qVar"state")])))],
                        TP[ITB([(Bop(And,bVar"b'14",
                                     Bop(And,bVar"b'12",
                                         Bop(And,bVar"b'11",
                                             Bop(And,bVar"b'10",
                                                 Bop(And,bVar"b'9",
                                                     Mop(Not,bVar"b'8")))))),
                                 Call
                                   ("Undefined",CTy"instruction",
                                    Mop(Cast F32,
                                        Mop(Cast F8,
                                            LL[bVar"b'7",bVar"b'6",
                                               bVar"b'5",bVar"b'4",
                                               bVar"b'3",bVar"b'2",
                                               bVar"b'1",bVar"b'0"])))),
                                (Bop(And,bVar"b'14",
                                     Bop(And,bVar"b'12",
                                         Bop(And,bVar"b'11",
                                             Bop(And,bVar"b'10",
                                                 Bop(And,bVar"b'9",
                                                     bVar"b'8"))))),
                                 Call
                                   ("System",CTy"instruction",
                                    Call
                                      ("SupervisorCall",CTy"System",
                                       Mop(Cast F32,
                                           Mop(Cast F8,
                                               LL[bVar"b'7",bVar"b'6",
                                                  bVar"b'5",bVar"b'4",
                                                  bVar"b'3",bVar"b'2",
                                                  bVar"b'1",bVar"b'0"]))))),
                                (Bop(And,bVar"b'14",bVar"b'12"),
                                 ITE(Apply
                                       (Call
                                          ("ConditionPassed",ATy(qTy,bTy),
                                           Mop(Cast F4,
                                               LL[bVar"b'11",bVar"b'10",
                                                  bVar"b'9",bVar"b'8"])),
                                        qVar"state"),
                                     Call
                                       ("Branch",CTy"instruction",
                                        Call
                                          ("BranchTarget",CTy"Branch",
                                           Mop(SE F32,
                                               CC[Mop(Cast F8,
                                                      LL[bVar"b'7",
                                                         bVar"b'6",
                                                         bVar"b'5",
                                                         bVar"b'4",
                                                         bVar"b'3",
                                                         bVar"b'2",
                                                         bVar"b'1",
                                                         bVar"b'0"]),
                                                  LW(0,1)]))),
                                     Call
                                       ("NoOperation",CTy"instruction",LU)))],
                               Call("Undefined",CTy"instruction",LW(0,32))),
                           qVar"state"])),
                   (bVar"b'14",
                    ITB([(Bop(And,Mop(Not,bVar"b'13"),
                              Bop(And,Mop(Not,bVar"b'12"),
                                  Bop(And,Mop(Not,bVar"b'11"),
                                      Mop(Not,bVar"b'10")))),
                          Let(Var("Ry",FTy 3),
                              Mop(Cast(FTy 3),
                                  LL[bVar"b'2",bVar"b'1",bVar"b'0"]),
                              Let(Var("Rx",FTy 3),
                                  Mop(Cast(FTy 3),
                                      LL[bVar"b'5",bVar"b'4",bVar"b'3"]),
                                  Let(Var("opc",F4),
                                      Mop(Cast F4,
                                          LL[bVar"b'9",bVar"b'8",
                                             bVar"b'7",bVar"b'6"]),
                                      TP[CS(Var("opc",F4),
                                            [(LW(0,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("Register",
                                                        CTy"Data",
                                                        TP[Var("opc",F4),
                                                           LT,Var("d",F4),
                                                           Var("d",F4),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(1,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("Register",
                                                        CTy"Data",
                                                        TP[Var("opc",F4),
                                                           LT,Var("d",F4),
                                                           Var("d",F4),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(5,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("Register",
                                                        CTy"Data",
                                                        TP[Var("opc",F4),
                                                           LT,Var("d",F4),
                                                           Var("d",F4),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(6,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("Register",
                                                        CTy"Data",
                                                        TP[Var("opc",F4),
                                                           LT,Var("d",F4),
                                                           Var("d",F4),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(12,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("Register",
                                                        CTy"Data",
                                                        TP[Var("opc",F4),
                                                           LT,Var("d",F4),
                                                           Var("d",F4),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(14,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("Register",
                                                        CTy"Data",
                                                        TP[Var("opc",F4),
                                                           LT,Var("d",F4),
                                                           Var("d",F4),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(2,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("ShiftRegister",
                                                        CTy"Data",
                                                        TP[Var("d",F4),
                                                           Var("d",F4),
                                                           Call
                                                             ("DecodeRegShift",
                                                              CTy"SRType",
                                                              Mop(Cast
                                                                    (FTy 2),
                                                                  Bop(Sub,
                                                                      Var("opc",
                                                                          F4),
                                                                      LW(2,
                                                                         4)))),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(3,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("ShiftRegister",
                                                        CTy"Data",
                                                        TP[Var("d",F4),
                                                           Var("d",F4),
                                                           Call
                                                             ("DecodeRegShift",
                                                              CTy"SRType",
                                                              Mop(Cast
                                                                    (FTy 2),
                                                                  Bop(Sub,
                                                                      Var("opc",
                                                                          F4),
                                                                      LW(2,
                                                                         4)))),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(4,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("ShiftRegister",
                                                        CTy"Data",
                                                        TP[Var("d",F4),
                                                           Var("d",F4),
                                                           Call
                                                             ("DecodeRegShift",
                                                              CTy"SRType",
                                                              Mop(Cast
                                                                    (FTy 2),
                                                                  Bop(Sub,
                                                                      Var("opc",
                                                                          F4),
                                                                      LW(2,
                                                                         4)))),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(7,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Data",
                                                     CTy"instruction",
                                                     Call
                                                       ("ShiftRegister",
                                                        CTy"Data",
                                                        TP[Var("d",F4),
                                                           Var("d",F4),
                                                           LC("SRType_ROR",
                                                              CTy"SRType"),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3))])))),
                                             (LW(8,4),
                                              Call
                                                ("Data",CTy"instruction",
                                                 Call
                                                   ("TestCompareRegister",
                                                    CTy"Data",
                                                    TP[EX(Var("opc",F4),
                                                          LN 1,LN 0,FTy 2),
                                                       Mop(Cast F4,
                                                           Var("Ry",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rx",FTy 3))]))),
                                             (LW(10,4),
                                              Call
                                                ("Data",CTy"instruction",
                                                 Call
                                                   ("TestCompareRegister",
                                                    CTy"Data",
                                                    TP[EX(Var("opc",F4),
                                                          LN 1,LN 0,FTy 2),
                                                       Mop(Cast F4,
                                                           Var("Ry",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rx",FTy 3))]))),
                                             (LW(11,4),
                                              Call
                                                ("Data",CTy"instruction",
                                                 Call
                                                   ("TestCompareRegister",
                                                    CTy"Data",
                                                    TP[EX(Var("opc",F4),
                                                          LN 1,LN 0,FTy 2),
                                                       Mop(Cast F4,
                                                           Var("Ry",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rx",FTy 3))]))),
                                             (LW(9,4),
                                              Call
                                                ("Data",CTy"instruction",
                                                 Call
                                                   ("ArithLogicImmediate",
                                                    CTy"Data",
                                                    TP[LW(3,4),LT,
                                                       Mop(Cast F4,
                                                           Var("Ry",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rx",FTy 3)),
                                                       LW(0,32)]))),
                                             (LW(13,4),
                                              Let(Var("d",F4),
                                                  Mop(Cast F4,
                                                      Var("Ry",FTy 3)),
                                                  Call
                                                    ("Multiply",
                                                     CTy"instruction",
                                                     Call
                                                       ("Multiply32",
                                                        CTy"Multiply",
                                                        TP[Var("d",F4),
                                                           Mop(Cast F4,
                                                               Var("Rx",
                                                                   FTy 3)),
                                                           Var("d",F4)])))),
                                             (LW(15,4),
                                              Call
                                                ("Data",CTy"instruction",
                                                 Call
                                                   ("ShiftImmediate",
                                                    CTy"Data",
                                                    TP[LT,LT,
                                                       Mop(Cast F4,
                                                           Var("Ry",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rx",FTy 3)),
                                                       LC("SRType_LSL",
                                                          CTy"SRType"),
                                                       LN 0])))]),
                                         qVar"state"])))),
                         (Bop(And,Mop(Not,bVar"b'13"),
                              Bop(And,Mop(Not,bVar"b'12"),
                                  Bop(And,Mop(Not,bVar"b'11"),
                                      Bop(And,bVar"b'10",
                                          Bop(And,Mop(Not,bVar"b'9"),
                                              Mop(Not,bVar"b'8")))))),
                          Let(Var("Rm",F4),
                              Mop(Cast F4,
                                  LL[bVar"b'6",bVar"b'5",bVar"b'4",
                                     bVar"b'3"]),
                              Let(Var("d",F4),
                                  CC[Mop(Cast F1,LL[bVar"b'7"]),
                                     Mop(Cast(FTy 3),
                                         LL[bVar"b'2",bVar"b'1",bVar"b'0"])],
                                  TP[Call
                                       ("Data",CTy"instruction",
                                        Call
                                          ("Register",CTy"Data",
                                           TP[LW(4,4),LF,Var("d",F4),
                                              Var("d",F4),Var("Rm",F4)])),
                                     ITE(Bop(And,EQ(Var("d",F4),LW(15,4)),
                                             EQ(Var("Rm",F4),LW(15,4))),
                                         Apply
                                           (Call
                                              ("DECODE_UNPREDICTABLE",
                                               ATy(qTy,qTy),
                                               TP[Var("mc",
                                                      CTy"MachineCode"),
                                                  LS"ADD"]),qVar"state"),
                                         qVar"state")]))),
                         (Bop(And,Mop(Not,bVar"b'13"),
                              Bop(And,Mop(Not,bVar"b'12"),
                                  Bop(And,Mop(Not,bVar"b'11"),
                                      Bop(And,bVar"b'10",
                                          Bop(And,Mop(Not,bVar"b'9"),
                                              bVar"b'8"))))),
                          Let(Var("Rm",F4),
                              Mop(Cast F4,
                                  LL[bVar"b'6",bVar"b'5",bVar"b'4",
                                     bVar"b'3"]),
                              Let(Var("n",F4),
                                  CC[Mop(Cast F1,LL[bVar"b'7"]),
                                     Mop(Cast(FTy 3),
                                         LL[bVar"b'2",bVar"b'1",bVar"b'0"])],
                                  TP[Call
                                       ("Data",CTy"instruction",
                                        Call
                                          ("TestCompareRegister",
                                           CTy"Data",
                                           TP[LW(2,2),Var("n",F4),
                                              Var("Rm",F4)])),
                                     ITE(Bop(Or,
                                             Bop(And,
                                                 Bop(Ult,Var("n",F4),
                                                     LW(8,4)),
                                                 Bop(Ult,Var("Rm",F4),
                                                     LW(8,4))),
                                             Bop(Or,
                                                 EQ(Var("n",F4),LW(15,4)),
                                                 EQ(Var("Rm",F4),LW(15,4)))),
                                         Apply
                                           (Call
                                              ("DECODE_UNPREDICTABLE",
                                               ATy(qTy,qTy),
                                               TP[Var("mc",
                                                      CTy"MachineCode"),
                                                  LS"CMP"]),qVar"state"),
                                         qVar"state")]))),
                         (Bop(And,Mop(Not,bVar"b'13"),
                              Bop(And,Mop(Not,bVar"b'12"),
                                  Bop(And,Mop(Not,bVar"b'11"),
                                      Bop(And,bVar"b'10",
                                          Bop(And,bVar"b'9",
                                              Mop(Not,bVar"b'8")))))),
                          TP[Call
                               ("Data",CTy"instruction",
                                Call
                                  ("ShiftImmediate",CTy"Data",
                                   TP[LF,LF,
                                      CC[Mop(Cast F1,LL[bVar"b'7"]),
                                         Mop(Cast(FTy 3),
                                             LL[bVar"b'2",bVar"b'1",
                                                bVar"b'0"])],
                                      Mop(Cast F4,
                                          LL[bVar"b'6",bVar"b'5",
                                             bVar"b'4",bVar"b'3"]),
                                      LC("SRType_LSL",CTy"SRType"),LN 0])),
                             qVar"state"]),
                         (Bop(And,Mop(Not,bVar"b'13"),
                              Bop(And,Mop(Not,bVar"b'12"),
                                  Bop(And,Mop(Not,bVar"b'11"),
                                      Bop(And,bVar"b'10",
                                          Bop(And,bVar"b'9",
                                              Bop(And,bVar"b'8",
                                                  Mop(Not,bVar"b'7"))))))),
                          TP[Call
                               ("Branch",CTy"instruction",
                                Call
                                  ("BranchExchange",CTy"Branch",
                                   Mop(Cast F4,
                                       LL[bVar"b'6",bVar"b'5",bVar"b'4",
                                          bVar"b'3"]))),qVar"state"]),
                         (Bop(And,Mop(Not,bVar"b'13"),
                              Bop(And,Mop(Not,bVar"b'12"),
                                  Bop(And,Mop(Not,bVar"b'11"),
                                      Bop(And,bVar"b'10",
                                          Bop(And,bVar"b'9",
                                              Bop(And,bVar"b'8",bVar"b'7")))))),
                          TP[Call
                               ("Branch",CTy"instruction",
                                Call
                                  ("BranchLinkExchangeRegister",
                                   CTy"Branch",
                                   Mop(Cast F4,
                                       LL[bVar"b'6",bVar"b'5",bVar"b'4",
                                          bVar"b'3"]))),qVar"state"]),
                         (Bop(And,Mop(Not,bVar"b'13"),
                              Bop(And,Mop(Not,bVar"b'12"),bVar"b'11")),
                          TP[Call
                               ("Load",CTy"instruction",
                                Call
                                  ("LoadLiteral",CTy"Load",
                                   TP[Mop(Cast F4,
                                          Mop(Cast(FTy 3),
                                              LL[bVar"b'10",bVar"b'9",
                                                 bVar"b'8"])),
                                      Mop(Cast F32,
                                          CC[Mop(Cast F8,
                                                 LL[bVar"b'7",bVar"b'6",
                                                    bVar"b'5",bVar"b'4",
                                                    bVar"b'3",bVar"b'2",
                                                    bVar"b'1",bVar"b'0"]),
                                             LW(0,2)])])),qVar"state"]),
                         (Bop(And,Mop(Not,bVar"b'13"),bVar"b'12"),
                          Let(Var("Rt",FTy 3),
                              Mop(Cast(FTy 3),
                                  LL[bVar"b'2",bVar"b'1",bVar"b'0"]),
                              Let(Var("Rn",FTy 3),
                                  Mop(Cast(FTy 3),
                                      LL[bVar"b'5",bVar"b'4",bVar"b'3"]),
                                  TP[Let(Var("m",CTy"offset"),
                                         Call
                                           ("register_form",CTy"offset",
                                            Mop(Cast F4,
                                                Mop(Cast(FTy 3),
                                                    LL[bVar"b'8",
                                                       bVar"b'7",bVar"b'6"]))),
                                         CS(Mop(Cast(FTy 3),
                                                LL[bVar"b'11",bVar"b'10",
                                                   bVar"b'9"]),
                                            [(LW(0,3),
                                              Call
                                                ("Store",CTy"instruction",
                                                 Call
                                                   ("StoreWord",
                                                    CTy"Store",
                                                    TP[Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")]))),
                                             (LW(1,3),
                                              Call
                                                ("Store",CTy"instruction",
                                                 Call
                                                   ("StoreHalf",
                                                    CTy"Store",
                                                    TP[Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")]))),
                                             (LW(2,3),
                                              Call
                                                ("Store",CTy"instruction",
                                                 Call
                                                   ("StoreByte",
                                                    CTy"Store",
                                                    TP[Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")]))),
                                             (LW(3,3),
                                              Call
                                                ("Load",CTy"instruction",
                                                 Call
                                                   ("LoadByte",CTy"Load",
                                                    TP[LF,
                                                       Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")]))),
                                             (LW(4,3),
                                              Call
                                                ("Load",CTy"instruction",
                                                 Call
                                                   ("LoadWord",CTy"Load",
                                                    TP[Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")]))),
                                             (LW(5,3),
                                              Call
                                                ("Load",CTy"instruction",
                                                 Call
                                                   ("LoadHalf",CTy"Load",
                                                    TP[LT,
                                                       Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")]))),
                                             (LW(6,3),
                                              Call
                                                ("Load",CTy"instruction",
                                                 Call
                                                   ("LoadByte",CTy"Load",
                                                    TP[LT,
                                                       Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")]))),
                                             (LW(7,3),
                                              Call
                                                ("Load",CTy"instruction",
                                                 Call
                                                   ("LoadHalf",CTy"Load",
                                                    TP[LF,
                                                       Mop(Cast F4,
                                                           Var("Rt",FTy 3)),
                                                       Mop(Cast F4,
                                                           Var("Rn",FTy 3)),
                                                       Var("m",CTy"offset")])))])),
                                     qVar"state"]))),
                         (Bop(And,bVar"b'13",Mop(Not,bVar"b'12")),
                          Let(Var("Rt",FTy 3),
                              Mop(Cast(FTy 3),
                                  LL[bVar"b'2",bVar"b'1",bVar"b'0"]),
                              Let(Var("Rn",FTy 3),
                                  Mop(Cast(FTy 3),
                                      LL[bVar"b'5",bVar"b'4",bVar"b'3"]),
                                  TP[Let(Var("m",CTy"offset"),
                                         Call
                                           ("immediate_form",CTy"offset",
                                            Mop(Cast F32,
                                                CC[Mop(Cast(FTy 5),
                                                       LL[bVar"b'10",
                                                          bVar"b'9",
                                                          bVar"b'8",
                                                          bVar"b'7",
                                                          bVar"b'6"]),
                                                   LW(0,2)])),
                                         ITE(EQ(Mop(Cast F1,LL[bVar"b'11"]),
                                                LW(1,1)),
                                             Call
                                               ("Load",CTy"instruction",
                                                Call
                                                  ("LoadWord",CTy"Load",
                                                   TP[Mop(Cast F4,
                                                          Var("Rt",FTy 3)),
                                                      Mop(Cast F4,
                                                          Var("Rn",FTy 3)),
                                                      Var("m",CTy"offset")])),
                                             Call
                                               ("Store",CTy"instruction",
                                                Call
                                                  ("StoreWord",CTy"Store",
                                                   TP[Mop(Cast F4,
                                                          Var("Rt",FTy 3)),
                                                      Mop(Cast F4,
                                                          Var("Rn",FTy 3)),
                                                      Var("m",CTy"offset")])))),
                                     qVar"state"]))),
                         (Bop(And,bVar"b'13",bVar"b'12"),
                          Let(Var("Rt",FTy 3),
                              Mop(Cast(FTy 3),
                                  LL[bVar"b'2",bVar"b'1",bVar"b'0"]),
                              Let(Var("Rn",FTy 3),
                                  Mop(Cast(FTy 3),
                                      LL[bVar"b'5",bVar"b'4",bVar"b'3"]),
                                  TP[Let(Var("m",CTy"offset"),
                                         Call
                                           ("immediate_form",CTy"offset",
                                            Mop(Cast F32,
                                                Mop(Cast(FTy 5),
                                                    LL[bVar"b'10",
                                                       bVar"b'9",
                                                       bVar"b'8",
                                                       bVar"b'7",bVar"b'6"]))),
                                         ITE(EQ(Mop(Cast F1,LL[bVar"b'11"]),
                                                LW(1,1)),
                                             Call
                                               ("Load",CTy"instruction",
                                                Call
                                                  ("LoadByte",CTy"Load",
                                                   TP[LT,
                                                      Mop(Cast F4,
                                                          Var("Rt",FTy 3)),
                                                      Mop(Cast F4,
                                                          Var("Rn",FTy 3)),
                                                      Var("m",CTy"offset")])),
                                             Call
                                               ("Store",CTy"instruction",
                                                Call
                                                  ("StoreByte",CTy"Store",
                                                   TP[Mop(Cast F4,
                                                          Var("Rt",FTy 3)),
                                                      Mop(Cast F4,
                                                          Var("Rn",FTy 3)),
                                                      Var("m",CTy"offset")])))),
                                     qVar"state"])))],
                        TP[Call("Undefined",CTy"instruction",LW(0,32)),
                           qVar"state"]))],
                  TP[ITB([(Bop(And,Mop(Not,bVar"b'13"),
                               Bop(And,bVar"b'12",
                                   Bop(And,bVar"b'11",Mop(Not,bVar"b'10")))),
                           Call
                             ("Data",CTy"instruction",
                              Call
                                ("Register",CTy"Data",
                                 TP[ITE(EQ(Mop(Cast F1,LL[bVar"b'9"]),
                                           LW(1,1)),LW(2,4),LW(4,4)),LT,
                                    Mop(Cast F4,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'2",bVar"b'1",
                                               bVar"b'0"])),
                                    Mop(Cast F4,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'5",bVar"b'4",
                                               bVar"b'3"])),
                                    Mop(Cast F4,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'8",bVar"b'7",
                                               bVar"b'6"]))]))),
                          (Bop(And,Mop(Not,bVar"b'13"),
                               Bop(And,bVar"b'12",
                                   Bop(And,bVar"b'11",bVar"b'10"))),
                           Call
                             ("Data",CTy"instruction",
                              Call
                                ("ArithLogicImmediate",CTy"Data",
                                 TP[ITE(EQ(Mop(Cast F1,LL[bVar"b'9"]),
                                           LW(1,1)),LW(2,4),LW(4,4)),LT,
                                    Mop(Cast F4,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'2",bVar"b'1",
                                               bVar"b'0"])),
                                    Mop(Cast F4,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'5",bVar"b'4",
                                               bVar"b'3"])),
                                    Mop(Cast F32,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'8",bVar"b'7",
                                               bVar"b'6"]))]))),
                          (Mop(Not,bVar"b'13"),
                           Let(TP[Var("shift_t",CTy"SRType"),nVar"shift_n"],
                               Call
                                 ("DecodeImmShift",PTy(CTy"SRType",nTy),
                                  TP[Mop(Cast(FTy 2),
                                         LL[bVar"b'12",bVar"b'11"]),
                                     Mop(Cast(FTy 5),
                                         LL[bVar"b'10",bVar"b'9",
                                            bVar"b'8",bVar"b'7",bVar"b'6"])]),
                               Call
                                 ("Data",CTy"instruction",
                                  Call
                                    ("ShiftImmediate",CTy"Data",
                                     TP[LF,LT,
                                        Mop(Cast F4,
                                            Mop(Cast(FTy 3),
                                                LL[bVar"b'2",bVar"b'1",
                                                   bVar"b'0"])),
                                        Mop(Cast F4,
                                            Mop(Cast(FTy 3),
                                                LL[bVar"b'5",bVar"b'4",
                                                   bVar"b'3"])),
                                        Var("shift_t",CTy"SRType"),
                                        nVar"shift_n"])))),
                          (Bop(And,bVar"b'13",
                               Bop(And,Mop(Not,bVar"b'12"),
                                   Mop(Not,bVar"b'11"))),
                           Call
                             ("Data",CTy"instruction",
                              Call
                                ("Move",CTy"Data",
                                 TP[Mop(Cast F4,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'10",bVar"b'9",
                                               bVar"b'8"])),
                                    Mop(Cast F32,
                                        Mop(Cast F8,
                                            LL[bVar"b'7",bVar"b'6",
                                               bVar"b'5",bVar"b'4",
                                               bVar"b'3",bVar"b'2",
                                               bVar"b'1",bVar"b'0"]))]))),
                          (Bop(And,bVar"b'13",
                               Bop(And,Mop(Not,bVar"b'12"),bVar"b'11")),
                           Call
                             ("Data",CTy"instruction",
                              Call
                                ("CompareImmediate",CTy"Data",
                                 TP[Mop(Cast F4,
                                        Mop(Cast(FTy 3),
                                            LL[bVar"b'10",bVar"b'9",
                                               bVar"b'8"])),
                                    Mop(Cast F32,
                                        Mop(Cast F8,
                                            LL[bVar"b'7",bVar"b'6",
                                               bVar"b'5",bVar"b'4",
                                               bVar"b'3",bVar"b'2",
                                               bVar"b'1",bVar"b'0"]))]))),
                          (Bop(And,bVar"b'13",bVar"b'12"),
                           Let(Var("d",F4),
                               Mop(Cast F4,
                                   Mop(Cast(FTy 3),
                                       LL[bVar"b'10",bVar"b'9",bVar"b'8"])),
                               Call
                                 ("Data",CTy"instruction",
                                  Call
                                    ("ArithLogicImmediate",CTy"Data",
                                     TP[ITE(EQ(Mop(Cast F1,LL[bVar"b'11"]),
                                               LW(1,1)),LW(2,4),LW(4,4)),
                                        LT,Var("d",F4),Var("d",F4),
                                        Mop(Cast F32,
                                            Mop(Cast F8,
                                                LL[bVar"b'7",bVar"b'6",
                                                   bVar"b'5",bVar"b'4",
                                                   bVar"b'3",bVar"b'2",
                                                   bVar"b'1",bVar"b'0"]))]))))],
                         Call("Undefined",CTy"instruction",LW(0,32))),
                     qVar"state"])))))
;
val DecodeThumb2_def = Def
  ("DecodeThumb2",Var("h",PTy(F16,F16)),
   Close
     (qVar"state",
      Let(Var("mc",CTy"MachineCode"),
          Call("Thumb2",CTy"MachineCode",Var("h",PTy(F16,F16))),
          Let(TP[TP[bVar"b'31",bVar"b'30",bVar"b'29",bVar"b'28",
                    bVar"b'27",bVar"b'26",bVar"b'25",bVar"b'24",
                    bVar"b'23",bVar"b'22",bVar"b'21",bVar"b'20",
                    bVar"b'19",bVar"b'18",bVar"b'17",bVar"b'16"],
                 bVar"b'15",bVar"b'14",bVar"b'13",bVar"b'12",bVar"b'11",
                 bVar"b'10",bVar"b'9",bVar"b'8",bVar"b'7",bVar"b'6",
                 bVar"b'5",bVar"b'4",bVar"b'3",bVar"b'2",bVar"b'1",
                 bVar"b'0"],
              TP[BL(16,Mop(Fst,Var("h",PTy(F16,F16)))),
                 BL(16,Mop(Snd,Var("h",PTy(F16,F16))))],
              ITE(Bop(And,bVar"b'31",
                      Bop(And,bVar"b'30",
                          Bop(And,bVar"b'29",
                              Bop(And,bVar"b'28",
                                  Bop(And,Mop(Not,bVar"b'27"),bVar"b'15"))))),
                  ITB([(Bop(And,Mop(Not,bVar"b'26"),
                            Bop(And,bVar"b'25",
                                Bop(And,bVar"b'24",
                                    Bop(And,bVar"b'23",
                                        Bop(And,Mop(Not,bVar"b'22"),
                                            Bop(And,Mop(Not,bVar"b'21"),
                                                Bop(And,
                                                    Mop(Not,bVar"b'14"),
                                                    Mop(Not,bVar"b'12")))))))),
                        Let(Var("Rn",F4),
                            Mop(Cast F4,
                                LL[bVar"b'19",bVar"b'18",bVar"b'17",
                                   bVar"b'16"]),
                            Let(Var("SYSm",F8),
                                Mop(Cast F8,
                                    LL[bVar"b'7",bVar"b'6",bVar"b'5",
                                       bVar"b'4",bVar"b'3",bVar"b'2",
                                       bVar"b'1",bVar"b'0"]),
                                TP[Call
                                     ("System",CTy"instruction",
                                      Call
                                        ("MoveToSpecialRegister",
                                         CTy"System",
                                         TP[Var("SYSm",F8),Var("Rn",F4)])),
                                   ITE(Bop(Or,
                                           Bop(In,Var("Rn",F4),
                                               SL[LW(13,4),LW(15,4)]),
                                           Mop(Not,
                                               Bop(In,Var("SYSm",F8),
                                                   SL[LW(0,8),LW(1,8),
                                                      LW(2,8),LW(3,8),
                                                      LW(5,8),LW(6,8),
                                                      LW(7,8),LW(8,8),
                                                      LW(9,8),LW(16,8),
                                                      LW(17,8),LW(18,8),
                                                      LW(19,8),LW(20,8)]))),
                                       Apply
                                         (Call
                                            ("DECODE_UNPREDICTABLE",
                                             ATy(qTy,qTy),
                                             TP[Var("mc",CTy"MachineCode"),
                                                LS"MoveToSpecialRegister"]),
                                          qVar"state"),qVar"state")]))),
                       (Bop(And,Mop(Not,bVar"b'26"),
                            Bop(And,bVar"b'25",
                                Bop(And,bVar"b'24",
                                    Bop(And,bVar"b'23",
                                        Bop(And,Mop(Not,bVar"b'22"),
                                            Bop(And,bVar"b'21",
                                                Bop(And,bVar"b'20",
                                                    Bop(And,
                                                        Mop(Not,bVar"b'14"),
                                                        Mop(Not,bVar"b'12"))))))))),
                        Let(Var("option",F4),
                            Mop(Cast F4,
                                LL[bVar"b'3",bVar"b'2",bVar"b'1",bVar"b'0"]),
                            TP[CS(Mop(Cast F4,
                                      LL[bVar"b'7",bVar"b'6",bVar"b'5",
                                         bVar"b'4"]),
                                  [(LW(4,4),
                                    Call
                                      ("Hint",CTy"instruction",
                                       Call
                                         ("DataSynchronizationBarrier",
                                          CTy"Hint",Var("option",F4)))),
                                   (LW(5,4),
                                    Call
                                      ("Hint",CTy"instruction",
                                       Call
                                         ("DataMemoryBarrier",CTy"Hint",
                                          Var("option",F4)))),
                                   (LW(6,4),
                                    Call
                                      ("Hint",CTy"instruction",
                                       Call
                                         ("InstructionSynchronizationBarrier",
                                          CTy"Hint",Var("option",F4)))),
                                   (AVar F4,
                                    Call
                                      ("Undefined",CTy"instruction",
                                       LW(0,32)))]),qVar"state"])),
                       (Bop(And,Mop(Not,bVar"b'26"),
                            Bop(And,bVar"b'25",
                                Bop(And,bVar"b'24",
                                    Bop(And,bVar"b'23",
                                        Bop(And,bVar"b'22",
                                            Bop(And,bVar"b'21",
                                                Bop(And,
                                                    Mop(Not,bVar"b'14"),
                                                    Mop(Not,bVar"b'12")))))))),
                        Let(Var("SYSm",F8),
                            Mop(Cast F8,
                                LL[bVar"b'7",bVar"b'6",bVar"b'5",
                                   bVar"b'4",bVar"b'3",bVar"b'2",
                                   bVar"b'1",bVar"b'0"]),
                            Let(Var("Rd",F4),
                                Mop(Cast F4,
                                    LL[bVar"b'11",bVar"b'10",bVar"b'9",
                                       bVar"b'8"]),
                                TP[Call
                                     ("System",CTy"instruction",
                                      Call
                                        ("MoveToRegisterFromSpecial",
                                         CTy"System",
                                         TP[Var("SYSm",F8),Var("Rd",F4)])),
                                   ITE(Bop(Or,
                                           Bop(In,Var("Rd",F4),
                                               SL[LW(13,4),LW(15,4)]),
                                           Mop(Not,
                                               Bop(In,Var("SYSm",F8),
                                                   SL[LW(0,8),LW(1,8),
                                                      LW(2,8),LW(3,8),
                                                      LW(5,8),LW(6,8),
                                                      LW(7,8),LW(8,8),
                                                      LW(9,8),LW(16,8),
                                                      LW(17,8),LW(18,8),
                                                      LW(19,8),LW(20,8)]))),
                                       Apply
                                         (Call
                                            ("DECODE_UNPREDICTABLE",
                                             ATy(qTy,qTy),
                                             TP[Var("mc",CTy"MachineCode"),
                                                LS
                                                 "MoveToRegisterFromSpecial"]),
                                          qVar"state"),qVar"state")]))),
                       (Bop(And,bVar"b'26",
                            Bop(And,bVar"b'25",
                                Bop(And,bVar"b'24",
                                    Bop(And,bVar"b'23",
                                        Bop(And,bVar"b'22",
                                            Bop(And,bVar"b'21",
                                                Bop(And,bVar"b'20",
                                                    Bop(And,
                                                        Mop(Not,bVar"b'14"),
                                                        Bop(And,
                                                            bVar"b'13",
                                                            Mop(Not,
                                                                bVar"b'12")))))))))),
                        TP[Call
                             ("Undefined",CTy"instruction",
                              Mop(Cast F32,
                                  CC[Mop(Cast F4,
                                         LL[bVar"b'19",bVar"b'18",
                                            bVar"b'17",bVar"b'16"]),
                                     Mop(Cast(FTy 12),
                                         LL[bVar"b'11",bVar"b'10",
                                            bVar"b'9",bVar"b'8",bVar"b'7",
                                            bVar"b'6",bVar"b'5",bVar"b'4",
                                            bVar"b'3",bVar"b'2",bVar"b'1",
                                            bVar"b'0"])])),qVar"state"]),
                       (Bop(And,bVar"b'14",bVar"b'12"),
                        Let(Var("S",F1),Mop(Cast F1,LL[bVar"b'26"]),
                            TP[Call
                                 ("Branch",CTy"instruction",
                                  Call
                                    ("BranchLinkImmediate",CTy"Branch",
                                     Mop(SE F32,
                                         CC[Var("S",F1),
                                            Mop(BNot,
                                                Bop(BXor,
                                                    Mop(Cast F1,
                                                        LL[bVar"b'13"]),
                                                    Var("S",F1))),
                                            Mop(BNot,
                                                Bop(BXor,
                                                    Mop(Cast F1,
                                                        LL[bVar"b'11"]),
                                                    Var("S",F1))),
                                            Mop(Cast(FTy 10),
                                                LL[bVar"b'25",bVar"b'24",
                                                   bVar"b'23",bVar"b'22",
                                                   bVar"b'21",bVar"b'20",
                                                   bVar"b'19",bVar"b'18",
                                                   bVar"b'17",bVar"b'16"]),
                                            Mop(Cast(FTy 11),
                                                LL[bVar"b'10",bVar"b'9",
                                                   bVar"b'8",bVar"b'7",
                                                   bVar"b'6",bVar"b'5",
                                                   bVar"b'4",bVar"b'3",
                                                   bVar"b'2",bVar"b'1",
                                                   bVar"b'0"]),LW(0,1)]))),
                               qVar"state"]))],
                      TP[Call("Undefined",CTy"instruction",LW(0,32)),
                         qVar"state"]),
                  TP[Call("Undefined",CTy"instruction",LW(0,32)),
                     qVar"state"])))))
;
val Decode_def = Def
  ("Decode",Var("mc",CTy"MachineCode"),
   Close
     (qVar"state",
      CS(Var("mc",CTy"MachineCode"),
         [(Call("Thumb",CTy"MachineCode",Var("h",F16)),
           Apply
             (Call
                ("DecodeThumb",ATy(qTy,PTy(CTy"instruction",qTy)),
                 Var("h",F16)),Rupd("pcinc",TP[qVar"state",LW(2,32)]))),
          (Call("Thumb2",CTy"MachineCode",Var("hs",PTy(F16,F16))),
           Apply
             (Call
                ("DecodeThumb2",ATy(qTy,PTy(CTy"instruction",qTy)),
                 Var("hs",PTy(F16,F16))),
              Rupd("pcinc",TP[qVar"state",LW(4,32)])))])))
;
val Next_def = Def
  ("Next",qVar"state",
   Let(TP[Var("v",CTy"MachineCode"),qVar"s"],
       Apply
         (Const("Fetch",ATy(qTy,PTy(CTy"MachineCode",qTy))),qVar"state"),
       Let(TP[Var("v",CTy"instruction"),qVar"s"],
           Apply
             (Call
                ("Decode",ATy(qTy,PTy(CTy"instruction",qTy)),
                 Var("v",CTy"MachineCode")),qVar"s"),
           Apply
             (Call("Run",ATy(qTy,qTy),Var("v",CTy"instruction")),qVar"s"))))

val () = Import.finish 0