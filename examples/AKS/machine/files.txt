(* ------------------------------------------------------------------------- *)
(* Hierarchy of AKS Machine Library                                          *)
(*                                                                           *)
(* Author: Joseph Chan                                                       *)
(* Date: December, 2016                                                      *)
(* ------------------------------------------------------------------------- *)

0 countMonad -- a monad keeping track of computational values and counts.
* pair
* option
* errorStateMonad

1 countMacro -- macro operations as subroutines in monadic style.
* bitsize
* complexity
* loopIncrease
* loopDecrease
* loopDivide
* loopMultiply
* loopList
* 0 countMonad

2 countBasic -- basic arithmetic functions in monadic style.
* logroot
* logPower
* bitsize
* complexity
* loopIncrease
* loopDecrease
* loopDivide
* loopMultiply
* 0 countMonad
* 1 countMacro

2 countModulo -- modulo arithmetic in monadic style.
* bitsize
* complexity
* loopIncrease
* loopDecrease
* loopDivide
* loopMultiply
* 0 countMonad
* 1 countMacro

3 countPower -- exponentiation, root extraction and power free test.
* bitsize
* complexity
* loopIncrease
* loopDecrease
* loopDivide
* 0 countMonad
* 1 countMacro
* 2 countBasic

3 countOrder -- modular exponentiation and multiplicative order.
* ringInstances
* bitsize
* complexity
* loopIncrease
* loopDecrease
* 0 countMonad
* 1 countMacro
* 2 countModulo

3 countPoly -- polynomial algorithms for AKS algorithm.
* bitsize
* complexity
* loopIncrease
* loopDecrease
* loopDivide
* loopList
* 0 countMonad
* 1 countMacro
* 2 countModulo

4 countPrime -- traditional primality testing algorithm.
* bitsize
* complexity
* loopIncrease
* primes
* 0 countMonad
* 1 countMacro
* 2 countBasic
* 3 countPower

4 countParam -- parameter search for AKS algorithm.
* bitsize
* complexity
* loopIncrease
* loopDecrease
* 0 countMonad
* 1 countMacro
* 2 countBasic
* 3 countPower
* 3 countOrder

5 countAKS -- combine with polynomial checks for AKS algorithm.
* bitsize
* complexity
* loopIncrease
* loopDecrease
* 0 countMonad
* 1 countMacro
* 2 countBasic
* 3 countPower
* 3 countOrder
* 3 countPoly
* 4 countParam
