 ############################################################################
 # GRAMMAR FOR NATURAL PROOF EXPRESSIONS                                    #
 #                                                                          #
 # Refer to SEMPRE's documentation for general indications on rule          #
 # construction.                                                            #
 #                                                                          #
 # Currently, domain knowledge comes from two sources. The lassie.lexicon   #
 # file contains component names (e.g. fs) and with their types             #
 # (e.g. thmlist->tactic, used for sound applications). Features of those   #
 # components (e.g. their natural name, their class/type) are read from     #
 # lassie.db into the TacticWorld.                                          #
 #                                                                          #
 # TacticWorld.java holds the main semantics of Lassie's operations, as     #
 # we piggy back on the DALExecutor for handling the semantic part of       #
 # this grammar. DALExecutor interprets semantic expression in a "world"    #
 # containing "items". We superifcially follow this convention where HOL    #
 # components can be considered the "items" of our "tactic-world".          #
 #                                                                          #
 # Generally, lowercased categories (e.g. $thm, $name) correspond to        #
 # types as found in the lexicon/database. Categories which are             #
 # capitalized are intermediates between lowercased categories and the      #
 # $tactic category.                                                        #
 ############################################################################

###########################################
#           Incorporated SML types:       #
###########################################
# $tactic
# $thm
# ($thmlist)
# $thm->tactic
# $thmlist->tactic
# $tactic->tactic
# $thm->thm
# $termquotation->tactic
# $int->tactic->tactic
# $termquotation->[thm->tactic]->tactic
# $[thm->tactic]->tactic
# $termquotation*tactic->tactic
# $termquotationlist->tactic
# $termquotation->[thm->tactic]->thm->tactic
# $termquotationlist->[thm->tactic]->thm->tactic

 ################################################################
 # Define some abbreviations for calling into library functions #
 ################################################################
(def @int2string edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.int2string)
(def @app edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.app)
(def @intgoal edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.goalInt)
(def @termgoal edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.goalTerm)
(def @infix edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.infix)
(def @then edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.then)
(def @then1 edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.then1)
(def @cons edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.cons)
(def @list edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.list)
(def @quote edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.quote)
(def @parens edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.parens)
(def @op edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.op)
(def @fromFeature edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.fromFeature)
(def @intersect edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.intersect)
(def @set2string edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.set2string)
(def @choice edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.choice)
(def @tactic edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.tactic)
(def @mark edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.mark)
(def @command edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.command)
(def @thm edu.stanford.nlp.sempre.interactive.lassie.TacticWorld.thm)

(def @ChoiceFn edu.stanford.nlp.sempre.interactive.lassie.ChoiceFn)

(def @appT1T2 (lambda t1 (lambda t2 (call @app (var t1) (var t2)))))
(def @infixT1T2T3 (lambda t1 (lambda t2 (lambda t3 (call @op (var t2) (var t1) (var t3))))))

###################################
# GRAMMAR SUPPORTING LITERAL HOL4 #
###################################

(rule $ROOT ($tactic) (IdentityFn) (anchored 1))
(rule $ROOT ($command) (IdentityFn) (anchored 1))

(rule $command
      (back)
      (ConstantFn (string "back")) (anchored 1))

## We can put parentheses around a tactic or a command (Missing: $ROOT $command )
(for @cat ($tactic $thm->tactic)
  (rule @cat (\( @cat \)) (lambda t (call @parens (var t))) (anchored 1)))

###############################################################################
# literal HOL4 tactics, tacticals, ...                                        #
# looked up in the Lassie database                                            #
###############################################################################
# tactics
(rule $tactic
      ($TOKEN)
      (SimpleLexiconFn (type "tactic"))
      (anchored 1))

# tactic modifiers
(rule $tactic->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "tactic->tactic")) (anchored 1))

# thm tactics
(rule $thm->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "thm->tactic") (anchored 1)))

# thm list tactics:
(rule $thmlist->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "thmlist->tactic") (anchored 1)))

# term tactics
(rule $termquotation->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "termquotation->tactic") (anchored 1)))

# first_x_assum, last_x_assum, ...
(rule $[thm->tactic]->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "[thm->tactic]->tactic") (anchored 1)))

# qspec
(rule $termquotation->[thm->tactic]->thm->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "termquotation->[thm->tactic]->thm->tactic") (anchored 1)))

# qspecl
(rule $termquotationlist->[thm->tactic]->thm->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "termquotationlist->[thm->tactic]->thm->tactic") (anchored 1)))

# qpat_x_assum, qpat_assum, ...
(rule $termquotation->[thm->tactic]->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "termquotation->[thm->tactic]->tactic")) (anchored 1))

# THEN, ORELSE
(rule $tactic->tactic->tactic
  ($TOKEN)
  (SimpleLexiconFn (type "tactic->tactic->tactic") (anchored 1)))

#by, suffices_by
(rule $termquotation*tactic->tactic
      ($TOKEN)
      (SimpleLexiconFn (type "termquotation*tactic->tactic")) (anchored 1))

(rule $thm->thm
  ($TOKEN)
  (SimpleLexiconFn (type "thm->thm")) (anchored 1))

# Tactics can be produced by combining different constructs
(for @category
     (($tactic->tactic $tactic)
      ($thm->tactic $thm)
      ($thmlist->tactic $thmlist)
      ($termquotation->tactic $termquotation)
      ($[thm->tactic]->tactic $thm->tactic))
     (rule $tactic @category @appT1T2 (anchored 1)))

(rule $tactic
  ($termquotation $termquotation*tactic->tactic $tactic)
  @infixT1T2T3 (anchored 1))

## Partial applications for things like qpat_x_assum or first_x_assum
(rule $[thm->tactic]->tactic
  ($termquotation->[thm->tactic]->tactic $termquotation) @appT1T2 (anchored 1))
(rule $[thm->tactic]->thm->tactic
  ($termquotation->[thm->tactic]->thm->tactic $termquotation) @appT1T2 (anchored 1))
(rule $[thm->tactic]->thm->tactic
  ($termquotationlist->[thm->tactic]->thm->tactic $termquotationlist) @appT1T2 (anchored 1))
(rule $thm->tactic ($[thm->tactic]->thm->tactic $thm->tactic) @appT1T2 (anchored 1))

## Support for inline THEN
(rule $tactic ($tactic $tactic->tactic->tactic $tactic) @infixT1T2T3 (anchored 1))

### HOL4 Theorems
(rule $thm ($TOKEN) (lambda t (call @thm (var t))) (anchored 1))
(rule $thm ($thm->thm $thm) @appT1T2 (anchored 1))
(rule $Thms ($thm) (IdentityFn) (anchored 1))
(rule $Thms ($thm , $Thms) (lambda t1 (lambda t2 (call @cons (var t1) (var t2)))) (anchored 1))
(rule $thmlist ([ $Thms ]) (lambda thms (call @list (var thms))) (anchored 1))
(rule $thmlist ([]) (ConstantFn (call @list (string " "))) (anchored 1))
(rule $thmlist ([ ]) (ConstantFn (call @list (string " "))) (anchored 1))

##### HOL4 Terms
(rule $termquotation (` $term ') (lambda e (call @quote (var e))) (anchored 1))
(rule $termquotation (` $term `) (lambda e (call @quote (var e))) (anchored 1))
(rule $term ($PHRASE) (IdentityFn) (anchored 1))
(rule $term ($term and $term) (lambda t1 (lambda t2 (call @op (string "∧") (var t1) (var t2)))) (anchored 1))
(rule $term ($term or $term) (lambda t1 (lambda t2 (call @op (string "∨") (var t1) (var t2)))) (anchored 1))

(rule $Terms ($termquotation) (IdentityFn) (anchored 1))
(rule $Terms ($termquotation , $Terms) (lambda t1 (lambda t2 (call @cons (var t1) (var t2)))) (anchored 1))
(rule $termquotationlist ([ $Terms ]) (lambda termquotations (call @list (var termquotations))) (anchored 1))
(rule $termquotationlist ([ ]) (ConstantFn (call @list (string " "))) (anchored 1))
(rule $termquotationlist ([]) (ConstantFn (call @list (string " "))) (anchored 1))

(rule $tactic (Goal $int) (lambda n (call @intgoal (var n))) (anchored 1))
(rule $tactic (Goal $termquotation) (lambda t (call @termgoal (var t))) (anchored 1))
(rule $tactic (End) (ConstantFn (string "ALLGOALS")) (anchored 1))

### Other
(rule $Number ($TOKEN) (NumberFn) (anchored 1))
(rule $int ($Number) (lambda n (call @int2string (var n))) (anchored 1))

## tactic combinators
#(rule $tactic->tactic->tactic
#  ($TOKEN)
#  (SimpleLexiconFn (type "tactic->tactic->tactic") (anchored 1)))
## ntac
#(rule $int->tactic->tactic
#      ($TOKEN)
#      (SimpleLexiconFn (type "int->tactic->tactic")) (anchored 1))
#(rule $tactic->tactic ($int->tactic->tactic $int) @appT1T2 (anchored 1))
#(rule $termquotation*tactic->tactic
#      ($TOKEN)
#      (SimpleLexiconFn (type "termquotation*tactic->tactic")) (anchored 1))
#(rule $tactic
#  ($termquotation $termquotation*tactic->tactic $tactic)
#  @infixT1T2T3 (anchored 1))
#
###############################################################
##      literal SML objects, looked up from the database      #
###############################################################
#
#
##### HOL4 Theorems
#(rule $thm ($thm->thm $thm) @appT1T2 (anchored 1))
#(rule $thm ($TOKEN) (IdentityFn) (anchored 1))
#
### Lists
#(rule $Thms ($thm) (IdentityFn) (anchored 1))
#(rule $Thms ($thm , $Thms) (lambda t1 (lambda t2 (call @cons (var t1) (var t2)))) (anchored 1))
#(rule $thmlist ([ $Thms ]) (lambda thms (call @list (var thms))) (anchored 1))
#(rule $thmlist ([]) (ConstantFn (call @list (string " "))) (anchored 1))
#(rule $thmlist ([ ]) (ConstantFn (call @list (string " "))) (anchored 1))
#
#
###Commands to the interactive prove interface
#(rule $command
#      (back)
#      (ConstantFn (string "(b)")) (anchored 1))
#
#
