############################################################################
# Domain knowledge is written here in a mix of whitespace- and             #
# comma-separated values. For each line, the first token is a HOL          #
# component and the second is the attribute we want to specify. What       #
# follows is a comma-separated list of values which characterize this      #
# attribute of that component. In the list (and nowhere else) can tokens   #
# contain whitespaces. This allows SML types and expressions of more than  #
# one word to be represented naturally.                                    #
#                                                                          #
# The `type` attribute is the only one required for each component and     #
# gives rise to litteral lexemes to be parsed into their fitting type in   #
# the grammar; e.g. `asm_rewrite_tac` is given type `thm list -> tactic`   #
# which produces a lexeme                                                  #
#                                                                          #
#                   lexeme:  `asm_rewrite_tac`                             #
#                   formula: `asm_rewrite_tac`                             #
#                   type:    `thmlist->tactic`                             #
#                                                                          #
# Calling SimpleLexiconFn on (type thmlist->tactic) captures all           #
# instances of asm_rewrite_tac (and other functions of the same type) into #
# a category of choice. Note that internally, those types have their       #
# whitespaces removed and parentheses turned into square brackets so type  #
#                                                                          #
#       term quotation list -> (thm -> tactic) -> thm -> tactic            #
#                                                                          #
# is actually fetched from SimpleLexiconFn with                            #
#                                                                          #
#        (type termquotationlist->[thm->tactic]->thm->tactic)              #
#                                                                          #
# into a category potentially called                                       #
#                                                                          #
#           $termquotationlist->[thm->tactic]->thm->tactic                 #
############################################################################


#########################
# HOL4 Tactics - Types: #
#########################

# rewriting
asm_rewrite_tac             type    thm list -> tactic
rewrite_tac                 type    thm list -> tactic
once_rewrite_tac            type    thm list -> tactic
once_asm_rewrite_tac        type    thm list -> tactic

# simplification
simp                        type    thm list -> tactic
fs                          type    thm list -> tactic
rfs                         type    thm list -> tactic
rw                          type    thm list -> tactic

# thm tactics
imp_res_tac                     type    thm -> tactic
assume_tac                      type    thm -> tactic
irule                           type    thm -> tactic
drule                           type    thm -> tactic
match_mp_tac                    type    thm -> tactic
mp_tac                          type    thm -> tactic

# automation tactics
res_tac                            type    tactic
metis_tac                   type    thm list -> tactic
MESON_TAC                   type    thm list -> tactic

# pattern based tactics
qpat_x_assum               type    term quotation -> (thm -> tactic) -> tactic
qpat_assum                 type    term quotation -> (thm -> tactic) -> tactic

# tacticals
first_x_assum               type    (thm -> tactic) -> tactic
first_assum                 type    (thm -> tactic) -> tactic
last_x_assum                type    (thm -> tactic) -> tactic
last_assum                  type    (thm -> tactic) -> tactic
rpt                               type    tactic -> tactic
TRY                               type    tactic -> tactic

# other
Cases                              type    tactic
Induct                             type    tactic
cheat                              type    tactic
gen_tac                            type    tactic
strip_tac                          type    tactic
conj_tac                           type    tactic
all_tac                            type    tactic
NO_TAC                             type    tactic
EQ_TAC                             type    tactic
CCONTR_TAC                         type    tactic
AP_TERM_TAC                        type    tactic
AP_THM_TAC                         type    tactic
Induct_on                      type    term quotation -> tactic
Cases_on                       type    term quotation -> tactic
completeInduct_on              type    term quotation -> tactic
qexists_tac                    type    term quotation -> tactic
sg                             type    term quotation -> tactic
subgoal                        type    term quotation -> tactic
qspec_then                     type    term quotation -> (thm -> tactic) -> thm -> tactic
qspecl_then                    type    term quotation list -> (thm -> tactic) -> thm -> tactic
pop_assum                   type    (thm -> tactic) -> tactic
spose_not_then              type    (thm -> tactic) -> tactic
rename                                 type    term quotation list -> tactic
ntac                        type    int -> tactic -> tactic
by                          type    term quotation * tactic -> tactic
suffices_by                 type    term quotation * tactic -> tactic

###################
# Tactic chaining #
###################
THEN                        type    tactic -> tactic -> tactic
ORELSE                      type    tactic -> tactic -> tactic


########################
# HOL4 - Rules : Types #
########################
GSYM                        type    thm -> thm
EVAL_RULE                   type    thm -> thm
Once                        type    thm -> thm

############################
# Interactive mode : Types #
############################
b                           type    command

#################################
# HOL4 Tactics - Name features: #
#################################
# rewriting
#rewrite_tac                 VP      rewrite
#rewrite_tac                 OBJ     goal
#rewrite_tac                 PREARG  with
#
#asm_rewrite_tac             VP      rewrite
#asm_rewrite_tac             OBJ     goal
#asm_rewrite_tac             CP      with assumptions
#asm_rewrite_tac             PREARG  with
#
#once_rewrite_tac            VP      rewrite
#once_rewrite_tac            OBJ     goal
#once_rewrite_tac            CP      once
#once_rewrite_tac            PREARG  with
#
#once_asm_rewrite_tac        VP      rewrite
#once_asm_rewrite_tac        OBJ     goal
#once_asm_rewrite_tac        CP      once
#once_asm_rewrite_tac        CP      with assumptions
#once_asm_rewrite_tac        PREARG  with
#
## simplification
#simp                        VP      simplify
#simp                        OBJ     goal
#simp                        CP      with assumptions
#simp                        PREARG  with
#
#fs                          AV      full, fully
#fs                          VP      simplify
#fs                          OBJ     goal, all of goal, assumptions
#fs                          CP      with assumptions
#fs                          PREARG  with
#
#rfs                         AV      reverse, full, fully
#rfs                         VP      simplify
#rfs                         OBJ     goal, all of goal, assumptions
#rfs                         CP      with assumptions, in reverse order
#rfs                         PREARG  with
#
## thm tactics
#imp_res_tac                 VP      enrich assumptions, resolve theorem
#imp_res_tac                 PREARG  with
#
#res_tac                     VP      enrich, resolve
#res_tac                     OBJ     assumptions
#res_tac                     CP      together, with eachother
#
#assume_tac                  VP      assume, have, add
#assume_tac                  OBJ     assumption
#assume_tac                  CP      to goal, to assumptions
#
#irule                       VP      reduce
#irule                       OBJ     goal
#irule                       CP      with matching
#irule                       PREARG  with, with implication
#
#drule                       name    resolve with
#
#match_mp_tac                name    modus ponens
#match_mp_tac                VP      reduce
#match_mp_tac                OBJ     goal
#match_mp_tac                CP      with matching, without normalization, without normalizing
#match_mp_tac                PREARG  with, with implication
#
## automation tactics
#res_tac                     VP      enrich, resolve
#res_tac                     OBJ      assumptions
#res_tac                     CP       together, with eachother
#
#MESON_TAC                   name    meson
#MESON_TAC                   AV      auto, automatic
#MESON_TAC                   VP      proof search, search
#MESON_TAC                   OBJ      proof
#MESON_TAC                   PREARG  with
#
#metis_tac                   name    metis
#metis_tac                   AV      auto, automatic, ordered, fancy
#metis_tac                   VP      proof search, search
#metis_tac                   OBJ     proof
#metis_tac                   PREARG  with
#
## pattern based tactics
#qpat_assum                  VP      find, use
#qpat_assum                  OBJ     assumption, matching assumption
#qpat_assum                  PREARG  with pattern
#
#qpat_x_assum                VP      spend, find, use
#qpat_x_assum                OBJ     assumption, matching assumption
#qpat_x_assum                CP      and remove it
#qpat_x_assum                PREARG  with pattern
#
## tacticals
#first_x_assum               VP      map, spend, use
#first_x_assum               OBJ     assumption, matching assumption
#first_x_assum               CP      over assumptions
#
#last_x_assum                AV      reverse
#last_x_assum                VP      map, spend, use
#last_x_assum                OBJ     assumption, matching assumption, last matching assumption
#last_x_assum                CP      over assumptions
#
#ntac                        VP      apply
#ntac                        CP      times
#
#rpt                         AV      infinitely, indefinitely
#rpt                         VP      repeat, keep applying
#
## other
#subgoal                     VP      produce, add, show
#subgoal                     OBJ     subgoal
#subgoal                     CP      as subgoal
#
#by                          name    by, shown by
#suffices_by                 name    suffices to show
#
#Cases                       name    case analysis, case, cases
#Cases                       VP      split
#Cases                       OBJ     goal
#
#Induct                      AV      by
#Induct                      VP      induct, induction, do induction
#
#Induct_on                   AV      by
#Induct_on                   VP      induct, induction, do induction
#Induct_on                   OBJ     on variable
#Induct_on                   PREARG  on
#
#strip_tac                   name    intros
#strip_tac                   VP      remove, strip
#strip_tac                   OBJ     quantifier
#
#rename                      name    alpha conversion
#rename                      VP      rename, change
#rename                      OBJ     variable names, free variables
#rename                      CP      in goal
#rename                      PREARG  into, to, with
#
#qexists_tac                 name    exists, exists_tac
#qexists_tac                 VP      reduce, instantiate, use witness, have witness
#qexists_tac                 OBJ      existential
#qexists_tac                 PREARG  with
#
#qspec_then                  name    specialize for
#qspecl_then                 name    specialize for all
#
#########################
## HOL4 - Rules : Types #
#########################
#GSYM                        name    symmetry, gsym
#EVAL_RULE                   name    eval_rule, evaluate
#Once                        name    only once, once

#######################################
# HOL4 - Real number theorems : Types #
#######################################
SUP_LEMMA3                  type    thm
SUP_LEMMA2                  type    thm
SUP_LEMMA1                  type    thm
SUP_EPSILON                 type    thm
SUM_ZERO                    type    thm
SUM_TWO                     type    thm
SUM_SUBST                   type    thm
SUM_SUB                     type    thm
SUM_REINDEX                 type    thm
SUM_POS_GEN                 type    thm
SUM_POS                     type    thm
SUM_PERMUTE_0               type    thm
SUM_OFFSET                  type    thm
SUM_NSUB                    type    thm
SUM_NEG                     type    thm
SUM_LE                      type    thm
sum_ind                     type    thm
SUM_GROUP                   type    thm
SUM_EQ                      type    thm
SUM_DIFF                    type    thm
sum_compute                 type    thm
SUM_CMUL                    type    thm
SUM_CANCEL                  type    thm
SUM_BOUND                   type    thm
SUM_ADD                     type    thm
SUM_ABS_LE                  type    thm
SUM_ABS                     type    thm
SUM_2                       type    thm
SUM_1                       type    thm
SUM_0                       type    thm
sum                         type    thm
SETOK_LE_LT                 type    thm
REAL_THIRDS_BETWEEN         type    thm
REAL_SUP_UBOUND_LE          type    thm
REAL_SUP_UBOUND             type    thm
REAL_SUP_SOMEPOS            type    thm
REAL_SUP_MAX                type    thm
REAL_SUP_LE                 type    thm
REAL_SUP_EXISTS_UNIQUE      type    thm
REAL_SUP_EXISTS             type    thm
REAL_SUP_CONST              type    thm
REAL_SUP_ALLPOS             type    thm
REAL_SUP                    type    thm
REAL_SUMSQ                  type    thm
REAL_SUB_TRIANGLE           type    thm
REAL_SUB_SUB2               type    thm
REAL_SUB_SUB                type    thm
REAL_SUB_RZERO              type    thm
REAL_SUB_RNEG               type    thm
REAL_SUB_REFL               type    thm
REAL_SUB_RDISTRIB           type    thm
REAL_SUB_RAT                type    thm
REAL_SUB_NEG2               type    thm
REAL_SUB_LZERO              type    thm
REAL_SUB_LT                 type    thm
REAL_SUB_LNEG               type    thm
REAL_SUB_LE                 type    thm
REAL_SUB_LDISTRIB           type    thm
REAL_SUB_INV2               type    thm
REAL_SUB_ADD2               type    thm
REAL_SUB_ADD                type    thm
REAL_SUB_ABS                type    thm
REAL_SUB_0                  type    thm
REAL_SUB                    type    thm
REAL_RNEG_UNIQ              type    thm
REAL_RINV_UNIQ              type    thm
REAL_RDISTRIB               type    thm
REAL_POW_POW                type    thm
REAL_POW_MONO_LT            type    thm
REAL_POW_LT2                type    thm
REAL_POW_LT                 type    thm
REAL_POW_INV                type    thm
REAL_POW_DIV                type    thm
REAL_POW_ADD                type    thm
REAL_POW2_ABS               type    thm
REAL_POS_POS                type    thm
REAL_POS_NZ                 type    thm
REAL_POS_MONO               type    thm
REAL_POS_LE_ZERO            type    thm
REAL_POS_INFLATE            type    thm
REAL_POS_ID                 type    thm
REAL_POS_EQ_ZERO            type    thm
REAL_POS                    type    thm
REAL_POASQ                  type    thm
REAL_OVER1                  type    thm
REAL_OF_NUM_SUC             type    thm
REAL_OF_NUM_POW             type    thm
REAL_OF_NUM_MUL             type    thm
REAL_OF_NUM_LE              type    thm
REAL_OF_NUM_EQ              type    thm
REAL_OF_NUM_ADD             type    thm
REAL_NZ_IMP_LT              type    thm
REAL_NOT_LT                 type    thm
REAL_NOT_LE                 type    thm
REAL_NEGNEG                 type    thm
REAL_NEG_THIRD              type    thm
REAL_NEG_SUB                type    thm
REAL_NEG_RMUL               type    thm
REAL_NEG_NEG                type    thm
REAL_NEG_MUL2               type    thm
REAL_NEG_MINUS1             type    thm
REAL_NEG_LT0                type    thm
REAL_NEG_LMUL               type    thm
REAL_NEG_LE0                type    thm
REAL_NEG_INV                type    thm
REAL_NEG_HALF               type    thm
REAL_NEG_GT0                type    thm
REAL_NEG_GE0                type    thm
REAL_NEG_EQ0                type    thm
REAL_NEG_EQ                 type    thm
REAL_NEG_ADD                type    thm
REAL_NEG_0                  type    thm
REAL_MUL_SYM                type    thm
REAL_MUL_SUB2_CANCEL        type    thm
REAL_MUL_SUB1_CANCEL        type    thm
REAL_MUL_RZERO              type    thm
REAL_MUL_RNEG               type    thm
REAL_MUL_RINV               type    thm
REAL_MUL_RID                type    thm
REAL_MUL_LZERO              type    thm
REAL_MUL_LNEG               type    thm
REAL_MUL_LINV               type    thm
REAL_MUL_LID                type    thm
REAL_MUL_COMM               type    thm
REAL_MUL_ASSOC              type    thm
REAL_MUL                    type    thm
REAL_MIN_SUB                type    thm
REAL_MIN_REFL               type    thm
REAL_MIN_MAX                type    thm
REAL_MIN_LT                 type    thm
REAL_MIN_LE_LIN             type    thm
REAL_MIN_LE2                type    thm
REAL_MIN_LE1                type    thm
REAL_MIN_LE                 type    thm
REAL_MIN_ALT                type    thm
REAL_MIN_ADD                type    thm
REAL_MIN_ACI                type    thm
REAL_MIDDLE2                type    thm
REAL_MIDDLE1                type    thm
REAL_MEAN                   type    thm
REAL_MAX_SUB                type    thm
REAL_MAX_REFL               type    thm
REAL_MAX_MIN                type    thm
REAL_MAX_LT                 type    thm
REAL_MAX_LE                 type    thm
REAL_MAX_ALT                type    thm
REAL_MAX_ADD                type    thm
REAL_MAX_ACI                type    thm
REAL_LTE_TRANS              type    thm
REAL_LTE_TOTAL              type    thm
REAL_LTE_ANTSYM             type    thm
REAL_LTE_ANTISYM            type    thm
REAL_LTE_ADD2               type    thm
REAL_LTE_ADD                type    thm
REAL_LT_TRANS               type    thm
REAL_LT_TOTAL               type    thm
REAL_LT_SUB_RADD            type    thm
REAL_LT_SUB_LADD            type    thm
REAL_LT_RMUL_IMP            type    thm
REAL_LT_RMUL_0              type    thm
REAL_LT_RMUL                type    thm
REAL_LT_REFL                type    thm
REAL_LT_RDIV_EQ             type    thm
REAL_LT_RDIV_0              type    thm
REAL_LT_RDIV                type    thm
REAL_LT_RADD                type    thm
REAL_LT_NZ                  type    thm
REAL_LT_NEGTOTAL            type    thm
REAL_LT_NEG                 type    thm
REAL_LT_MULTIPLE            type    thm
REAL_LT_MUL2                type    thm
REAL_LT_MUL                 type    thm
REAL_LT_MIN                 type    thm
REAL_LT_MAX                 type    thm
REAL_LT_LMUL_IMP            type    thm
REAL_LT_LMUL_0              type    thm
REAL_LT_LMUL                type    thm
REAL_LT_LE                  type    thm
REAL_LT_LDIV_EQ             type    thm
REAL_LT_LADD                type    thm
REAL_LT_INV_EQ              type    thm
REAL_LT_INV                 type    thm
REAL_LT_IMP_NE              type    thm
REAL_LT_IMP_LE              type    thm
REAL_LT_IADD                type    thm
REAL_LT_HALF2               type    thm
REAL_LT_HALF1               type    thm
REAL_LT_GT                  type    thm
REAL_LT_FRACTION_0          type    thm
REAL_LT_FRACTION            type    thm
REAL_LT_DIV                 type    thm
REAL_LT_ANTISYM             type    thm
REAL_LT_ADDR                type    thm
REAL_LT_ADDNEG2             type    thm
REAL_LT_ADDNEG              type    thm
REAL_LT_ADDL                type    thm
REAL_LT_ADD_SUB             type    thm
REAL_LT_ADD2                type    thm
REAL_LT_ADD1                type    thm
REAL_LT_ADD                 type    thm
REAL_LT_1                   type    thm
REAL_LT_01                  type    thm
REAL_LT1_POW2               type    thm
real_lt                     type    thm
REAL_LT                     type    thm
REAL_LNEG_UNIQ              type    thm
REAL_LINV_UNIQ              type    thm
REAL_LIN_LE_MAX             type    thm
REAL_LET_TRANS              type    thm
REAL_LET_TOTAL              type    thm
REAL_LET_ANTISYM            type    thm
REAL_LET_ADD2               type    thm
REAL_LET_ADD                type    thm
REAL_LE_TRANS               type    thm
REAL_LE_TOTAL               type    thm
REAL_LE_SUP                 type    thm
REAL_LE_SUB_RADD            type    thm
REAL_LE_SUB_LADD            type    thm
REAL_LE_SUB_CANCEL2         type    thm
REAL_LE_SQUARE              type    thm
REAL_LE_RNEG                type    thm
REAL_LE_RMUL_IMP            type    thm
REAL_LE_RMUL                type    thm
REAL_LE_REFL                type    thm
REAL_LE_RDIV_EQ             type    thm
REAL_LE_RDIV                type    thm
REAL_LE_RADD                type    thm
REAL_LE_POW2                type    thm
REAL_LE_NEGTOTAL            type    thm
REAL_LE_NEGR                type    thm
REAL_LE_NEGL                type    thm
REAL_LE_NEG2                type    thm
REAL_LE_NEG                 type    thm
REAL_LE_MUL2                type    thm
REAL_LE_MUL                 type    thm
REAL_LE_MIN                 type    thm
REAL_LE_MAX2                type    thm
REAL_LE_MAX1                type    thm
REAL_LE_MAX                 type    thm
REAL_LE_LT                  type    thm
REAL_LE_LNEG                type    thm
REAL_LE_LMUL_IMP            type    thm
REAL_LE_LMUL                type    thm
REAL_LE_LDIV_EQ             type    thm
REAL_LE_LDIV                type    thm
REAL_LE_LADD_IMP            type    thm
REAL_LE_LADD                type    thm
REAL_LE_INV_EQ              type    thm
REAL_LE_INV                 type    thm
REAL_LE_EPSILON             type    thm
REAL_LE_DOUBLE              type    thm
REAL_LE_DIV                 type    thm
REAL_LE_ANTISYM             type    thm
REAL_LE_ADDR                type    thm
REAL_LE_ADDL                type    thm
REAL_LE_ADD2                type    thm
REAL_LE_ADD                 type    thm
REAL_LE_01                  type    thm
REAL_LE1_POW2               type    thm
REAL_LE                     type    thm
REAL_LDISTRIB               type    thm
REAL_INVINV                 type    thm
REAL_INV_POS                type    thm
REAL_INV_NZ                 type    thm
REAL_INV_MUL                type    thm
REAL_INV_LT_ANTIMONO        type    thm
REAL_INV_LT1                type    thm
REAL_INV_INV                type    thm
REAL_INV_INJ                type    thm
REAL_INV_EQ_0               type    thm
REAL_INV_1OVER              type    thm
REAL_INV_0                  type    thm
REAL_INV1                   type    thm
REAL_INJ                    type    thm
REAL_INF_MIN                type    thm
REAL_INF_LT                 type    thm
REAL_INF_LE                 type    thm
REAL_INF_CLOSE              type    thm
REAL_IMP_SUP_LE             type    thm
REAL_IMP_MIN_LE2            type    thm
REAL_IMP_MAX_LE2            type    thm
REAL_IMP_LE_SUP             type    thm
REAL_IMP_LE_INF             type    thm
REAL_IMP_INF_LE             type    thm
REAL_HALF_DOUBLE            type    thm
REAL_HALF_BETWEEN           type    thm
REAL_FACT_NZ                type    thm
REAL_EQ_SUB_RADD            type    thm
REAL_EQ_SUB_LADD            type    thm
REAL_EQ_RMUL_IMP            type    thm
REAL_EQ_RMUL                type    thm
REAL_EQ_RDIV_EQ             type    thm
REAL_EQ_RADD                type    thm
REAL_EQ_NEG                 type    thm
REAL_EQ_MUL_LCANCEL         type    thm
REAL_EQ_LMUL_IMP            type    thm
REAL_EQ_LMUL2               type    thm
REAL_EQ_LMUL                type    thm
REAL_EQ_LDIV_EQ             type    thm
REAL_EQ_LADD                type    thm
REAL_EQ_IMP_LE              type    thm
REAL_ENTIRE                 type    thm
REAL_DOWN2                  type    thm
REAL_DOWN                   type    thm
REAL_DOUBLE                 type    thm
REAL_DIV_RMUL_CANCEL        type    thm
REAL_DIV_RMUL               type    thm
REAL_DIV_REFL3              type    thm
REAL_DIV_REFL2              type    thm
REAL_DIV_REFL               type    thm
REAL_DIV_OUTER_CANCEL3      type    thm
REAL_DIV_OUTER_CANCEL2      type    thm
REAL_DIV_OUTER_CANCEL       type    thm
REAL_DIV_MUL2               type    thm
REAL_DIV_LZERO              type    thm
REAL_DIV_LMUL_CANCEL        type    thm
REAL_DIV_LMUL               type    thm
REAL_DIV_INNER_CANCEL3      type    thm
REAL_DIV_INNER_CANCEL2      type    thm
REAL_DIV_INNER_CANCEL       type    thm
REAL_DIV_DENOM_CANCEL3      type    thm
REAL_DIV_DENOM_CANCEL2      type    thm
REAL_DIV_DENOM_CANCEL       type    thm
REAL_DIV_ADD                type    thm
REAL_DIFFSQ                 type    thm
REAL_BIGNUM                 type    thm
REAL_ARCH_LEAST             type    thm
REAL_ARCH                   type    thm
REAL_ADD_SYM                type    thm
REAL_ADD_SUB_ALT            type    thm
REAL_ADD_SUB2               type    thm
REAL_ADD_SUB                type    thm
REAL_ADD_RINV               type    thm
REAL_ADD_RID_UNIQ           type    thm
REAL_ADD_RID                type    thm
REAL_ADD_RDISTRIB           type    thm
REAL_ADD_RAT                type    thm
REAL_ADD_LINV               type    thm
REAL_ADD_LID_UNIQ           type    thm
REAL_ADD_LID                type    thm
REAL_ADD_LDISTRIB           type    thm
REAL_ADD_COMM               type    thm
REAL_ADD_ASSOC              type    thm
REAL_ADD2_SUB2              type    thm
REAL_ADD                    type    thm
REAL_ABS_TRIANGLE           type    thm
REAL_ABS_POS                type    thm
REAL_ABS_MUL                type    thm
REAL_ABS_0                  type    thm
REAL_10                     type    thm
REAL_1                      type    thm
REAL_0                      type    thm
REAL                        type    thm
POW_ZERO_EQ                 type    thm
POW_ZERO                    type    thm
pow_rat                     type    thm
POW_POS_LT                  type    thm
POW_POS                     type    thm
POW_PLUS1                   type    thm
POW_ONE                     type    thm
POW_NZ                      type    thm
POW_MUL                     type    thm
POW_MINUS1                  type    thm
POW_M1                      type    thm
POW_LT                      type    thm
POW_LE                      type    thm
POW_INV                     type    thm
POW_EQ                      type    thm
POW_ADD                     type    thm
POW_ABS                     type    thm
POW_2_LT                    type    thm
POW_2_LE1                   type    thm
POW_2                       type    thm
POW_1                       type    thm
POW_0                       type    thm
NUM_FLOOR_upper_bound       type    thm
NUM_FLOOR_LOWER_BOUND       type    thm
NUM_FLOOR_LET               type    thm
NUM_FLOOR_LE2               type    thm
NUM_FLOOR_LE                type    thm
NUM_FLOOR_EQNS              type    thm
NUM_FLOOR_DIV_LOWERBOUND    type    thm
NUM_FLOOR_DIV               type    thm
NUM_FLOOR_BASE              type    thm
NUM_CEILING_NUM_FLOOR       type    thm
NUM_CEILING_LE              type    thm
neg_rat                     type    thm
mult_ratr                   type    thm
mult_ratl                   type    thm
mult_rat                    type    thm
mult_ints                   type    thm
lt_ratr                     type    thm
lt_ratl                     type    thm
lt_rat                      type    thm
lt_int                      type    thm
le_ratr                     type    thm
le_ratl                     type    thm
le_rat                      type    thm
LE_NUM_CEILING              type    thm
le_int                      type    thm
INFINITE_REAL_UNIV          type    thm
eq_ratr                     type    thm
eq_ratl                     type    thm
eq_rat                      type    thm
eq_ints                     type    thm
div_ratr                    type    thm
div_ratl                    type    thm
div_rat                     type    thm
add_ratr                    type    thm
add_ratl                    type    thm
add_rat                     type    thm
add_ints                    type    thm
ABS_ZERO                    type    thm
ABS_TRIANGLE_SUB            type    thm
ABS_TRIANGLE_NEG            type    thm
ABS_TRIANGLE_LT             type    thm
ABS_TRIANGLE                type    thm
ABS_SUM                     type    thm
ABS_SUB_ABS                 type    thm
ABS_SUB                     type    thm
ABS_STILLNZ                 type    thm
ABS_SIGN2                   type    thm
ABS_SIGN                    type    thm
ABS_REFL                    type    thm
ABS_POW2                    type    thm
ABS_POS                     type    thm
ABS_NZ                      type    thm
ABS_NEG                     type    thm
ABS_N                       type    thm
ABS_MUL                     type    thm
ABS_LT_MUL2                 type    thm
ABS_LE                      type    thm
ABS_INV                     type    thm
ABS_DIV                     type    thm
ABS_CIRCLE                  type    thm
ABS_CASES                   type    thm
ABS_BOUNDS                  type    thm
ABS_BOUND                   type    thm
ABS_BETWEEN2                type    thm
ABS_BETWEEN1                type    thm
ABS_BETWEEN                 type    thm
ABS_ABS                     type    thm
ABS_1                       type    thm
ABS_0                       type    thm

#######################################
# HOL4 - Real number theorems : Names #
#######################################
#REAL_DIV                   set    real, division
#REAL_SUB                    set    real, subtraction, additive inverse
#POW_2                       set    power, square, two
#REAL                        set    real, definition, successor
#REAL_ADD                    set    real, addition
#REAL_ADD_ASSOC              set    real, addition, associativity
#REAL_ADD_LDISTRIB           set    real, addition, left, distributivity
#REAL_ADD_RDISTRIB           set    real, addition, right, distributivity
#REAL_ADD_SYM                set    real, addition, symmetry
#REAL_DIV_LZERO              set    real, division, left, zero
#REAL_DOUBLE                 set    real, double
#REAL_HALF_DOUBLE            set    real, half, double
#REAL_LDISTRIB               set    real, left, distributivity
#REAL_MUL                    set    real, multiplication
#REAL_MUL_LID                set    real, multiplication, left, identity
#REAL_MUL_RID                set    real, multiplication, right, identity
#REAL_MUL_RINV               set    real, multiplication, right, inverse
#REAL_MUL_SYM                set    real, multiplication, symmetry
#REAL_NEG_ADD                set    real, negation, addition
#REAL_NEG_LMUL               set    real, negation, left, multiplication
#REAL_RDISTRIB              set    real, right, distributivity
#REAL_SUB_LDISTRIB           set    real, subtraction, left, distributivity
#REAL_SUB_RDISTRIB           set    real, subtraction, right, distributivity
