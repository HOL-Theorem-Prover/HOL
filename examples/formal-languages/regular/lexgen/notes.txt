Theories:

 dfaScript.sml 
   -- abstract DFAs, and executions
 
 lexer_specScript.sml 
   -- lexer given by a list of regexp/fn pairs, maximal munch

 lexer_runtimeScript.sml
   -- lexer driver

 lexer_spec_to_dfaScript.sml
   -- mapping a lexer spec to a DFA, via smart derivs

Important Definitions and Theorems
-----------------------------------

- Lexer specification given by

     type abbrev ("lexer_spec", 
                  ``:(regexp # (string->'a)) list``);

- `correct_lex`: the idea is that, given (r,tokfn) in a lexer spec, r
  is used to break off a prefix of the input, and tokfn is applied to
  that prefix in order to get the next token. In order to defend
  against ambiguity problems, the "maximal munch" property is adopted:
  a correct lexer breaks a string into a sequence of non-null lexemes,
  each being matched by one of the regexps given in the spec, and each
  of max possible length. If multiple regexps in the spec match the
  max. length lexeme, the earliest action in the list of actions is
  taken.

  Formal definition:

  (correct_lex lexer_spec s [] = (s = [])) /\
  (correct_lex lexer_spec s (tok::toks) =
     ?prefix n suffix.
       (prefix <> []) /\
       lexer_spec_matches_prefix lexer_spec n tok prefix suffix s /\
       correct_lex lexer_spec suffix toks /\
       (* Ensure a longest match  *)
       (!n' tok' prefix' suffix'.
           lexer_spec_matches_prefix lexer_spec n' tok' prefix' suffix' s 
            ==>
           LENGTH prefix' <= LENGTH prefix) /\
       (* Ensure the earliest match of equal length *)
       (!n' tok' prefix' suffix'.
           lexer_spec_matches_prefix lexer_spec n' tok' prefix' suffix' s
             ==>
           (LENGTH prefix' <> LENGTH prefix) \/ n <= n'))

  where

  lexer_spec_matches_prefix lexer_spec n token prefix suffix s =
     ?r f.
      n < LENGTH lexer_spec      /\
      (EL n lexer_spec = (r,f))  /\
      (token = f prefix)         /\
      prefix IN (regexp_lang r)  /\
      (s = prefix ++ suffix)


Conditional correctness of a lexer (lexer_runtimeScript.sml)
------------------------------------------------------------

A lexer is correct if it always gives the correct lex:

val lexer_correct = Q.store_thm 
("lexer_correct",
 `!lexer_spec trans finals start.
   dfa_correct lexer_spec trans finals start
   ==>
   !s toks.
     correct_lex lexer_spec s toks =
     (lexer (trans,finals,start) s [] = SOME toks)`,
 <proof>);


Correctness of construction of a "lexer-spec" DFA:
---------------------------------------------------

val lex_spec_to_dfa_correct = Q.store_thm 
("lex_spec_to_dfa_correct",
 `!lex_spec.
   dfa_correct lex_spec lex_spec_transition lex_spec_finals lex_spec`,
  <proof>
);

where

val is_error_state_def = 
 Define 
  `is_error_state lex_spec =
     EVERY (\(regexp,tokfn). regexp = Chset charset_empty) lex_spec`;

val lex_spec_transition_def =
 Define 
  `lex_spec_transition (lspec,c) =
     let lspec' = MAP (\(r,tokfn). (smart_deriv (ORD c) r, tokfn)) lspec
     in
       if is_error_state lspec' then
         NONE
       else
         SOME lspec'`;

val lex_spec_finals_def = 
 Define 
  `lex_spec_finals lspec = 
    case FILTER (\(r,tokfn). nullable r) lspec of
     | (regexp,tokfn)::_ => SOME tokfn
     | _ => NONE`;

