T__DEF:"fun", "bool", "T", "=", "Abool", "T", "T <=> (\Abool. Abool) = (\Abool. Abool)"
FORALL__DEF:"fun", "bool", "T", "=", "$forall", "$forall", "AA->bool", "T"
EXISTS__DEF:"fun", "bool", "_40", "=", "$exists", "$exists", "AA->bool", "AA->bool (_40 AA->bool)", "_40 AA->bool"
AND__DEF:"fun", "bool", "=", "$and", "$and", "Abool"
OR__DEF:"fun", "bool", "=", "$or", "$or", "Abool"
F__DEF:"fun", "bool", "F", "=", "Abool", "F", "F <=> (!Abool. Abool)"
NOT__DEF:"fun", "bool", "F", "=", "$not", "$not", "Abool", "F"
EXISTS__UNIQUE__DEF:"fun", "bool", "_3F_21", "=", "$exists", "$exists AA->bool", "AA", "AA->bool", "AA->bool AA", "_3F_21"
LET__DEF:"fun", "bool", "LET", "=", "AB", "AB->A AB", "LET"
COND__DEF:"fun", "bool", "_40", "T", "F", "COND", "=", "AA", "Abool", "Abool <=> F", "Abool <=> T", "COND", "F", "T", "_40 (\AA. ((Abool <=> T) ==> AA = AA) /\ ((Abool <=> F) ==> AA = AA))"
ONE__ONE__DEF:"fun", "bool", "ONE__ONE", "=", "AB", "AB->A AB", "ONE__ONE"
ONTO__DEF:"fun", "bool", "ONTO", "=", "AA", "AB", "AB->A AB", "ONTO"
TYPE__DEFINITION0:"fun", "bool", "TYPE__DEFINITION", "=", "AA", "AA->bool AA", "AA->bool AA <=> (?AB. AA = AB->A AB)", "AB", "AB->A AB", "TYPE__DEFINITION"
BOOL__CASES__AX:"fun", "bool", "T", "F", "=", "Abool", "Abool <=> F", "Abool <=> T", "F", "T"
ETA__AX:"fun", "bool", "=", "AA", "AA->B", "AA->B AA"
SELECT__AX:"fun", "bool", "_40", "AA", "AA->bool", "AA->bool (_40 AA->bool)", "AA->bool AA", "_40 AA->bool"
INFINITY__AX:"ind", "fun", "bool", "~", "ONTO", "ONE__ONE", "Aind->ind", "ONE__ONE Aind->ind", "ONTO Aind->ind"
literal__case__DEF:"fun", "bool", "literal__case", "=", "AB", "AB->A AB", "literal__case"
IN__DEF:"fun", "bool", "IN", "=", "AA", "AA->bool AA", "IN"
RES__FORALL__DEF:"fun", "bool", "RES__FORALL", "IN", "=", "AA", "AA->bool", "AA->bool AA", "IN AA AA->bool", "RES__FORALL"
RES__EXISTS__DEF:"fun", "bool", "RES__EXISTS", "IN", "=", "AA", "AA->bool", "AA->bool AA", "IN AA AA->bool", "RES__EXISTS"
RES__EXISTS__UNIQUE__DEF:"fun", "bool", "RES__FORALL", "RES__EXISTS__UNIQUE", "RES__EXISTS", "=", "AA", "AA->bool", "AA->bool AA", "RES__EXISTS AA->bool (\AA. AA->bool AA)", "RES__EXISTS__UNIQUE", "RES__FORALL AA->bool (\AA. AA->bool AA /\ AA->bool AA ==> AA = AA)", "RES__FORALL AA->bool (\AA. RES__FORALL AA->bool (\AA. AA->bool AA /\ AA->bool AA ==> AA = AA))"
RES__SELECT__DEF:"fun", "bool", "_40", "RES__SELECT", "IN", "=", "AA", "AA->bool", "AA->bool AA", "IN AA AA->bool", "RES__SELECT", "_40 (\AA. IN AA AA->bool /\ AA->bool AA)"
BOUNDED__DEF:"fun", "bool", "T", "BOUNDED", "=", "BOUNDED", "T"
DATATYPE__TAG__DEF:"fun", "bool", "T", "DATATYPE", "=", "DATATYPE", "T"
TRUTH:"bool", "T", "T"
IMP__ANTISYM__AX:"fun", "bool", "=", "Abool", "Abool <=> Abool"
FALSITY:"fun", "bool", "F", "Abool", "F"
ETA__THM:"fun", "bool", "=", "AA", "AA->B", "AA->B AA"
EXCLUDED__MIDDLE:"fun", "bool", "~", "Abool"
BETA__THM:"fun", "bool", "=", "(\AB. AB->A AB) AB", "AB", "AB->A AB"
LET__THM:"fun", "bool", "LET", "=", "AB", "AB->A", "AB->A AB", "LET AB->A AB"
FORALL__THM:"fun", "bool", "=", "$forall", "$forall AA->bool", "$forall AA->bool <=> (!AA. AA->bool AA)", "AA", "AA->bool", "AA->bool AA"
EXISTS__THM:"fun", "bool", "=", "$exists", "$exists AA->bool", "$exists AA->bool <=> (?AA. AA->bool AA)", "AA", "AA->bool", "AA->bool AA"
ABS__SIMP:"fun", "bool", "=", "(\AA. AB) AA", "AA", "AB"
FORALL__SIMP:"fun", "bool", "=", "(!AA. Abool) <=> Abool", "Abool"
EXISTS__SIMP:"fun", "bool", "=", "(?AA. Abool) <=> Abool", "Abool"
AND__INTRO__THM:"fun", "bool", "Abool"
AND1__THM:"fun", "bool", "Abool"
AND2__THM:"fun", "bool", "Abool"
CONJ__SYM:"fun", "bool", "=", "Abool", "Abool /\ Abool <=> Abool /\ Abool"
CONJ__COMM:"fun", "bool", "=", "Abool", "Abool /\ Abool <=> Abool /\ Abool"
CONJ__ASSOC:"fun", "bool", "=", "Abool", "Abool /\ Abool /\ Abool <=> (Abool /\ Abool) /\ Abool"
OR__INTRO__THM1:"fun", "bool", "Abool"
OR__INTRO__THM2:"fun", "bool", "Abool"
OR__ELIM__THM:"fun", "bool", "Abool"
IMP__F:"fun", "bool", "~", "F", "Abool", "F"
F__IMP:"fun", "bool", "~", "F", "Abool", "F"
NOT__F:"fun", "bool", "~", "F", "=", "Abool", "Abool <=> F", "F"
NOT__AND:"fun", "bool", "~", "Abool"
AND__CLAUSES__0:"fun", "bool", "T", "=", "Abool", "T", "T /\ Abool <=> Abool"
AND__CLAUSES__1:"fun", "bool", "T", "=", "Abool", "Abool /\ T <=> Abool", "T"
AND__CLAUSES__2:"fun", "bool", "F", "=", "Abool", "F", "F /\ Abool <=> F"
AND__CLAUSES__3:"fun", "bool", "F", "=", "Abool", "Abool /\ F <=> F", "F"
AND__CLAUSES__e4:"fun", "bool", "=", "Abool", "Abool /\ Abool <=> Abool"
OR__CLAUSES__0:"fun", "bool", "T", "=", "Abool", "T", "T \/ Abool <=> T"
OR__CLAUSES__1:"fun", "bool", "T", "=", "Abool", "Abool \/ T <=> T", "T"
OR__CLAUSES__2:"fun", "bool", "F", "=", "Abool", "F", "F \/ Abool <=> Abool"
OR__CLAUSES__3:"fun", "bool", "F", "=", "Abool", "Abool \/ F <=> Abool", "F"
OR__CLAUSES__e4:"fun", "bool", "=", "Abool", "Abool \/ Abool <=> Abool"
IMP__CLAUSES__0:"fun", "bool", "T", "=", "Abool", "T", "T ==> Abool <=> Abool"
IMP__CLAUSES__1:"fun", "bool", "T", "=", "Abool", "Abool ==> T <=> T", "T"
IMP__CLAUSES__2:"fun", "bool", "T", "F", "=", "Abool", "F", "F ==> Abool <=> T", "T"
IMP__CLAUSES__3:"fun", "bool", "T", "=", "Abool", "Abool ==> Abool <=> T", "T"
IMP__CLAUSES__e4:"fun", "bool", "~", "F", "=", "Abool", "Abool ==> F <=> ~Abool", "F"
NOT__CLAUSES__0:"fun", "bool", "~", "=", "Abool", "~ ~Abool <=> Abool"
NOT__CLAUSES__1:"fun", "bool", "~", "T", "F", "=", "F", "T", "~T <=> F"
NOT__CLAUSES__e2:"fun", "bool", "~", "T", "F", "=", "F", "T", "~F <=> T"
EQ__REFL:"fun", "bool", "=", "AA"
REFL__CLAUSE:"fun", "bool", "T", "=", "AA", "AA = AA <=> T", "T"
EQ__SYM:"fun", "bool", "=", "AA"
EQ__SYM__EQ:"fun", "bool", "=", "AA", "AA = AA <=> AA = AA"
EQ__EXT:"fun", "bool", "=", "AA", "AA->B", "AA->B AA"
FUN__EQ__THM:"fun", "bool", "=", "AB", "AB->A", "AB->A = AB->A <=> (!AB. AB->A AB = AB->A AB)", "AB->A AB"
EQ__TRANS:"fun", "bool", "=", "AA"
BOOL__EQ__DISTINCT__0:"fun", "bool", "~", "T", "F", "=", "F", "T", "T <=> F"
BOOL__EQ__DISTINCT__e1:"fun", "bool", "~", "T", "F", "=", "F", "F <=> T", "T"
EQ__CLAUSES__0:"fun", "bool", "T", "=", "(T <=> Abool) <=> Abool", "Abool", "T", "T <=> Abool"
EQ__CLAUSES__1:"fun", "bool", "T", "=", "(Abool <=> T) <=> Abool", "Abool", "Abool <=> T", "T"
EQ__CLAUSES__2:"fun", "bool", "~", "F", "=", "(F <=> Abool) <=> ~Abool", "Abool", "F", "F <=> Abool"
EQ__CLAUSES__e3:"fun", "bool", "~", "F", "=", "(Abool <=> F) <=> ~Abool", "Abool", "Abool <=> F", "F"
COND__CLAUSES__0:"fun", "bool", "T", "COND", "=", "AA", "T", "if T then AA else AA"
COND__CLAUSES__e1:"fun", "bool", "F", "COND", "=", "AA", "F", "if F then AA else AA"
COND__ID:"fun", "bool", "COND", "=", "AA", "Abool", "if Abool then AA else AA"
SELECT__THM:"fun", "bool", "_40", "=", "AA", "AA->bool (_40 (\AA. AA->bool AA))", "AA->bool (_40 (\AA. AA->bool AA)) <=> (?AA. AA->bool AA)", "AA->bool AA", "_40 (\AA. AA->bool AA)"
SELECT__REFL:"fun", "bool", "_40", "=", "AA", "_40 (\AA. AA = AA)"
SELECT__REFL__2:"fun", "bool", "_40", "=", "AA", "_40 (\AA. AA = AA)"
SELECT__UNIQUE:"fun", "bool", "_40", "=", "AA", "AA->bool", "AA->bool AA", "AA->bool AA <=> AA = AA", "_40 AA->bool"
SELECT__ELIM__THM:"fun", "bool", "_40", "AA", "AA->bool", "AA->bool (_40 AA->bool)", "AA->bool AA", "_40 AA->bool"
NOT__FORALL__THM:"fun", "bool", "~", "=", "AA", "AA->bool AA", "~(!AA. AA->bool AA) <=> (?AA. ~AA->bool AA)"
NOT__EXISTS__THM:"fun", "bool", "~", "=", "AA", "AA->bool AA", "~(?AA. AA->bool AA) <=> (!AA. ~AA->bool AA)"
FORALL__AND__THM:"fun", "bool", "=", "(!AA. AA->bool AA /\ AA->bool AA) <=> (!AA. AA->bool AA) /\ (!AA. AA->bool AA)", "AA", "AA->bool AA"
LEFT__AND__FORALL__THM:"fun", "bool", "=", "(!AA. AA->bool AA) /\ Abool <=> (!AA. AA->bool AA /\ Abool)", "AA", "AA->bool AA", "Abool"
RIGHT__AND__FORALL__THM:"fun", "bool", "=", "AA", "AA->bool AA", "Abool", "Abool /\ (!AA. AA->bool AA) <=> (!AA. Abool /\ AA->bool AA)"
EXISTS__OR__THM:"fun", "bool", "=", "(?AA. AA->bool AA \/ AA->bool AA) <=> (?AA. AA->bool AA) \/ (?AA. AA->bool AA)", "AA", "AA->bool AA"
LEFT__OR__EXISTS__THM:"fun", "bool", "=", "(?AA. AA->bool AA) \/ Abool <=> (?AA. AA->bool AA \/ Abool)", "AA", "AA->bool AA", "Abool"
RIGHT__OR__EXISTS__THM:"fun", "bool", "=", "AA", "AA->bool AA", "Abool", "Abool \/ (?AA. AA->bool AA) <=> (?AA. Abool \/ AA->bool AA)"
BOTH__EXISTS__AND__THM:"fun", "bool", "=", "(?AA. Abool /\ Abool) <=> (?AA. Abool) /\ (?AA. Abool)", "Abool"
LEFT__EXISTS__AND__THM:"fun", "bool", "=", "(?AA. AA->bool AA /\ Abool) <=> (?AA. AA->bool AA) /\ Abool", "AA", "AA->bool AA", "Abool"
RIGHT__EXISTS__AND__THM:"fun", "bool", "=", "(?AA. Abool /\ AA->bool AA) <=> Abool /\ (?AA. AA->bool AA)", "AA", "AA->bool AA", "Abool"
BOTH__FORALL__OR__THM:"fun", "bool", "=", "(!AA. Abool \/ Abool) <=> (!AA. Abool) \/ (!AA. Abool)", "Abool"
LEFT__FORALL__OR__THM:"fun", "bool", "=", "(!AA. AA->bool AA \/ Abool) <=> (!AA. AA->bool AA) \/ Abool", "AA", "AA->bool AA", "Abool"
RIGHT__FORALL__OR__THM:"fun", "bool", "=", "(!AA. Abool \/ AA->bool AA) <=> Abool \/ (!AA. AA->bool AA)", "AA", "AA->bool AA", "Abool"
BOTH__FORALL__IMP__THM:"fun", "bool", "=", "(!AA. Abool ==> Abool) <=> (?AA. Abool) ==> (!AA. Abool)", "Abool"
LEFT__FORALL__IMP__THM:"fun", "bool", "=", "(!AA. AA->bool AA ==> Abool) <=> (?AA. AA->bool AA) ==> Abool", "AA", "AA->bool AA", "Abool"
RIGHT__FORALL__IMP__THM:"fun", "bool", "=", "(!AA. Abool ==> AA->bool AA) <=> Abool ==> (!AA. AA->bool AA)", "AA", "AA->bool AA", "Abool"
BOTH__EXISTS__IMP__THM:"fun", "bool", "=", "(?AA. Abool ==> Abool) <=> (!AA. Abool) ==> (?AA. Abool)", "Abool"
LEFT__EXISTS__IMP__THM:"fun", "bool", "=", "(?AA. AA->bool AA ==> Abool) <=> (!AA. AA->bool AA) ==> Abool", "AA", "AA->bool AA", "Abool"
RIGHT__EXISTS__IMP__THM:"fun", "bool", "=", "(?AA. Abool ==> AA->bool AA) <=> Abool ==> (?AA. AA->bool AA)", "AA", "AA->bool AA", "Abool"
OR__IMP__THM:"fun", "bool", "=", "(Abool <=> Abool \/ Abool) <=> Abool ==> Abool", "Abool", "Abool <=> Abool \/ Abool"
NOT__IMP:"fun", "bool", "~", "=", "Abool", "~(Abool ==> Abool) <=> Abool /\ ~Abool"
DISJ__ASSOC:"fun", "bool", "=", "Abool", "Abool \/ Abool \/ Abool <=> (Abool \/ Abool) \/ Abool"
DISJ__SYM:"fun", "bool", "=", "Abool", "Abool \/ Abool <=> Abool \/ Abool"
DISJ__COMM:"fun", "bool", "=", "Abool", "Abool \/ Abool <=> Abool \/ Abool"
DE__MORGAN__THM__0:"fun", "bool", "~", "=", "Abool", "~(Abool /\ Abool) <=> ~Abool \/ ~Abool"
DE__MORGAN__THM__e1:"fun", "bool", "~", "=", "Abool", "~(Abool \/ Abool) <=> ~Abool /\ ~Abool"
LEFT__AND__OVER__OR:"fun", "bool", "=", "Abool", "Abool /\ (Abool \/ Abool) <=> Abool /\ Abool \/ Abool /\ Abool"
RIGHT__AND__OVER__OR:"fun", "bool", "=", "(Abool \/ Abool) /\ Abool <=> Abool /\ Abool \/ Abool /\ Abool", "Abool"
LEFT__OR__OVER__AND:"fun", "bool", "=", "Abool", "Abool \/ Abool /\ Abool <=> (Abool \/ Abool) /\ (Abool \/ Abool)"
RIGHT__OR__OVER__AND:"fun", "bool", "=", "Abool", "Abool /\ Abool \/ Abool <=> (Abool \/ Abool) /\ (Abool \/ Abool)"
IMP__DISJ__THM:"fun", "bool", "~", "=", "Abool", "Abool ==> Abool <=> ~Abool \/ Abool"
DISJ__IMP__THM:"fun", "bool", "=", "Abool", "Abool \/ Abool ==> Abool <=> (Abool ==> Abool) /\ (Abool ==> Abool)"
IMP__CONJ__THM:"fun", "bool", "=", "Abool", "Abool ==> Abool /\ Abool <=> (Abool ==> Abool) /\ (Abool ==> Abool)"
IMP__F__EQ__F:"fun", "bool", "F", "=", "Abool", "Abool <=> F", "Abool ==> F <=> Abool <=> F", "F"
AND__IMP__INTRO:"fun", "bool", "=", "Abool", "Abool ==> Abool ==> Abool <=> Abool /\ Abool ==> Abool"
EQ__IMP__THM:"fun", "bool", "=", "(Abool <=> Abool) <=> (Abool ==> Abool) /\ (Abool ==> Abool)", "Abool", "Abool <=> Abool"
EQ__EXPAND:"fun", "bool", "~", "=", "(Abool <=> Abool) <=> Abool /\ Abool \/ ~Abool /\ ~Abool", "Abool", "Abool <=> Abool"
COND__RATOR:"fun", "bool", "COND", "=", "(if Abool then AB->A else AB->A) AB", "AB", "AB->A", "AB->A AB", "Abool", "if Abool then AB->A AB else AB->A AB"
COND__RAND:"fun", "bool", "COND", "=", "AB", "AB->A (if Abool then AB else AB)", "AB->A AB", "Abool", "if Abool then AB else AB", "if Abool then AB->A AB else AB->A AB"
COND__ABS:"fun", "bool", "COND", "=", "AA", "AA->B", "AA->B AA", "Abool", "if Abool then AA->B AA else AA->B AA", "if Abool then AA->B else AA->B"
COND__EXPAND:"fun", "bool", "~", "COND", "=", "(if Abool then Abool else Abool) <=> (~Abool \/ Abool) /\ (Abool \/ Abool)", "Abool", "if Abool then Abool else Abool"
COND__EXPAND__IMP:"fun", "bool", "~", "COND", "=", "(if Abool then Abool else Abool) <=> (Abool ==> Abool) /\ (~Abool ==> Abool)", "Abool", "if Abool then Abool else Abool"
COND__EXPAND__OR:"fun", "bool", "~", "COND", "=", "(if Abool then Abool else Abool) <=> Abool /\ Abool \/ ~Abool /\ Abool", "Abool", "if Abool then Abool else Abool"
TYPE__DEFINITION__THM:"fun", "bool", "TYPE__DEFINITION", "=", "AA", "AA->bool", "AA->bool AA", "AA->bool AA <=> (?AB. AA = AB->A AB)", "AB", "AB->A", "AB->A AB", "TYPE__DEFINITION AA->bool AB->A", "TYPE__DEFINITION AA->bool AB->A <=> (!AB AB. AB->A AB = AB->A AB ==> AB = AB) /\ (!AA. AA->bool AA <=> (?AB. AA = AB->A AB))"
ONTO__THM:"fun", "bool", "ONTO", "=", "AA", "AB", "AB->A", "AB->A AB", "ONTO AB->A", "ONTO AB->A <=> (!AA. ?AB. AA = AB->A AB)"
ONE__ONE__THM:"fun", "bool", "ONE__ONE", "=", "AB", "AB->A", "AB->A AB", "ONE__ONE AB->A", "ONE__ONE AB->A <=> (!AB AB. AB->A AB = AB->A AB ==> AB = AB)"
ABS__REP__THM:"fun", "bool", "TYPE__DEFINITION", "=", "AA", "AA->B", "AA->B (AB->A AB)", "AA->B AA", "AB", "AB->A (AA->B AA)", "AB->A AB", "AB->bool", "AB->bool AB", "AB->bool AB <=> AA->B (AB->A AB) = AB", "TYPE__DEFINITION AB->bool AA->B"
LET__RAND:"fun", "bool", "LET", "=", "AA->bool (AB->A AB)", "AA->bool (LET (\AB. AB->A AB) AB)", "AA->bool (LET (\AB. AB->A AB) AB) <=> LET (\AB. AA->bool (AB->A AB)) AB", "AB", "AB->A AB", "LET (\AB. AA->bool (AB->A AB)) AB", "LET (\AB. AB->A AB) AB"
LET__RATOR:"fun", "bool", "LET", "=", "AB", "AC", "AC->B->A AC", "AC->B->A AC AB", "LET (\AC. AC->B->A AC AB) AC", "LET (\AC. AC->B->A AC) AC AB"
SWAP__FORALL__THM:"fun", "bool", "=", "(!AA AB. AA->B->bool AA AB) <=> (!AB AA. AA->B->bool AA AB)", "AA", "AA->B->bool AA AB", "AB"
SWAP__EXISTS__THM:"fun", "bool", "=", "(?AA AB. AA->B->bool AA AB) <=> (?AB AA. AA->B->bool AA AB)", "AA", "AA->B->bool AA AB", "AB"
EXISTS__UNIQUE__THM:"fun", "bool", "_3F_21", "=", "AA", "AA->bool AA", "_3F_21 (\AA. AA->bool AA)", "_3F_21 (\AA. AA->bool AA) <=> (?AA. AA->bool AA) /\ (!AA AA. AA->bool AA /\ AA->bool AA ==> AA = AA)"
LET__CONG:"fun", "bool", "LET", "=", "AB", "AB->A", "AB->A AB", "LET AB->A AB"
IMP__CONG:"fun", "bool", "=", "Abool", "Abool <=> Abool", "Abool ==> Abool <=> Abool ==> Abool"
AND__CONG:"fun", "bool", "=", "Abool", "Abool /\ Abool <=> Abool /\ Abool", "Abool <=> Abool"
LEFT__AND__CONG:"fun", "bool", "=", "Abool", "Abool /\ Abool <=> Abool /\ Abool", "Abool <=> Abool"
OR__CONG:"fun", "bool", "~", "=", "Abool", "Abool <=> Abool", "Abool \/ Abool <=> Abool \/ Abool"
LEFT__OR__CONG:"fun", "bool", "~", "=", "Abool", "Abool <=> Abool", "Abool \/ Abool <=> Abool \/ Abool"
COND__CONG:"fun", "bool", "~", "COND", "=", "AA", "Abool", "Abool <=> Abool", "if Abool then AA else AA"
RES__FORALL__CONG:"fun", "bool", "RES__FORALL", "IN", "=", "AA", "AA->bool", "AA->bool AA", "AA->bool AA <=> AA->bool AA", "IN AA AA->bool", "RES__FORALL AA->bool AA->bool", "RES__FORALL AA->bool AA->bool <=> RES__FORALL AA->bool AA->bool"
RES__EXISTS__CONG:"fun", "bool", "RES__EXISTS", "IN", "=", "AA", "AA->bool", "AA->bool AA", "AA->bool AA <=> AA->bool AA", "IN AA AA->bool", "RES__EXISTS AA->bool AA->bool", "RES__EXISTS AA->bool AA->bool <=> RES__EXISTS AA->bool AA->bool"
MONO__AND:"fun", "bool", "Abool"
MONO__OR:"fun", "bool", "Abool"
MONO__IMP:"fun", "bool", "Abool"
MONO__NOT:"fun", "bool", "~", "Abool"
MONO__NOT__EQ:"fun", "bool", "~", "=", "Abool", "Abool ==> Abool <=> ~Abool ==> ~Abool"
MONO__ALL:"fun", "bool", "AA", "AA->bool AA"
MONO__EXISTS:"fun", "bool", "AA", "AA->bool AA"
MONO__COND:"fun", "bool", "COND", "Abool", "if Abool then Abool else Abool"
EXISTS__REFL:"fun", "bool", "=", "AA"
EXISTS__UNIQUE__REFL:"fun", "bool", "_3F_21", "=", "AA", "_3F_21 (\AA. AA = AA)"
UNWIND__THM1:"fun", "bool", "=", "(?AA. AA = AA /\ AA->bool AA) <=> AA->bool AA", "AA", "AA->bool AA"
UNWIND__THM2:"fun", "bool", "=", "(?AA. AA = AA /\ AA->bool AA) <=> AA->bool AA", "AA", "AA->bool AA"
UNWIND__FORALL__THM1:"fun", "bool", "=", "(!AA. AA = AA ==> AA->bool AA) <=> AA->bool AA", "AA", "AA->bool AA"
UNWIND__FORALL__THM2:"fun", "bool", "=", "(!AA. AA = AA ==> AA->bool AA) <=> AA->bool AA", "AA", "AA->bool AA"
SKOLEM__THM:"fun", "bool", "=", "(!AB. ?AA. AB->A->bool AB AA) <=> (?AB->A. !AB. AB->A->bool AB (AB->A AB))", "AA", "AB", "AB->A AB", "AB->A->bool AB (AB->A AB)", "AB->A->bool AB AA"
bool__case__thm__0:"fun", "bool", "T", "COND", "=", "AA", "T", "if T then AA else AA"
bool__case__thm__e1:"fun", "bool", "F", "COND", "=", "AA", "F", "if F then AA else AA"
bool__case__ID:"fun", "bool", "COND", "=", "AA", "Abool", "if Abool then AA else AA"
boolAxiom:"fun", "bool", "T", "F", "=", "AA", "Abool->A F", "Abool->A T", "F", "T"
bool__INDUCT:"fun", "bool", "T", "F", "Abool", "Abool->bool Abool", "Abool->bool F", "Abool->bool T", "F", "T"
bool__case__CONG:"fun", "bool", "~", "COND", "=", "AA", "Abool", "Abool <=> Abool", "if Abool then AA else AA"
FORALL__BOOL:"fun", "bool", "T", "F", "=", "(!Abool. Abool->bool Abool) <=> Abool->bool T /\ Abool->bool F", "Abool", "Abool->bool Abool", "Abool->bool F", "Abool->bool T", "F", "T"
UEXISTS__OR__THM:"fun", "bool", "_3F_21", "AA", "AA->bool AA", "_3F_21 (\AA. AA->bool AA \/ AA->bool AA)", "_3F_21 (\AA. AA->bool AA)"
UEXISTS__SIMP:"fun", "bool", "_3F_21", "=", "AA", "Abool", "_3F_21 (\AA. Abool)", "_3F_21 (\AA. Abool) <=> Abool /\ (!AA AA. AA = AA)"
RES__ABSTRACT__DEF__0:"fun", "bool", "RES__ABSTRACT", "IN", "=", "AB", "AB->A", "AB->A AB", "AB->bool", "IN AB AB->bool", "RES__ABSTRACT AB->bool AB->A AB"
RES__ABSTRACT__DEF__e1:"fun", "bool", "RES__ABSTRACT", "IN", "=", "AA", "AA->B", "AA->B AA", "AA->bool", "IN AA AA->bool", "RES__ABSTRACT AA->bool AA->B"
RES__FORALL__THM:"fun", "bool", "RES__FORALL", "IN", "=", "AA", "AA->bool", "AA->bool AA", "IN AA AA->bool", "RES__FORALL AA->bool AA->bool", "RES__FORALL AA->bool AA->bool <=> (!AA. IN AA AA->bool ==> AA->bool AA)"
RES__EXISTS__THM:"fun", "bool", "RES__EXISTS", "IN", "=", "AA", "AA->bool", "AA->bool AA", "IN AA AA->bool", "RES__EXISTS AA->bool AA->bool", "RES__EXISTS AA->bool AA->bool <=> (?AA. IN AA AA->bool /\ AA->bool AA)"
RES__EXISTS__UNIQUE__THM:"fun", "bool", "RES__FORALL", "RES__EXISTS__UNIQUE", "RES__EXISTS", "=", "AA", "AA->bool", "AA->bool AA", "RES__EXISTS AA->bool (\AA. AA->bool AA)", "RES__EXISTS__UNIQUE AA->bool AA->bool", "RES__EXISTS__UNIQUE AA->bool AA->bool <=> RES__EXISTS AA->bool (\AA. AA->bool AA) /\ RES__FORALL AA->bool (\AA. RES__FORALL AA->bool (\AA. AA->bool AA /\ AA->bool AA ==> AA = AA))", "RES__FORALL AA->bool (\AA. AA->bool AA /\ AA->bool AA ==> AA = AA)", "RES__FORALL AA->bool (\AA. RES__FORALL AA->bool (\AA. AA->bool AA /\ AA->bool AA ==> AA = AA))"
RES__SELECT__THM:"fun", "bool", "_40", "RES__SELECT", "IN", "=", "AA", "AA->bool", "AA->bool AA", "IN AA AA->bool", "RES__SELECT AA->bool AA->bool", "_40 (\AA. IN AA AA->bool /\ AA->bool AA)"
RES__FORALL__TRUE:"fun", "bool", "T", "RES__FORALL", "=", "AA->bool", "RES__FORALL AA->bool (\AA. T)", "RES__FORALL AA->bool (\AA. T) <=> T", "T"
RES__EXISTS__FALSE:"fun", "bool", "RES__EXISTS", "F", "=", "AA->bool", "F", "RES__EXISTS AA->bool (\AA. F)", "RES__EXISTS AA->bool (\AA. F) <=> F"
BOOL__FUN__CASES__THM:"fun", "bool", "~", "T", "F", "=", "Abool", "Abool->bool", "F", "T"
BOOL__FUN__INDUCT:"fun", "bool", "~", "T", "F", "A(bool->bool)->bool (\Abool. Abool)", "A(bool->bool)->bool (\Abool. F)", "A(bool->bool)->bool (\Abool. T)", "A(bool->bool)->bool (\Abool. ~Abool)", "A(bool->bool)->bool Abool->bool", "Abool", "Abool->bool", "F", "T"
literal__case__THM:"fun", "bool", "literal__case", "=", "AB", "AB->A", "AB->A AB", "literal__case AB->A AB"
literal__case__RAND:"fun", "bool", "literal__case", "=", "AA->bool (AB->A AB)", "AA->bool (literal__case (\AB. AB->A AB) AB)", "AA->bool (literal__case (\AB. AB->A AB) AB) <=> literal__case (\AB. AA->bool (AB->A AB)) AB", "AB", "AB->A AB", "literal__case (\AB. AA->bool (AB->A AB)) AB", "literal__case (\AB. AB->A AB) AB"
literal__case__RATOR:"fun", "bool", "literal__case", "=", "AB", "AC", "AC->B->A AC", "AC->B->A AC AB", "literal__case (\AC. AC->B->A AC AB) AC", "literal__case (\AC. AC->B->A AC) AC AB"
literal__case__CONG:"fun", "bool", "literal__case", "=", "AB", "AB->A", "AB->A AB", "literal__case AB->A AB"
literal__case__id:"fun", "bool", "literal__case", "COND", "=", "AA", "AB", "if AA = AA then AB else AB", "literal__case (\AA. if AA = AA then AB else AB) AA"
BOUNDED__THM:"fun", "bool", "T", "BOUNDED", "=", "Abool", "BOUNDED Abool", "BOUNDED Abool <=> T", "T"
LCOMM__THM:"fun", "bool", "=", "AA", "AA->A->A (AA->A->A AA AA) AA", "AA->A->A AA (AA->A->A AA AA)", "AA->A->A AA AA"
DATATYPE__TAG__THM:"fun", "bool", "T", "DATATYPE", "=", "AA", "DATATYPE AA", "DATATYPE AA <=> T", "T"
DATATYPE__BOOL:"fun", "bool", "T", "F", "DATATYPE", "=", "Abool->bool->bool T F", "DATATYPE (Abool->bool->bool T F)", "DATATYPE (Abool->bool->bool T F) <=> T", "F", "T"
itself__TY__DEF:"itself", "fun", "bool", "TYPE__DEFINITION", "ARB", "$equals", "$equals ARB", "A(A)itself->A", "ARB", "TYPE__DEFINITION ($equals ARB) A(A)itself->A"
ITSELF__UNIQUE:"itself", "fun", "bool", "the__value", "=", "A(A)itself", "the__value"
itself__Axiom:"itself", "fun", "bool", "the__value", "=", "A(A)itself->B the__value", "AB", "the__value"
itself__induction:"itself", "fun", "bool", "the__value", "A(A)itself", "A(A)itself->bool A(A)itself", "A(A)itself->bool the__value", "the__value"
itself__case__thm:"itself", "fun", "bool", "the__value", "itself__case", "=", "AB", "itself__case the__value AB", "the__value"
PULL__EXISTS__0:"fun", "bool", "=", "(?AA. AA->bool AA) ==> Abool <=> (!AA. AA->bool AA ==> Abool)", "AA", "AA->bool AA", "Abool"
PULL__EXISTS__1:"fun", "bool", "=", "(?AA. AA->bool AA) /\ Abool <=> (?AA. AA->bool AA /\ Abool)", "AA", "AA->bool AA", "Abool"
PULL__EXISTS__e2:"fun", "bool", "=", "AA", "AA->bool AA", "Abool", "Abool /\ (?AA. AA->bool AA) <=> (?AA. Abool /\ AA->bool AA)"
PULL__FORALL__0:"fun", "bool", "=", "AA", "AA->bool AA", "Abool", "Abool ==> (!AA. AA->bool AA) <=> (!AA. Abool ==> AA->bool AA)"
PULL__FORALL__1:"fun", "bool", "=", "(!AA. AA->bool AA) /\ Abool <=> (!AA. AA->bool AA /\ Abool)", "AA", "AA->bool AA", "Abool"
PULL__FORALL__e2:"fun", "bool", "=", "AA", "AA->bool AA", "Abool", "Abool /\ (!AA. AA->bool AA) <=> (!AA. Abool /\ AA->bool AA)"
PEIRCE:"fun", "bool", "Abool"
JRH__INDUCT__UTIL:"fun", "bool", "=", "$exists", "$exists AA->bool", "AA", "AA->bool", "AA->bool AA"
EXT__POINT__DEF:"fun", "bool", "EXT__POINT", "=", "AA->B", "AA->B (EXT__POINT AA->B AA->B)", "EXT__POINT AA->B AA->B"
EXT__POINT0:"fun", "bool", "EXT__POINT", "=", "AA->B", "AA->B (EXT__POINT AA->B AA->B)", "AA->B (EXT__POINT AA->B AA->B) = AA->B (EXT__POINT AA->B AA->B) <=> AA->B = AA->B", "EXT__POINT AA->B AA->B"
UNIV__POINT__DEF:"fun", "bool", "UNIV__POINT", "AA", "AA->bool", "AA->bool (UNIV__POINT AA->bool)", "AA->bool AA", "UNIV__POINT AA->bool"
UNIV__POINT0:"fun", "bool", "UNIV__POINT", "=", "AA", "AA->bool", "AA->bool (UNIV__POINT AA->bool)", "AA->bool (UNIV__POINT AA->bool) <=> (!AA. AA->bool AA)", "AA->bool AA", "UNIV__POINT AA->bool"
AND__IMP:"fun", "bool", "=", "Abool", "Abool /\ Abool ==> Abool <=> Abool ==> Abool ==> Abool"
NOT__NOT:"fun", "bool", "~", "=", "Abool", "~ ~Abool <=> Abool"
AND__INV:"fun", "bool", "~", "F", "=", "Abool", "F", "~Abool /\ Abool <=> F"
AND__INV__IMP:"fun", "bool", "~", "F", "Abool", "F"
OR__DUAL:"fun", "bool", "~", "F", "=", "Abool", "F", "~(Abool \/ Abool) ==> F <=> ~Abool ==> ~Abool ==> F"
OR__DUAL2:"fun", "bool", "~", "F", "=", "Abool", "F", "~(Abool \/ Abool) ==> F <=> (Abool ==> F) ==> ~Abool ==> F"
OR__DUAL3:"fun", "bool", "~", "F", "=", "Abool", "F", "~(~Abool \/ Abool) ==> F <=> Abool ==> ~Abool ==> F"
AND__INV2:"fun", "bool", "~", "F", "Abool", "F"
NOT__ELIM2:"fun", "bool", "~", "F", "=", "Abool", "F", "~Abool ==> F <=> Abool"
EQT__Imp1:"fun", "bool", "T", "=", "Abool", "Abool <=> T", "T"
EQF__Imp1:"fun", "bool", "~", "F", "=", "Abool", "Abool <=> F", "F"
dc__eq:"fun", "bool", "~", "=", "(Abool <=> Abool <=> Abool) <=> (Abool \/ Abool \/ Abool) /\ (Abool \/ ~Abool \/ ~Abool) /\ (Abool \/ ~Abool \/ ~Abool) /\ (Abool \/ ~Abool \/ ~Abool)", "Abool", "Abool <=> Abool", "Abool <=> Abool <=> Abool"
dc__conj:"fun", "bool", "~", "=", "(Abool <=> Abool /\ Abool) <=> (Abool \/ ~Abool \/ ~Abool) /\ (Abool \/ ~Abool) /\ (Abool \/ ~Abool)", "Abool", "Abool <=> Abool /\ Abool"
dc__disj:"fun", "bool", "~", "=", "(Abool <=> Abool \/ Abool) <=> (Abool \/ ~Abool) /\ (Abool \/ ~Abool) /\ (Abool \/ Abool \/ ~Abool)", "Abool", "Abool <=> Abool \/ Abool"
dc__imp:"fun", "bool", "~", "=", "(Abool <=> Abool ==> Abool) <=> (Abool \/ Abool) /\ (Abool \/ ~Abool) /\ (~Abool \/ Abool \/ ~Abool)", "Abool", "Abool <=> Abool ==> Abool"
dc__neg:"fun", "bool", "~", "=", "(Abool <=> ~Abool) <=> (Abool \/ Abool) /\ (~Abool \/ ~Abool)", "Abool", "Abool <=> ~Abool"
dc__cond:"fun", "bool", "~", "COND", "=", "(Abool <=> (if Abool then Abool else Abool)) <=> (Abool \/ Abool \/ ~Abool) /\ (Abool \/ ~Abool \/ ~Abool) /\ (Abool \/ ~Abool \/ ~Abool) /\ (~Abool \/ Abool \/ ~Abool) /\ (Abool \/ Abool \/ ~Abool)", "Abool", "Abool <=> (if Abool then Abool else Abool)", "if Abool then Abool else Abool"
pth__ni1:"fun", "bool", "~", "Abool"
pth__ni2:"fun", "bool", "~", "Abool"
pth__no1:"fun", "bool", "~", "Abool"
pth__no2:"fun", "bool", "~", "Abool"
pth__an1:"fun", "bool", "Abool"
pth__an2:"fun", "bool", "Abool"
pth__nn:"fun", "bool", "~", "Abool"
stmarker__def:"fun", "bool", "stmarker", "=", "AA", "stmarker AA"
move__left__conj__0:"fun", "bool", "stmarker", "=", "Abool", "Abool /\ stmarker Abool <=> stmarker Abool /\ Abool", "stmarker Abool"
move__left__conj__1:"fun", "bool", "stmarker", "=", "(stmarker Abool /\ Abool) /\ Abool <=> stmarker Abool /\ Abool /\ Abool", "Abool", "stmarker Abool"
move__left__conj__e2:"fun", "bool", "stmarker", "=", "Abool", "Abool /\ stmarker Abool /\ Abool <=> stmarker Abool /\ Abool /\ Abool", "stmarker Abool"
move__right__conj__0:"fun", "bool", "stmarker", "=", "Abool", "stmarker Abool", "stmarker Abool /\ Abool <=> Abool /\ stmarker Abool"
move__right__conj__1:"fun", "bool", "stmarker", "=", "Abool", "Abool /\ Abool /\ stmarker Abool <=> (Abool /\ Abool) /\ stmarker Abool", "stmarker Abool"
move__right__conj__e2:"fun", "bool", "stmarker", "=", "(Abool /\ stmarker Abool) /\ Abool <=> (Abool /\ Abool) /\ stmarker Abool", "Abool", "stmarker Abool"
move__left__disj__0:"fun", "bool", "stmarker", "=", "Abool", "Abool \/ stmarker Abool <=> stmarker Abool \/ Abool", "stmarker Abool"
move__left__disj__1:"fun", "bool", "stmarker", "=", "(stmarker Abool \/ Abool) \/ Abool <=> stmarker Abool \/ Abool \/ Abool", "Abool", "stmarker Abool"
move__left__disj__e2:"fun", "bool", "stmarker", "=", "Abool", "Abool \/ stmarker Abool \/ Abool <=> stmarker Abool \/ Abool \/ Abool", "stmarker Abool"
move__right__disj__0:"fun", "bool", "stmarker", "=", "Abool", "stmarker Abool", "stmarker Abool \/ Abool <=> Abool \/ stmarker Abool"
move__right__disj__1:"fun", "bool", "stmarker", "=", "Abool", "Abool \/ Abool \/ stmarker Abool <=> (Abool \/ Abool) \/ stmarker Abool", "stmarker Abool"
move__right__disj__e2:"fun", "bool", "stmarker", "=", "(Abool \/ stmarker Abool) \/ Abool <=> (Abool \/ Abool) \/ stmarker Abool", "Abool", "stmarker Abool"
unint__def:"fun", "bool", "unint", "=", "AA", "unint AA"
Abbrev__def:"fun", "bool", "Abbrev", "=", "Abbrev Abool", "Abbrev Abool <=> Abool", "Abool"
IfCases__def:"fun", "bool", "T", "IfCases", "=", "IfCases", "IfCases <=> T", "T"
AC__DEF:"fun", "bool", "AC", "=", "AC Abool Abool", "AC Abool Abool <=> Abool /\ Abool", "Abool"
Cong__def:"fun", "bool", "Cong", "=", "Abool", "Cong Abool", "Cong Abool <=> Abool"
label__def:"label", "fun", "bool", "_3A_2D", "=", "Abool", "Alabel", "_3A_2D Alabel Abool", "_3A_2D Alabel Abool <=> Abool"
K__DEF:"fun", "bool", "K", "=", "AB", "K"
S__DEF:"fun", "bool", "S", "=", "AC", "AC->B AC", "AC->B->A AC (AC->B AC)", "S"
I__DEF:"fun", "bool", "S", "K", "I", "=", "I", "K", "S K K"
C__DEF:"fun", "bool", "C", "=", "AB", "AB->C->A AB AC", "AC", "C"
W__DEF:"fun", "bool", "W", "=", "AB", "AB->B->A AB AB", "W"
o__DEF:"fun", "bool", "o", "=", "AB->A", "AB->A (AC->B AC)", "AC", "AC->B", "AC->B AC", "o AB->A AC->B"
APP__DEF:"fun", "bool", "_3A_3E", "=", "AB", "AB->A", "AB->A AB", "_3A_3E AB AB->A"
UPDATE__def:"fun", "bool", "UPDATE", "COND", "=", "AA", "AB", "AB->A AB", "UPDATE AB AA", "if AB = AB then AA else AB->A AB"
o__THM:"fun", "bool", "o", "=", "AB->A", "AB->A (AC->B AC)", "AC", "AC->B", "AC->B AC", "o AB->A AC->B AC"
o__ASSOC:"fun", "bool", "o", "=", "AB->A", "AC->D", "AD->B", "o (o AB->A AD->B) AC->D", "o AB->A (o AD->B AC->D)", "o AB->A AD->B", "o AD->B AC->D"
o__ABS__L:"fun", "bool", "o", "=", "AB", "AB->A (AC->B AC)", "AB->A AB", "AC", "AC->B", "AC->B AC", "o (\AB. AB->A AB) AC->B"
o__ABS__R:"fun", "bool", "o", "=", "AB->A", "AB->A (AC->B AC)", "AC", "AC->B AC", "o AB->A (\AC. AC->B AC)"
K__THM:"fun", "bool", "K", "=", "AA", "AB", "K AB AA"
S__THM:"fun", "bool", "S", "=", "AC", "AC->B", "AC->B AC", "AC->B->A", "AC->B->A AC (AC->B AC)", "S AC->B->A AC->B AC"
S__ABS__L:"fun", "bool", "S", "=", "AC", "AC->B", "AC->B AC", "AC->B->A AC", "AC->B->A AC (AC->B AC)", "S (\AC. AC->B->A AC) AC->B"
S__ABS__R:"fun", "bool", "S", "=", "AC", "AC->B AC", "AC->B->A", "AC->B->A AC (AC->B AC)", "S AC->B->A (\AC. AC->B AC)"
C__THM:"fun", "bool", "C", "=", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "C AB->C->A AC AB"
C__ABS__L:"fun", "bool", "C", "=", "AB", "AB->C->A AB", "AB->C->A AB AC", "AC", "C (\AB. AB->C->A AB) AC"
W__THM:"fun", "bool", "W", "=", "AB", "AB->B->A", "AB->B->A AB AB", "W AB->B->A AB"
I__THM:"fun", "bool", "I", "=", "AA", "I AA"
I__o__ID__0:"fun", "bool", "o", "I", "=", "AA->B", "I", "o I AA->B"
I__o__ID__e1:"fun", "bool", "o", "I", "=", "AA->B", "I", "o AA->B I"
K__o__THM__0:"fun", "bool", "o", "K", "=", "AB->A", "AC", "K AC", "o (K AC) AB->A"
K__o__THM__e1:"fun", "bool", "o", "K", "=", "AC", "AC->B", "AC->B AC", "K (AC->B AC)", "K AC", "o AC->B (K AC)"
UPDATE__APPLY__0:"fun", "bool", "UPDATE", "=", "AA", "AA->B", "AB", "UPDATE AA AB AA->B AA"
UPDATE__APPLY__e1:"fun", "bool", "~", "UPDATE", "=", "AA", "AB", "AB->A", "AB->A AB", "UPDATE AB AA AB->A AB"
APPLY__UPDATE__THM:"fun", "bool", "UPDATE", "COND", "=", "AA", "AB", "AB->A", "AB->A AB", "UPDATE AB AA AB->A AB", "if AB = AB then AA else AB->A AB"
UPDATE__COMMUTES:"fun", "bool", "~", "UPDATE", "=", "AA", "AA->B", "AB", "UPDATE AA AB (UPDATE AA AB AA->B)", "UPDATE AA AB AA->B"
UPDATE__EQ:"fun", "bool", "UPDATE", "=", "AA", "AA->B", "AB", "UPDATE AA AB (UPDATE AA AB AA->B)", "UPDATE AA AB AA->B"
UPDATE__APPLY__ID:"fun", "bool", "UPDATE", "=", "AA", "AA->B", "AA->B AA", "AA->B AA = AB <=> UPDATE AA AB AA->B = AA->B", "AB", "UPDATE AA AB AA->B"
UPDATE__APPLY__IMP__ID:"fun", "bool", "UPDATE", "=", "AA", "AA->B", "AA->B AA", "AB", "UPDATE AA AB AA->B"
APPLY__UPDATE__ID:"fun", "bool", "UPDATE", "=", "AA", "AA->B", "AA->B AA", "UPDATE AA (AA->B AA) AA->B"
UPD11__SAME__BASE:"fun", "bool", "~", "UPDATE", "=", "AA", "AA->B", "AB", "UPDATE AA AB AA->B", "UPDATE AA AB AA->B = UPDATE AA AB AA->B <=> AA = AA /\ AB = AB \/ ~(AA = AA) /\ UPDATE AA AB AA->B = AA->B /\ UPDATE AA AB AA->B = AA->B"
SAME__KEY__UPDATE__DIFFER:"fun", "bool", "~", "UPDATE", "=", "AA", "AA->B", "AB", "UPDATE AA AB AA->B"
UPD11__SAME__KEY__AND__BASE:"fun", "bool", "UPDATE", "=", "AA", "AA->B", "AB", "UPDATE AA AB AA->B", "UPDATE AA AB AA->B = UPDATE AA AB AA->B <=> AB = AB"
UPD__SAME__KEY__UNWIND:"fun", "bool", "UPDATE", "=", "AA", "AA->B", "AB", "UPDATE AA AB AA->B"
GEN__LET__RAND:"fun", "bool", "o", "LET", "=", "AB->A", "AB->A (LET AC->B AC)", "AC", "AC->B", "LET (o AB->A AC->B) AC", "LET AC->B AC", "o AB->A AC->B"
GEN__LET__RATOR:"fun", "bool", "LET", "C", "=", "AB", "AC", "AC->B->A", "C AC->B->A AB", "LET (C AC->B->A AB) AC", "LET AC->B->A AC AB"
LET__FORALL__ELIM:"fun", "bool", "o", "S", "LET", "C", "Abbrev", "=", "$imply", "$forall", "$equals", "$equals", "$forall (S (o $imply (o Abbrev (C $equals AA))) AA->bool)", "$imply", "AA", "AA->bool", "Abbrev", "C $equals AA", "LET AA->bool AA", "LET AA->bool AA <=> $forall (S (o $imply (o Abbrev (C $equals AA))) AA->bool)", "S (o $imply (o Abbrev (C $equals AA))) AA->bool", "o $imply (o Abbrev (C $equals AA))", "o Abbrev (C $equals AA)"
GEN__literal__case__RAND:"fun", "bool", "o", "literal__case", "=", "AB->A", "AB->A (literal__case AC->B AC)", "AC", "AC->B", "literal__case (o AB->A AC->B) AC", "literal__case AC->B AC", "o AB->A AC->B"
GEN__literal__case__RATOR:"fun", "bool", "literal__case", "C", "=", "AB", "AC", "AC->B->A", "C AC->B->A AB", "literal__case (C AC->B->A AB) AC", "literal__case AC->B->A AC AB"
literal__case__FORALL__ELIM:"fun", "bool", "o", "literal__case", "S", "C", "Abbrev", "=", "$imply", "$forall", "$equals", "$equals", "$forall (S (o $imply (o Abbrev (C $equals AA))) AA->bool)", "$imply", "AA", "AA->bool", "Abbrev", "C $equals AA", "S (o $imply (o Abbrev (C $equals AA))) AA->bool", "literal__case AA->bool AA", "literal__case AA->bool AA <=> $forall (S (o $imply (o Abbrev (C $equals AA))) AA->bool)", "o $imply (o Abbrev (C $equals AA))", "o Abbrev (C $equals AA)"
FAIL__DEF:"fun", "bool", "FAIL", "=", "AB", "FAIL"
FAIL__THM:"fun", "bool", "FAIL", "=", "AA", "AB", "FAIL AB AA"
IS__SUM__REP0:"fun", "bool", "~", "IS__SUM__REP", "=", "AA", "AB", "Abool", "Abool->A->B->bool", "IS__SUM__REP Abool->A->B->bool", "IS__SUM__REP Abool->A->B->bool <=> (?AA AB. Abool->A->B->bool = (\Abool AA AB. AA = AA /\ Abool) \/ Abool->A->B->bool = (\Abool AA AB. AB = AB /\ ~Abool))"
sum__TY__DEF:"sum", "fun", "bool", "TYPE__DEFINITION", "IS__SUM__REP", "AA+B->bool->A->B->bool", "IS__SUM__REP", "TYPE__DEFINITION IS__SUM__REP AA+B->bool->A->B->bool"
sum__ISO__DEF__0:"sum", "fun", "bool", "REP__sum", "ABS__sum", "=", "AA+B", "ABS__sum (REP__sum AA+B)", "REP__sum AA+B"
sum__ISO__DEF__e1:"sum", "fun", "bool", "REP__sum", "IS__SUM__REP", "ABS__sum", "=", "ABS__sum Abool->A->B->bool", "Abool->A->B->bool", "IS__SUM__REP Abool->A->B->bool", "IS__SUM__REP Abool->A->B->bool <=> REP__sum (ABS__sum Abool->A->B->bool) = Abool->A->B->bool", "REP__sum (ABS__sum Abool->A->B->bool)"
INL__DEF:"sum", "fun", "bool", "INL", "ABS__sum", "=", "AB", "ABS__sum (\Abool AB AA. AB = AB /\ Abool)", "Abool", "INL AB"
INR__DEF:"sum", "fun", "bool", "~", "INR", "ABS__sum", "=", "AB", "ABS__sum (\Abool AA AB. AB = AB /\ ~Abool)", "Abool", "INR AB"
INL__11:"sum", "fun", "bool", "INL", "=", "AB", "INL AB", "INL AB = INL AB <=> AB = AB"
INR__11:"sum", "fun", "bool", "INR", "=", "AB", "INR AB", "INR AB = INR AB <=> AB = AB"
INR__INL__11__0:"sum", "fun", "bool", "INL", "=", "AB", "INL AB", "INL AB = INL AB <=> AB = AB"
INR__INL__11__e1:"sum", "fun", "bool", "INR", "=", "AB", "INR AB", "INR AB = INR AB <=> AB = AB"
INR__neq__INL:"sum", "fun", "bool", "~", "INR", "INL", "=", "AA", "AB", "INL AB", "INR AA"
sum__axiom:"sum", "fun", "bool", "o", "_3F_21", "INR", "INL", "=", "AA+B->C", "AA->C", "AB->C", "INL", "INR", "_3F_21 (\AA+B->C. o AA+B->C INL = AA->C /\ o AA+B->C INR = AB->C)", "o AA+B->C INL", "o AA+B->C INR"
sum__INDUCT:"sum", "fun", "bool", "INR", "INL", "AA", "AA+B", "AA+B->bool (INL AA)", "AA+B->bool (INR AB)", "AA+B->bool AA+B", "AB", "INL AA", "INR AB"
FORALL__SUM:"sum", "fun", "bool", "INR", "INL", "=", "(!AA+B. AA+B->bool AA+B) <=> (!AA. AA+B->bool (INL AA)) /\ (!AB. AA+B->bool (INR AB))", "AA", "AA+B", "AA+B->bool (INL AA)", "AA+B->bool (INR AB)", "AA+B->bool AA+B", "AB", "INL AA", "INR AB"
EXISTS__SUM:"sum", "fun", "bool", "INR", "INL", "=", "(?AA+B. AA+B->bool AA+B) <=> (?AA. AA+B->bool (INL AA)) \/ (?AB. AA+B->bool (INR AB))", "AA", "AA+B", "AA+B->bool (INL AA)", "AA+B->bool (INR AB)", "AA+B->bool AA+B", "AB", "INL AA", "INR AB"
sum__Axiom:"sum", "fun", "bool", "INR", "INL", "=", "AA", "AA+C->B (INL AA)", "AA+C->B (INR AC)", "AA->B AA", "AC", "AC->B AC", "INL AA", "INR AC"
sum__CASES:"sum", "fun", "bool", "INR", "INL", "=", "AA", "AA+B", "AB", "INL AA", "INR AB"
sum__distinct:"sum", "fun", "bool", "~", "INR", "INL", "=", "AA", "AB", "INL AA", "INR AB"
sum__distinct1:"sum", "fun", "bool", "~", "INR", "INL", "=", "AA", "AB", "INL AB", "INR AA"
ISL__0:"sum", "fun", "bool", "ISL", "INL", "AB", "INL AB", "ISL (INL AB)"
ISL__e1:"sum", "fun", "bool", "~", "ISL", "INR", "AB", "INR AB", "ISL (INR AB)"
ISR__0:"sum", "fun", "bool", "ISR", "INR", "AB", "INR AB", "ISR (INR AB)"
ISR__e1:"sum", "fun", "bool", "~", "ISR", "INL", "AB", "INL AB", "ISR (INL AB)"
OUTL0:"sum", "fun", "bool", "OUTL", "INL", "=", "AB", "INL AB", "OUTL (INL AB)"
OUTR0:"sum", "fun", "bool", "OUTR", "INR", "=", "AB", "INR AB", "OUTR (INR AB)"
ISL__OR__ISR:"sum", "fun", "bool", "ISR", "ISL", "AA+B", "ISL AA+B", "ISR AA+B"
INL0:"sum", "fun", "bool", "OUTL", "ISL", "INL", "=", "AA+B", "INL (OUTL AA+B)", "ISL AA+B", "OUTL AA+B"
INR0:"sum", "fun", "bool", "OUTR", "ISR", "INR", "=", "AA+B", "INR (OUTR AA+B)", "ISR AA+B", "OUTR AA+B"
sum__case__def__0:"sum", "fun", "bool", "sum__CASE", "INL", "=", "AA->B", "AC", "AC->B", "AC->B AC", "INL AC", "sum__CASE (INL AC) AC->B AA->B"
sum__case__def__e1:"sum", "fun", "bool", "sum__CASE", "INR", "=", "AA->B", "AC", "AC->B", "AC->B AC", "INR AC", "sum__CASE (INR AC) AA->B AC->B"
sum__case__cong:"sum", "fun", "bool", "sum__CASE", "INR", "INL", "=", "AA", "AA+B", "AA->C", "AA->C AA", "AB", "AB->C", "AB->C AB", "INL AA", "INR AB", "sum__CASE AA+B AA->C AB->C"
SUM__MAP__def__0:"sum", "fun", "bool", "_2B_2B", "INL", "=", "AA->B", "AD", "AD->C", "AD->C AD", "INL (AD->C AD)", "INL AD", "_2B_2B AD->C AA->B (INL AD)"
SUM__MAP__def__e1:"sum", "fun", "bool", "_2B_2B", "INR", "=", "AA->B", "AD", "AD->C", "AD->C AD", "INR (AD->C AD)", "INR AD", "_2B_2B AA->B AD->C (INR AD)"
SUM__MAP:"sum", "fun", "bool", "_2B_2B", "OUTR", "OUTL", "ISL", "INR", "INL", "COND", "=", "AC+D", "AC->A", "AC->A (OUTL AC+D)", "AD->B", "AD->B (OUTR AC+D)", "INL (AC->A (OUTL AC+D))", "INR (AD->B (OUTR AC+D))", "ISL AC+D", "OUTL AC+D", "OUTR AC+D", "_2B_2B AC->A AD->B AC+D", "if ISL AC+D then INL (AC->A (OUTL AC+D)) else INR (AD->B (OUTR AC+D))"
SUM__MAP__CASE:"sum", "fun", "bool", "sum__CASE", "o", "_2B_2B", "INR", "INL", "=", "AA+C", "AA->B", "AC->D", "INL", "INR", "_2B_2B AA->B AC->D AA+C", "o INL AA->B", "o INR AC->D", "sum__CASE AA+C (o INL AA->B) (o INR AC->D)"
SUM__MAP__I:"sum", "fun", "bool", "_2B_2B", "I", "=", "I", "_2B_2B I I"
cond__sum__expand__0:"sum", "fun", "bool", "INR", "INL", "COND", "=", "(if Abool then INR AB else INL AA) = INR AB <=> Abool /\ AB = AB", "AA", "AB", "Abool", "INL AA", "INR AB", "if Abool then INR AB else INL AA"
cond__sum__expand__1:"sum", "fun", "bool", "~", "INR", "INL", "COND", "=", "(if Abool then INR AA else INL AB) = INL AB <=> ~Abool /\ AB = AB", "AA", "AB", "Abool", "INL AB", "INR AA", "if Abool then INR AA else INL AB"
cond__sum__expand__2:"sum", "fun", "bool", "INR", "INL", "COND", "=", "(if Abool then INL AB else INR AA) = INL AB <=> Abool /\ AB = AB", "AA", "AB", "Abool", "INL AB", "INR AA", "if Abool then INL AB else INR AA"
cond__sum__expand__e3:"sum", "fun", "bool", "~", "INR", "INL", "COND", "=", "(if Abool then INL AA else INR AB) = INR AB <=> ~Abool /\ AB = AB", "AA", "AB", "Abool", "INL AA", "INR AB", "if Abool then INL AA else INR AB"
NOT__ISL__ISR:"sum", "fun", "bool", "~", "ISR", "ISL", "=", "AA+B", "ISL AA+B", "ISR AA+B", "~ISL AA+B <=> ISR AA+B"
NOT__ISR__ISL:"sum", "fun", "bool", "~", "ISR", "ISL", "=", "AA+B", "ISL AA+B", "ISR AA+B", "~ISR AA+B <=> ISL AA+B"
datatype__sum:"sum", "fun", "bool", "INR", "INL", "DATATYPE", "A(B->B+C)->(C->B+C)->A INL INR", "DATATYPE (A(B->B+C)->(C->B+C)->A INL INR)", "INL", "INR"
one__TY__DEF:"one", "fun", "bool", "TYPE__DEFINITION", "Abool", "Aone->bool", "TYPE__DEFINITION (\Abool. Abool) Aone->bool"
one__axiom:"one", "fun", "bool", "=", "AA->one"
one__DEF:"one", "fun", "bool", "one0", "_40", "T", "=", "T", "_40 (\Aone. T)", "one0"
one1:"one", "fun", "bool", "one0", "=", "Aone", "one0"
one__Axiom:"one", "fun", "bool", "one0", "_3F_21", "=", "AA", "Aone->A one0", "_3F_21 (\Aone->A. Aone->A one0 = AA)", "one0"
one__prim__rec:"one", "fun", "bool", "one0", "=", "AA", "Aone->A one0", "one0"
one__induction:"one", "fun", "bool", "one0", "Aone", "Aone->bool Aone", "Aone->bool one0", "one0"
FORALL__ONE:"one", "fun", "bool", "one0", "=", "(!Aone. Aone->bool Aone) <=> Aone->bool one0", "Aone", "Aone->bool Aone", "Aone->bool one0", "one0"
one__case__def:"one", "fun", "bool", "one__CASE", "=", "AA", "Aone", "one__CASE Aone AA"
one__case__thm:"one", "fun", "bool", "one__CASE", "one0", "=", "AA", "one0", "one__CASE one0 AA"
option__TY__DEF:"sum", "option", "one", "fun", "bool", "TYPE__DEFINITION", "T", "A(A)option->A+one", "T", "TYPE__DEFINITION (\AA+one. T) A(A)option->A+one"
option__REP__ABS__DEF__0:"sum", "option", "one", "fun", "bool", "option__REP", "option__ABS", "=", "A(A)option", "option__ABS (option__REP A(A)option)", "option__REP A(A)option"
option__REP__ABS__DEF__e1:"sum", "option", "one", "fun", "bool", "option__REP", "option__ABS", "T", "=", "(\AA+one. T) AA+one", "(\AA+one. T) AA+one <=> option__REP (option__ABS AA+one) = AA+one", "AA+one", "T", "option__ABS AA+one", "option__REP (option__ABS AA+one)"
SOME__DEF:"sum", "option", "one", "fun", "bool", "option__ABS", "SOME", "INL", "=", "AA", "INL AA", "SOME AA", "option__ABS (INL AA)"
NONE__DEF:"sum", "option", "one", "fun", "bool", "option__ABS", "one0", "NONE", "INR", "=", "INR one0", "NONE", "one0", "option__ABS (INR one0)"
option__Axiom:"option", "fun", "bool", "SOME", "NONE", "=", "A(B)option->A (SOME AB)", "A(B)option->A NONE", "AA", "AB", "AB->A AB", "NONE", "SOME AB"
option__induction:"option", "fun", "bool", "SOME", "NONE", "A(A)option", "A(A)option->bool (SOME AA)", "A(A)option->bool A(A)option", "A(A)option->bool NONE", "AA", "NONE", "SOME AA"
option__nchotomy:"option", "fun", "bool", "SOME", "NONE", "=", "A(A)option", "AA", "NONE", "SOME AA"
option__case__def__0:"option", "fun", "bool", "option__CASE", "NONE", "=", "AA->B", "AB", "NONE", "option__CASE NONE AB AA->B"
option__case__def__e1:"option", "fun", "bool", "option__CASE", "SOME", "=", "AA", "AB", "AB->A", "AB->A AB", "SOME AB", "option__CASE (SOME AB) AA AB->A"
FORALL__OPTION:"option", "fun", "bool", "SOME", "NONE", "=", "(!A(A)option. A(A)option->bool A(A)option) <=> A(A)option->bool NONE /\ (!AA. A(A)option->bool (SOME AA))", "A(A)option", "A(A)option->bool (SOME AA)", "A(A)option->bool A(A)option", "A(A)option->bool NONE", "AA", "NONE", "SOME AA"
EXISTS__OPTION:"option", "fun", "bool", "SOME", "NONE", "=", "(?A(A)option. A(A)option->bool A(A)option) <=> A(A)option->bool NONE \/ (?AA. A(A)option->bool (SOME AA))", "A(A)option", "A(A)option->bool (SOME AA)", "A(A)option->bool A(A)option", "A(A)option->bool NONE", "AA", "NONE", "SOME AA"
SOME__11:"option", "fun", "bool", "SOME", "=", "AA", "SOME AA", "SOME AA = SOME AA <=> AA = AA"
NOT__NONE__SOME:"option", "fun", "bool", "~", "SOME", "NONE", "=", "AA", "NONE", "SOME AA"
NOT__SOME__NONE:"option", "fun", "bool", "~", "SOME", "NONE", "=", "AA", "NONE", "SOME AA"
OPTION__MAP__DEF__0:"option", "fun", "bool", "SOME", "OPTION__MAP", "=", "AB", "AB->A", "AB->A AB", "OPTION__MAP AB->A (SOME AB)", "SOME (AB->A AB)", "SOME AB"
OPTION__MAP__DEF__e1:"option", "fun", "bool", "OPTION__MAP", "NONE", "=", "AA->B", "NONE", "OPTION__MAP AA->B NONE"
IS__SOME__DEF__0:"option", "fun", "bool", "T", "SOME", "IS__SOME", "=", "AA", "IS__SOME (SOME AA)", "IS__SOME (SOME AA) <=> T", "SOME AA", "T"
IS__SOME__DEF__e1:"option", "fun", "bool", "NONE", "IS__SOME", "F", "=", "F", "IS__SOME NONE", "IS__SOME NONE <=> F", "NONE"
IS__NONE__DEF__0:"option", "fun", "bool", "SOME", "IS__NONE", "F", "=", "AA", "F", "IS__NONE (SOME AA)", "IS__NONE (SOME AA) <=> F", "SOME AA"
IS__NONE__DEF__e1:"option", "fun", "bool", "T", "NONE", "IS__NONE", "=", "IS__NONE NONE", "IS__NONE NONE <=> T", "NONE", "T"
THE__DEF:"option", "fun", "bool", "THE", "SOME", "=", "AA", "SOME AA", "THE (SOME AA)"
OPTION__MAP2__DEF:"option", "fun", "bool", "THE", "SOME", "OPTION__MAP2", "NONE", "IS__SOME", "COND", "=", "A(A)option", "A(B)option", "AA->B->C", "AA->B->C (THE A(A)option) (THE A(B)option)", "IS__SOME A(A)option", "IS__SOME A(B)option", "NONE", "OPTION__MAP2 AA->B->C A(A)option A(B)option", "SOME (AA->B->C (THE A(A)option) (THE A(B)option))", "THE A(A)option", "THE A(B)option", "if IS__SOME A(A)option /\ IS__SOME A(B)option then SOME (AA->B->C (THE A(A)option) (THE A(B)option)) else NONE"
OPTION__JOIN__DEF__0:"option", "fun", "bool", "OPTION__JOIN", "NONE", "=", "NONE", "OPTION__JOIN NONE"
OPTION__JOIN__DEF__e1:"option", "fun", "bool", "SOME", "OPTION__JOIN", "=", "A(A)option", "OPTION__JOIN (SOME A(A)option)", "SOME A(A)option"
OPTION__MAP2__THM__0:"option", "fun", "bool", "SOME", "OPTION__MAP2", "=", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "OPTION__MAP2 AB->C->A (SOME AB) (SOME AC)", "SOME (AB->C->A AB AC)", "SOME AB", "SOME AC"
OPTION__MAP2__THM__1:"option", "fun", "bool", "SOME", "OPTION__MAP2", "NONE", "=", "AA", "AA->B->C", "NONE", "OPTION__MAP2 AA->B->C (SOME AA) NONE", "SOME AA"
OPTION__MAP2__THM__2:"option", "fun", "bool", "SOME", "OPTION__MAP2", "NONE", "=", "AA->B->C", "AB", "NONE", "OPTION__MAP2 AA->B->C NONE (SOME AB)", "SOME AB"
OPTION__MAP2__THM__e3:"option", "fun", "bool", "OPTION__MAP2", "NONE", "=", "AA->B->C", "NONE", "OPTION__MAP2 AA->B->C NONE NONE"
IS__NONE__EQ__NONE:"option", "fun", "bool", "NONE", "IS__NONE", "=", "A(A)option", "IS__NONE A(A)option", "IS__NONE A(A)option <=> A(A)option = NONE", "NONE"
NOT__IS__SOME__EQ__NONE:"option", "fun", "bool", "~", "NONE", "IS__SOME", "=", "A(A)option", "IS__SOME A(A)option", "NONE", "~IS__SOME A(A)option <=> A(A)option = NONE"
option__case__ID:"option", "fun", "bool", "option__CASE", "SOME", "NONE", "=", "A(A)option", "NONE", "SOME", "option__CASE A(A)option NONE SOME"
option__case__SOME__ID:"option", "fun", "bool", "option__CASE", "SOME", "=", "A(A)option", "SOME", "option__CASE A(A)option A(A)option SOME"
option__CLAUSES__0:"option", "fun", "bool", "SOME", "=", "AA", "SOME AA", "SOME AA = SOME AA <=> AA = AA"
option__CLAUSES__1:"option", "fun", "bool", "THE", "SOME", "=", "AA", "SOME AA", "THE (SOME AA)"
option__CLAUSES__2:"option", "fun", "bool", "~", "SOME", "NONE", "=", "AA", "NONE", "SOME AA"
option__CLAUSES__3:"option", "fun", "bool", "~", "SOME", "NONE", "=", "AA", "NONE", "SOME AA"
option__CLAUSES__4:"option", "fun", "bool", "T", "SOME", "IS__SOME", "=", "AA", "IS__SOME (SOME AA)", "IS__SOME (SOME AA) <=> T", "SOME AA", "T"
option__CLAUSES__5:"option", "fun", "bool", "NONE", "IS__SOME", "F", "=", "F", "IS__SOME NONE", "IS__SOME NONE <=> F", "NONE"
option__CLAUSES__6:"option", "fun", "bool", "NONE", "IS__NONE", "=", "A(A)option", "IS__NONE A(A)option", "IS__NONE A(A)option <=> A(A)option = NONE", "NONE"
option__CLAUSES__7:"option", "fun", "bool", "~", "NONE", "IS__SOME", "=", "A(A)option", "IS__SOME A(A)option", "NONE", "~IS__SOME A(A)option <=> A(A)option = NONE"
option__CLAUSES__8:"option", "fun", "bool", "THE", "SOME", "IS__SOME", "=", "A(A)option", "IS__SOME A(A)option", "SOME (THE A(A)option)", "THE A(A)option"
option__CLAUSES__9:"option", "fun", "bool", "option__CASE", "SOME", "NONE", "=", "A(A)option", "NONE", "SOME", "option__CASE A(A)option NONE SOME"
option__CLAUSES__10:"option", "fun", "bool", "option__CASE", "SOME", "=", "A(A)option", "SOME", "option__CASE A(A)option A(A)option SOME"
option__CLAUSES__11:"option", "fun", "bool", "option__CASE", "IS__NONE", "=", "A(A)option", "AA->B", "AB", "IS__NONE A(A)option", "option__CASE A(A)option AB AA->B"
option__CLAUSES__12:"option", "fun", "bool", "option__CASE", "THE", "IS__SOME", "=", "A(B)option", "AA", "AB->A", "AB->A (THE A(B)option)", "IS__SOME A(B)option", "THE A(B)option", "option__CASE A(B)option AA AB->A"
option__CLAUSES__13:"option", "fun", "bool", "option__CASE", "SOME", "IS__SOME", "=", "A(A)option", "IS__SOME A(A)option", "SOME", "option__CASE A(A)option A(A)option SOME"
option__CLAUSES__14:"option", "fun", "bool", "option__CASE", "NONE", "=", "AA->B", "AB", "NONE", "option__CASE NONE AB AA->B"
option__CLAUSES__15:"option", "fun", "bool", "option__CASE", "SOME", "=", "AA", "AB", "AB->A", "AB->A AB", "SOME AB", "option__CASE (SOME AB) AA AB->A"
option__CLAUSES__16:"option", "fun", "bool", "SOME", "OPTION__MAP", "=", "AB", "AB->A", "AB->A AB", "OPTION__MAP AB->A (SOME AB)", "SOME (AB->A AB)", "SOME AB"
option__CLAUSES__17:"option", "fun", "bool", "OPTION__MAP", "NONE", "=", "AA->B", "NONE", "OPTION__MAP AA->B NONE"
option__CLAUSES__18:"option", "fun", "bool", "OPTION__JOIN", "NONE", "=", "NONE", "OPTION__JOIN NONE"
option__CLAUSES__e19:"option", "fun", "bool", "SOME", "OPTION__JOIN", "=", "A(A)option", "OPTION__JOIN (SOME A(A)option)", "SOME A(A)option"
option__case__compute:"option", "fun", "bool", "option__CASE", "THE", "IS__SOME", "COND", "=", "A(A)option", "AA->B", "AA->B (THE A(A)option)", "AB", "IS__SOME A(A)option", "THE A(A)option", "if IS__SOME A(A)option then AA->B (THE A(A)option) else AB", "option__CASE A(A)option AB AA->B"
IF__EQUALS__OPTION__0:"option", "fun", "bool", "~", "SOME", "NONE", "COND", "=", "(if Abool then SOME AA else NONE) = NONE <=> ~Abool", "AA", "Abool", "NONE", "SOME AA", "if Abool then SOME AA else NONE"
IF__EQUALS__OPTION__1:"option", "fun", "bool", "SOME", "NONE", "COND", "=", "(if Abool then NONE else SOME AA) = NONE <=> Abool", "AA", "Abool", "NONE", "SOME AA", "if Abool then NONE else SOME AA"
IF__EQUALS__OPTION__2:"option", "fun", "bool", "SOME", "NONE", "COND", "=", "(if Abool then SOME AA else NONE) = SOME AA <=> Abool /\ AA = AA", "AA", "Abool", "NONE", "SOME AA", "if Abool then SOME AA else NONE"
IF__EQUALS__OPTION__e3:"option", "fun", "bool", "~", "SOME", "NONE", "COND", "=", "(if Abool then NONE else SOME AA) = SOME AA <=> ~Abool /\ AA = AA", "AA", "Abool", "NONE", "SOME AA", "if Abool then NONE else SOME AA"
IF__NONE__EQUALS__OPTION__0:"option", "fun", "bool", "NONE", "IS__NONE", "COND", "=", "(if Abool then A(A)option else NONE) = NONE <=> Abool ==> IS__NONE A(A)option", "A(A)option", "Abool", "IS__NONE A(A)option", "NONE", "if Abool then A(A)option else NONE"
IF__NONE__EQUALS__OPTION__1:"option", "fun", "bool", "NONE", "IS__SOME", "COND", "=", "(if Abool then NONE else A(A)option) = NONE <=> IS__SOME A(A)option ==> Abool", "A(A)option", "Abool", "IS__SOME A(A)option", "NONE", "if Abool then NONE else A(A)option"
IF__NONE__EQUALS__OPTION__2:"option", "fun", "bool", "SOME", "NONE", "COND", "=", "(if Abool then A(A)option else NONE) = SOME AA <=> Abool /\ A(A)option = SOME AA", "A(A)option", "AA", "Abool", "NONE", "SOME AA", "if Abool then A(A)option else NONE"
IF__NONE__EQUALS__OPTION__e3:"option", "fun", "bool", "~", "SOME", "NONE", "COND", "=", "(if Abool then NONE else A(A)option) = SOME AA <=> ~Abool /\ A(A)option = SOME AA", "A(A)option", "AA", "Abool", "NONE", "SOME AA", "if Abool then NONE else A(A)option"
OPTION__MAP__EQ__SOME:"option", "fun", "bool", "SOME", "OPTION__MAP", "=", "A(B)option", "AA", "AB", "AB->A", "AB->A AB", "OPTION__MAP AB->A A(B)option", "OPTION__MAP AB->A A(B)option = SOME AA <=> (?AB. A(B)option = SOME AB /\ AA = AB->A AB)", "SOME AA", "SOME AB"
OPTION__MAP__EQ__NONE:"option", "fun", "bool", "OPTION__MAP", "NONE", "=", "A(B)option", "AB->A", "NONE", "OPTION__MAP AB->A A(B)option", "OPTION__MAP AB->A A(B)option = NONE <=> A(B)option = NONE"
OPTION__MAP__EQ__NONE__both__ways__0:"option", "fun", "bool", "OPTION__MAP", "NONE", "=", "A(B)option", "AB->A", "NONE", "OPTION__MAP AB->A A(B)option", "OPTION__MAP AB->A A(B)option = NONE <=> A(B)option = NONE"
OPTION__MAP__EQ__NONE__both__ways__e1:"option", "fun", "bool", "OPTION__MAP", "NONE", "=", "A(B)option", "AB->A", "NONE", "NONE = OPTION__MAP AB->A A(B)option <=> A(B)option = NONE", "OPTION__MAP AB->A A(B)option"
OPTION__MAP__COMPOSE:"option", "fun", "bool", "o", "OPTION__MAP", "=", "A(C)option", "AB->A", "AC->B", "OPTION__MAP (o AB->A AC->B) A(C)option", "OPTION__MAP AB->A (OPTION__MAP AC->B A(C)option)", "OPTION__MAP AC->B A(C)option", "o AB->A AC->B"
OPTION__MAP__CONG:"option", "fun", "bool", "SOME", "OPTION__MAP", "=", "A(B)option", "AB", "AB->A", "AB->A AB", "OPTION__MAP AB->A A(B)option", "SOME AB"
OPTION__JOIN__EQ__SOME:"option", "fun", "bool", "SOME", "OPTION__JOIN", "=", "A((A)option)option", "AA", "OPTION__JOIN A((A)option)option", "OPTION__JOIN A((A)option)option = SOME AA <=> A((A)option)option = SOME (SOME AA)", "SOME (SOME AA)", "SOME AA"
OPTION__MAP2__SOME:"option", "fun", "bool", "SOME", "OPTION__MAP2", "=", "A(B)option", "A(C)option", "AA", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "OPTION__MAP2 AB->C->A A(B)option A(C)option", "OPTION__MAP2 AB->C->A A(B)option A(C)option = SOME AA <=> (?AB AC. A(B)option = SOME AB /\ A(C)option = SOME AC /\ AA = AB->C->A AB AC)", "SOME AA", "SOME AB", "SOME AC"
OPTION__MAP2__NONE:"option", "fun", "bool", "OPTION__MAP2", "NONE", "=", "A(B)option", "A(C)option", "AB->C->A", "NONE", "OPTION__MAP2 AB->C->A A(B)option A(C)option", "OPTION__MAP2 AB->C->A A(B)option A(C)option = NONE <=> A(B)option = NONE \/ A(C)option = NONE"
OPTION__MAP2__cong:"option", "fun", "bool", "SOME", "OPTION__MAP2", "=", "A(B)option", "A(C)option", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "OPTION__MAP2 AB->C->A A(B)option A(C)option", "SOME AB", "SOME AC"
OPTION__BIND__def__0:"option", "fun", "bool", "OPTION__BIND", "NONE", "=", "AA->(B)option", "NONE", "OPTION__BIND NONE AA->(B)option"
OPTION__BIND__def__e1:"option", "fun", "bool", "SOME", "OPTION__BIND", "=", "AB", "AB->(A)option", "AB->(A)option AB", "OPTION__BIND (SOME AB) AB->(A)option", "SOME AB"
OPTION__BIND__cong:"option", "fun", "bool", "SOME", "OPTION__BIND", "=", "A(A)option", "AA", "AA->(B)option", "AA->(B)option AA", "OPTION__BIND A(A)option AA->(B)option", "SOME AA"
OPTION__BIND__EQUALS__OPTION__0:"option", "fun", "bool", "SOME", "OPTION__BIND", "NONE", "=", "A(A)option", "AA", "AA->(B)option", "AA->(B)option AA", "NONE", "OPTION__BIND A(A)option AA->(B)option", "OPTION__BIND A(A)option AA->(B)option = NONE <=> A(A)option = NONE \/ (?AA. A(A)option = SOME AA /\ AA->(B)option AA = NONE)", "SOME AA"
OPTION__BIND__EQUALS__OPTION__e1:"option", "fun", "bool", "SOME", "OPTION__BIND", "=", "A(A)option", "AA", "AA->(B)option", "AA->(B)option AA", "AB", "OPTION__BIND A(A)option AA->(B)option", "OPTION__BIND A(A)option AA->(B)option = SOME AB <=> (?AA. A(A)option = SOME AA /\ AA->(B)option AA = SOME AB)", "SOME AA", "SOME AB"
OPTION__IGNORE__BIND__def:"option", "fun", "bool", "OPTION__IGNORE__BIND", "OPTION__BIND", "K", "=", "A(A)option", "A(B)option", "K A(B)option", "OPTION__BIND A(A)option (K A(B)option)", "OPTION__IGNORE__BIND A(A)option A(B)option"
OPTION__IGNORE__BIND__thm__0:"option", "fun", "bool", "OPTION__IGNORE__BIND", "NONE", "=", "A(B)option", "NONE", "OPTION__IGNORE__BIND NONE A(B)option"
OPTION__IGNORE__BIND__thm__e1:"option", "fun", "bool", "SOME", "OPTION__IGNORE__BIND", "=", "A(B)option", "AA", "OPTION__IGNORE__BIND (SOME AA) A(B)option", "SOME AA"
OPTION__GUARD__def__0:"option", "one", "fun", "bool", "one0", "T", "SOME", "OPTION__GUARD", "=", "OPTION__GUARD T", "SOME one0", "T", "one0"
OPTION__GUARD__def__e1:"option", "one", "fun", "bool", "OPTION__GUARD", "NONE", "F", "=", "F", "NONE", "OPTION__GUARD F"
OPTION__GUARD__COND:"option", "one", "fun", "bool", "one0", "SOME", "OPTION__GUARD", "NONE", "COND", "=", "Abool", "NONE", "OPTION__GUARD Abool", "SOME one0", "if Abool then SOME one0 else NONE", "one0"
OPTION__GUARD__EQ__THM__0:"option", "one", "fun", "bool", "one0", "SOME", "OPTION__GUARD", "=", "Abool", "OPTION__GUARD Abool", "OPTION__GUARD Abool = SOME one0 <=> Abool", "SOME one0", "one0"
OPTION__GUARD__EQ__THM__e1:"option", "one", "fun", "bool", "~", "OPTION__GUARD", "NONE", "=", "Abool", "NONE", "OPTION__GUARD Abool", "OPTION__GUARD Abool = NONE <=> ~Abool"
OPTION__CHOICE__def__0:"option", "fun", "bool", "OPTION__CHOICE", "NONE", "=", "A(A)option", "NONE", "OPTION__CHOICE NONE A(A)option"
OPTION__CHOICE__def__e1:"option", "fun", "bool", "SOME", "OPTION__CHOICE", "=", "A(A)option", "AA", "OPTION__CHOICE (SOME AA) A(A)option", "SOME AA"
OPTION__CHOICE__EQ__NONE:"option", "fun", "bool", "OPTION__CHOICE", "NONE", "=", "A(A)option", "NONE", "OPTION__CHOICE A(A)option A(A)option", "OPTION__CHOICE A(A)option A(A)option = NONE <=> A(A)option = NONE /\ A(A)option = NONE"
OPTION__APPLY__def__0:"option", "fun", "bool", "OPTION__APPLY", "NONE", "=", "A(A)option", "NONE", "OPTION__APPLY NONE A(A)option"
OPTION__APPLY__def__e1:"option", "fun", "bool", "SOME", "OPTION__MAP", "OPTION__APPLY", "=", "A(B)option", "AB->A", "OPTION__APPLY (SOME AB->A) A(B)option", "OPTION__MAP AB->A A(B)option", "SOME AB->A"
OPTION__APPLY__MAP2:"option", "fun", "bool", "OPTION__MAP2", "OPTION__MAP", "OPTION__APPLY", "=", "A(B)option", "A(C)option", "AB->C->A", "OPTION__APPLY (OPTION__MAP AB->C->A A(B)option) A(C)option", "OPTION__MAP AB->C->A A(B)option", "OPTION__MAP2 AB->C->A A(B)option A(C)option"
SOME__SOME__APPLY:"option", "fun", "bool", "SOME", "OPTION__APPLY", "=", "AB", "AB->A", "AB->A AB", "OPTION__APPLY (SOME AB->A) (SOME AB)", "SOME (AB->A AB)", "SOME AB", "SOME AB->A"
SOME__APPLY__PERMUTE:"option", "fun", "bool", "SOME", "OPTION__APPLY", "=", "A(A->B)option", "AA", "AA->B AA", "OPTION__APPLY (SOME (\AA->B. AA->B AA)) A(A->B)option", "OPTION__APPLY A(A->B)option (SOME AA)", "SOME (\AA->B. AA->B AA)", "SOME AA"
OPTION__APPLY__o:"option", "fun", "bool", "o", "SOME", "OPTION__APPLY", "=", "A(B->A)option", "A(C)option", "A(C->B)option", "OPTION__APPLY (OPTION__APPLY (OPTION__APPLY (SOME o) A(B->A)option) A(C->B)option) A(C)option", "OPTION__APPLY (OPTION__APPLY (SOME o) A(B->A)option) A(C->B)option", "OPTION__APPLY (SOME o) A(B->A)option", "OPTION__APPLY A(B->A)option (OPTION__APPLY A(C->B)option A(C)option)", "OPTION__APPLY A(C->B)option A(C)option", "SOME o", "o"
OPTREL__def:"option", "fun", "bool", "SOME", "OPTREL", "NONE", "=", "A(A)option", "A(B)option", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "NONE", "OPTREL AA->B->bool A(A)option A(B)option", "OPTREL AA->B->bool A(A)option A(B)option <=> A(A)option = NONE /\ A(B)option = NONE \/ (?AA AB. A(A)option = SOME AA /\ A(B)option = SOME AB /\ AA->B->bool AA AB)", "SOME AA", "SOME AB"
OPTREL__MONO:"option", "fun", "bool", "OPTREL", "A(A)option", "A(B)option", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "OPTREL AA->B->bool A(A)option A(B)option"
OPTREL__refl:"option", "fun", "bool", "OPTREL", "A(A)option", "AA", "AA->A->bool", "AA->A->bool AA AA", "OPTREL AA->A->bool A(A)option A(A)option"
some__def:"option", "fun", "bool", "some", "_40", "SOME", "NONE", "COND", "=", "AA", "AA->bool", "AA->bool AA", "NONE", "SOME (_40 (\AA. AA->bool AA))", "_40 (\AA. AA->bool AA)", "if ?AA. AA->bool AA then SOME (_40 (\AA. AA->bool AA)) else NONE", "some AA->bool"
some__intro:"option", "fun", "bool", "~", "some", "SOME", "NONE", "A(A)option->bool (SOME AA)", "A(A)option->bool (some AA->bool)", "A(A)option->bool NONE", "AA", "AA->bool", "AA->bool AA", "NONE", "SOME AA", "some AA->bool"
some__elim:"option", "fun", "bool", "~", "some", "SOME", "NONE", "A(A)option->bool (SOME AA)", "A(A)option->bool (some AA->bool)", "A(A)option->bool NONE", "AA", "AA->bool", "AA->bool AA", "NONE", "SOME AA", "some AA->bool"
some__F:"option", "fun", "bool", "some", "NONE", "F", "=", "F", "NONE", "some (\AA. F)"
some__EQ__0:"option", "fun", "bool", "some", "SOME", "=", "AA", "SOME AA", "some (\AA. AA = AA)"
some__EQ__e1:"option", "fun", "bool", "some", "SOME", "=", "AA", "SOME AA", "some (\AA. AA = AA)"
option__case__cong:"option", "fun", "bool", "option__CASE", "SOME", "NONE", "=", "A(A)option", "AA", "AA->B", "AA->B AA", "AB", "NONE", "SOME AA", "option__CASE A(A)option AB AA->B"
datatype__option:"option", "fun", "bool", "SOME", "NONE", "DATATYPE", "A(B)option->(B->(B)option)->A NONE SOME", "DATATYPE (A(B)option->(B->(B)option)->A NONE SOME)", "NONE", "SOME"
transitive__def:"fun", "bool", "transitive", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "transitive AA->A->bool", "transitive AA->A->bool <=> (!AA AA AA. AA->A->bool AA AA /\ AA->A->bool AA AA ==> AA->A->bool AA AA)"
reflexive__def:"fun", "bool", "reflexive", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "reflexive AA->A->bool", "reflexive AA->A->bool <=> (!AA. AA->A->bool AA AA)"
irreflexive__def:"fun", "bool", "~", "irreflexive", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "irreflexive AA->A->bool", "irreflexive AA->A->bool <=> (!AA. ~AA->A->bool AA AA)"
symmetric__def:"fun", "bool", "symmetric", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->A->bool AA AA <=> AA->A->bool AA AA", "symmetric AA->A->bool", "symmetric AA->A->bool <=> (!AA AA. AA->A->bool AA AA <=> AA->A->bool AA AA)"
antisymmetric__def:"fun", "bool", "antisymmetric", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "antisymmetric AA->A->bool", "antisymmetric AA->A->bool <=> (!AA AA. AA->A->bool AA AA /\ AA->A->bool AA AA ==> AA = AA)"
equivalence__def:"fun", "bool", "transitive", "symmetric", "reflexive", "equivalence", "=", "AA->A->bool", "equivalence AA->A->bool", "equivalence AA->A->bool <=> reflexive AA->A->bool /\ symmetric AA->A->bool /\ transitive AA->A->bool", "reflexive AA->A->bool", "symmetric AA->A->bool", "transitive AA->A->bool"
total__def:"fun", "bool", "total", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "total AA->A->bool", "total AA->A->bool <=> (!AA AA. AA->A->bool AA AA \/ AA->A->bool AA AA)"
trichotomous0:"fun", "bool", "trichotomous", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "trichotomous AA->A->bool", "trichotomous AA->A->bool <=> (!AA AA. AA->A->bool AA AA \/ AA->A->bool AA AA \/ AA = AA)"
TC__DEF:"fun", "bool", "TC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA", "TC AA->A->bool AA AA <=> (!AA->A->bool. (!AA AA. AA->A->bool AA AA ==> AA->A->bool AA AA) /\ (!AA AA AA. AA->A->bool AA AA /\ AA->A->bool AA AA ==> AA->A->bool AA AA) ==> AA->A->bool AA AA)"
RTC__DEF:"fun", "bool", "RTC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA", "RTC AA->A->bool AA AA <=> (!AA->A->bool. (!AA. AA->A->bool AA AA) /\ (!AA AA AA. AA->A->bool AA AA /\ AA->A->bool AA AA ==> AA->A->bool AA AA) ==> AA->A->bool AA AA)"
RC__DEF:"fun", "bool", "RC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "RC AA->A->bool AA AA", "RC AA->A->bool AA AA <=> AA = AA \/ AA->A->bool AA AA"
SC__DEF:"fun", "bool", "SC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "SC AA->A->bool AA AA", "SC AA->A->bool AA AA <=> AA->A->bool AA AA \/ AA->A->bool AA AA"
EQC__DEF:"fun", "bool", "TC", "SC", "RC", "EQC", "=", "AA->A->bool", "EQC AA->A->bool", "RC (TC (SC AA->A->bool))", "SC AA->A->bool", "TC (SC AA->A->bool)"
SC__SYMMETRIC:"fun", "bool", "symmetric", "SC", "AA->A->bool", "SC AA->A->bool", "symmetric (SC AA->A->bool)"
TC__TRANSITIVE:"fun", "bool", "transitive", "TC", "AA->A->bool", "TC AA->A->bool", "transitive (TC AA->A->bool)"
RTC__INDUCT:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
TC__RULES__0:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__RULES__e1:"fun", "bool", "TC", "AA", "AA->A->bool", "TC AA->A->bool AA AA"
RTC__RULES__0:"fun", "bool", "RTC", "AA", "AA->A->bool", "RTC AA->A->bool AA AA"
RTC__RULES__e1:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
RTC__REFL:"fun", "bool", "RTC", "AA", "AA->A->bool", "RTC AA->A->bool AA AA"
RTC__SINGLE:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
RTC__STRONG__INDUCT:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
RTC__RTC:"fun", "bool", "RTC", "AA", "AA->A->bool", "RTC AA->A->bool AA AA"
RTC__TRANSITIVE:"fun", "bool", "transitive", "RTC", "AA->A->bool", "RTC AA->A->bool", "transitive (RTC AA->A->bool)"
transitive__RTC:"fun", "bool", "transitive", "RTC", "AA->A->bool", "RTC AA->A->bool", "transitive (RTC AA->A->bool)"
RTC__REFLEXIVE:"fun", "bool", "reflexive", "RTC", "AA->A->bool", "RTC AA->A->bool", "reflexive (RTC AA->A->bool)"
reflexive__RTC:"fun", "bool", "reflexive", "RTC", "AA->A->bool", "RTC AA->A->bool", "reflexive (RTC AA->A->bool)"
RC__REFLEXIVE:"fun", "bool", "reflexive", "RC", "AA->A->bool", "RC AA->A->bool", "reflexive (RC AA->A->bool)"
reflexive__RC:"fun", "bool", "reflexive", "RC", "AA->A->bool", "RC AA->A->bool", "reflexive (RC AA->A->bool)"
RC__lifts__monotonicities:"fun", "bool", "RC", "AA", "AA->A AA", "AA->A->bool", "AA->A->bool (AA->A AA) (AA->A AA)", "AA->A->bool AA AA", "RC AA->A->bool (AA->A AA) (AA->A AA)", "RC AA->A->bool AA AA"
RC__MONOTONE:"fun", "bool", "RC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RC AA->A->bool AA AA"
RC__lifts__invariants:"fun", "bool", "RC", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "RC AA->A->bool AA AA"
RC__lifts__equalities:"fun", "bool", "RC", "=", "AB", "AB->A AB", "AB->B->bool", "AB->B->bool AB AB", "RC AB->B->bool AB AB"
SC__lifts__monotonicities:"fun", "bool", "SC", "AA", "AA->A AA", "AA->A->bool", "AA->A->bool (AA->A AA) (AA->A AA)", "AA->A->bool AA AA", "SC AA->A->bool (AA->A AA) (AA->A AA)", "SC AA->A->bool AA AA"
SC__lifts__equalities:"fun", "bool", "SC", "=", "AB", "AB->A AB", "AB->B->bool", "AB->B->bool AB AB", "SC AB->B->bool AB AB"
SC__MONOTONE:"fun", "bool", "SC", "AA", "AA->A->bool", "AA->A->bool AA AA", "SC AA->A->bool AA AA"
symmetric__RC:"fun", "bool", "symmetric", "RC", "=", "AA->A->bool", "RC AA->A->bool", "symmetric (RC AA->A->bool)", "symmetric (RC AA->A->bool) <=> symmetric AA->A->bool", "symmetric AA->A->bool"
antisymmetric__RC:"fun", "bool", "antisymmetric", "RC", "=", "AA->A->bool", "RC AA->A->bool", "antisymmetric (RC AA->A->bool)", "antisymmetric (RC AA->A->bool) <=> antisymmetric AA->A->bool", "antisymmetric AA->A->bool"
transitive__RC:"fun", "bool", "transitive", "RC", "AA->A->bool", "RC AA->A->bool", "transitive (RC AA->A->bool)", "transitive AA->A->bool"
TC__SUBSET:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
RTC__SUBSET:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
RC__SUBSET:"fun", "bool", "RC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RC AA->A->bool AA AA"
RC__RTC:"fun", "bool", "RTC", "RC", "AA", "AA->A->bool", "RC AA->A->bool AA AA", "RTC AA->A->bool AA AA"
TC__INDUCT:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__INDUCT__LEFT1:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__INDUCT__RIGHT1:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__STRONG__INDUCT:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__STRONG__INDUCT__LEFT1:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__STRONG__INDUCT__RIGHT1:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__lifts__monotonicities:"fun", "bool", "TC", "AA", "AA->A AA", "AA->A->bool", "AA->A->bool (AA->A AA) (AA->A AA)", "AA->A->bool AA AA", "TC AA->A->bool (AA->A AA) (AA->A AA)", "TC AA->A->bool AA AA"
TC__lifts__invariants:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "TC AA->A->bool AA AA"
TC__lifts__equalities:"fun", "bool", "TC", "=", "AB", "AB->A AB", "AB->B->bool", "AB->B->bool AB AB", "TC AB->B->bool AB AB"
TC__lifts__transitive__relations:"fun", "bool", "transitive", "TC", "AA->A->bool", "AA->A->bool (AB->A AB) (AB->A AB)", "AB", "AB->A AB", "AB->B->bool", "AB->B->bool AB AB", "TC AB->B->bool AB AB", "transitive AA->A->bool"
TC__implies__one__step:"fun", "bool", "~", "TC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__RTC:"fun", "bool", "TC", "RTC", "AA", "AA->A->bool", "RTC AA->A->bool AA AA", "TC AA->A->bool AA AA"
RTC__TC__RC:"fun", "bool", "TC", "RTC", "RC", "AA", "AA->A->bool", "RC AA->A->bool AA AA", "RTC AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__RC__EQNS__0:"fun", "bool", "TC", "RTC", "RC", "=", "AA->A->bool", "RC (TC AA->A->bool)", "RTC AA->A->bool", "TC AA->A->bool"
TC__RC__EQNS__e1:"fun", "bool", "TC", "RTC", "RC", "=", "AA->A->bool", "RC AA->A->bool", "RTC AA->A->bool", "TC (RC AA->A->bool)"
RTC__INDUCT__RIGHT1:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
RTC__RULES__RIGHT1__0:"fun", "bool", "RTC", "AA", "AA->A->bool", "RTC AA->A->bool AA AA"
RTC__RULES__RIGHT1__e1:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
RTC__STRONG__INDUCT__RIGHT1:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
EXTEND__RTC__TC:"fun", "bool", "TC", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA", "TC AA->A->bool AA AA"
EXTEND__RTC__TC__EQN:"fun", "bool", "TC", "RTC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA", "TC AA->A->bool AA AA", "TC AA->A->bool AA AA <=> (?AA. AA->A->bool AA AA /\ RTC AA->A->bool AA AA)"
reflexive__RC__identity:"fun", "bool", "reflexive", "RC", "=", "AA->A->bool", "RC AA->A->bool", "reflexive AA->A->bool"
symmetric__SC__identity:"fun", "bool", "symmetric", "SC", "=", "AA->A->bool", "SC AA->A->bool", "symmetric AA->A->bool"
transitive__TC__identity:"fun", "bool", "transitive", "TC", "=", "AA->A->bool", "TC AA->A->bool", "transitive AA->A->bool"
RC__IDEM:"fun", "bool", "RC", "=", "AA->A->bool", "RC (RC AA->A->bool)", "RC AA->A->bool"
SC__IDEM:"fun", "bool", "SC", "=", "AA->A->bool", "SC (SC AA->A->bool)", "SC AA->A->bool"
TC__IDEM:"fun", "bool", "TC", "=", "AA->A->bool", "TC (TC AA->A->bool)", "TC AA->A->bool"
RC__MOVES__OUT__0:"fun", "bool", "SC", "RC", "=", "AA->A->bool", "RC (SC AA->A->bool)", "RC AA->A->bool", "SC (RC AA->A->bool)", "SC AA->A->bool"
RC__MOVES__OUT__1:"fun", "bool", "RC", "=", "AA->A->bool", "RC (RC AA->A->bool)", "RC AA->A->bool"
RC__MOVES__OUT__e2:"fun", "bool", "TC", "RC", "=", "AA->A->bool", "RC (TC AA->A->bool)", "RC AA->A->bool", "TC (RC AA->A->bool)", "TC AA->A->bool"
symmetric__TC:"fun", "bool", "symmetric", "TC", "AA->A->bool", "TC AA->A->bool", "symmetric (TC AA->A->bool)", "symmetric AA->A->bool"
reflexive__TC:"fun", "bool", "reflexive", "TC", "AA->A->bool", "TC AA->A->bool", "reflexive (TC AA->A->bool)", "reflexive AA->A->bool"
EQC__EQUIVALENCE:"fun", "bool", "equivalence", "EQC", "AA->A->bool", "EQC AA->A->bool", "equivalence (EQC AA->A->bool)"
EQC__IDEM:"fun", "bool", "EQC", "=", "AA->A->bool", "EQC (EQC AA->A->bool)", "EQC AA->A->bool"
RTC__IDEM:"fun", "bool", "RTC", "=", "AA->A->bool", "RTC (RTC AA->A->bool)", "RTC AA->A->bool"
RTC__CASES1:"fun", "bool", "RTC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA", "RTC AA->A->bool AA AA <=> AA = AA \/ (?AA. AA->A->bool AA AA /\ RTC AA->A->bool AA AA)"
RTC__CASES__TC:"fun", "bool", "TC", "RTC", "=", "AA", "AA->A->bool", "RTC AA->A->bool AA AA", "RTC AA->A->bool AA AA <=> AA = AA \/ TC AA->A->bool AA AA", "TC AA->A->bool AA AA"
RTC__CASES2:"fun", "bool", "RTC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA", "RTC AA->A->bool AA AA <=> AA = AA \/ (?AA. RTC AA->A->bool AA AA /\ AA->A->bool AA AA)"
RTC__CASES__RTC__TWICE:"fun", "bool", "RTC", "=", "AA", "AA->A->bool", "RTC AA->A->bool AA AA", "RTC AA->A->bool AA AA <=> (?AA. RTC AA->A->bool AA AA /\ RTC AA->A->bool AA AA)"
TC__CASES1__E:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__CASES1:"fun", "bool", "TC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA", "TC AA->A->bool AA AA <=> AA->A->bool AA AA \/ (?AA. AA->A->bool AA AA /\ TC AA->A->bool AA AA)"
TC__CASES2__E:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
TC__CASES2:"fun", "bool", "TC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA", "TC AA->A->bool AA AA <=> AA->A->bool AA AA \/ (?AA. TC AA->A->bool AA AA /\ AA->A->bool AA AA)"
TC__MONOTONE:"fun", "bool", "TC", "AA", "AA->A->bool", "AA->A->bool AA AA", "TC AA->A->bool AA AA"
RTC__MONOTONE:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA"
EQC__INDUCTION:"fun", "bool", "EQC", "AA", "AA->A->bool", "AA->A->bool AA AA", "EQC AA->A->bool AA AA"
EQC__REFL:"fun", "bool", "EQC", "AA", "AA->A->bool", "EQC AA->A->bool AA AA"
EQC__R:"fun", "bool", "EQC", "AA", "AA->A->bool", "AA->A->bool AA AA", "EQC AA->A->bool AA AA"
EQC__SYM:"fun", "bool", "EQC", "AA", "AA->A->bool", "EQC AA->A->bool AA AA"
EQC__TRANS:"fun", "bool", "EQC", "AA", "AA->A->bool", "EQC AA->A->bool AA AA"
transitive__EQC:"fun", "bool", "transitive", "EQC", "AA->A->bool", "EQC AA->A->bool", "transitive (EQC AA->A->bool)"
symmetric__EQC:"fun", "bool", "symmetric", "EQC", "AA->A->bool", "EQC AA->A->bool", "symmetric (EQC AA->A->bool)"
reflexive__EQC:"fun", "bool", "reflexive", "EQC", "AA->A->bool", "EQC AA->A->bool", "reflexive (EQC AA->A->bool)"
EQC__MOVES__IN__0:"fun", "bool", "RC", "EQC", "=", "AA->A->bool", "EQC (RC AA->A->bool)", "EQC AA->A->bool", "RC AA->A->bool"
EQC__MOVES__IN__1:"fun", "bool", "SC", "EQC", "=", "AA->A->bool", "EQC (SC AA->A->bool)", "EQC AA->A->bool", "SC AA->A->bool"
EQC__MOVES__IN__e2:"fun", "bool", "TC", "EQC", "=", "AA->A->bool", "EQC (TC AA->A->bool)", "EQC AA->A->bool", "TC AA->A->bool"
STRONG__EQC__INDUCTION:"fun", "bool", "EQC", "AA", "AA->A->bool", "AA->A->bool AA AA", "EQC AA->A->bool AA AA"
ALT__equivalence:"fun", "bool", "equivalence", "=", "AA", "AA->A->bool", "AA->A->bool AA", "AA->A->bool AA AA", "AA->A->bool AA AA <=> AA->A->bool AA = AA->A->bool AA", "equivalence AA->A->bool", "equivalence AA->A->bool <=> (!AA AA. AA->A->bool AA AA <=> AA->A->bool AA = AA->A->bool AA)"
EQC__MONOTONE:"fun", "bool", "EQC", "AA", "AA->A->bool", "AA->A->bool AA AA", "EQC AA->A->bool AA AA"
RTC__EQC:"fun", "bool", "RTC", "EQC", "AA", "AA->A->bool", "EQC AA->A->bool AA AA", "RTC AA->A->bool AA AA"
RTC__lifts__monotonicities:"fun", "bool", "RTC", "AA", "AA->A AA", "AA->A->bool", "AA->A->bool (AA->A AA) (AA->A AA)", "AA->A->bool AA AA", "RTC AA->A->bool (AA->A AA) (AA->A AA)", "RTC AA->A->bool AA AA"
RTC__lifts__reflexive__transitive__relations:"fun", "bool", "transitive", "reflexive", "RTC", "AA->A->bool", "AA->A->bool (AB->A AB) (AB->A AB)", "AB", "AB->A AB", "AB->B->bool", "AB->B->bool AB AB", "RTC AB->B->bool AB AB", "reflexive AA->A->bool", "transitive AA->A->bool"
RTC__lifts__equalities:"fun", "bool", "RTC", "=", "AB", "AB->A AB", "AB->B->bool", "AB->B->bool AB AB", "RTC AB->B->bool AB AB"
RTC__lifts__invariants:"fun", "bool", "RTC", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "RTC AA->A->bool AA AA"
WF__DEF:"fun", "bool", "~", "WF", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "WF AA->A->bool", "WF AA->A->bool <=> (!AA->bool. (?AA. AA->bool AA) ==> (?AA. AA->bool AA /\ (!AA. AA->A->bool AA AA ==> ~AA->bool AA)))"
WF__INDUCTION__THM:"fun", "bool", "WF", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "WF AA->A->bool"
INDUCTION__WF__THM:"fun", "bool", "WF", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "WF AA->A->bool"
WF__EQ__INDUCTION__THM:"fun", "bool", "WF", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "WF AA->A->bool", "WF AA->A->bool <=> (!AA->bool. (!AA. (!AA. AA->A->bool AA AA ==> AA->bool AA) ==> AA->bool AA) ==> (!AA. AA->bool AA))"
WF__NOT__REFL:"fun", "bool", "~", "WF", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "WF AA->A->bool"
WF__irreflexive:"fun", "bool", "irreflexive", "WF", "AA->A->bool", "WF AA->A->bool", "irreflexive AA->A->bool"
EMPTY__REL__DEF:"fun", "bool", "F", "EMPTY__REL", "=", "AA", "EMPTY__REL AA AA", "EMPTY__REL AA AA <=> F", "F"
WF__EMPTY__REL:"fun", "bool", "WF", "EMPTY__REL", "EMPTY__REL", "WF EMPTY__REL"
WF__SUBSET:"fun", "bool", "WF", "AA", "AA->A->bool", "AA->A->bool AA AA", "WF AA->A->bool"
WF__TC:"fun", "bool", "WF", "TC", "AA->A->bool", "TC AA->A->bool", "WF (TC AA->A->bool)", "WF AA->A->bool"
WF__TC__EQN:"fun", "bool", "WF", "TC", "=", "AA->A->bool", "TC AA->A->bool", "WF (TC AA->A->bool)", "WF (TC AA->A->bool) <=> WF AA->A->bool", "WF AA->A->bool"
WF__noloops:"fun", "bool", "~", "WF", "TC", "=", "AA", "AA->A->bool", "TC AA->A->bool AA AA", "WF AA->A->bool"
WF__antisymmetric:"fun", "bool", "antisymmetric", "WF", "AA->A->bool", "WF AA->A->bool", "antisymmetric AA->A->bool"
inv__image__def:"fun", "bool", "inv__image", "=", "AA->A->bool", "AA->A->bool (AB->A AB) (AB->A AB)", "AB", "AB->A", "AB->A AB", "inv__image AA->A->bool AB->A"
inv__image__thm:"fun", "bool", "inv__image", "=", "AA->A->bool", "AA->A->bool (AB->A AB) (AB->A AB)", "AB", "AB->A", "AB->A AB", "inv__image AA->A->bool AB->A AB AB", "inv__image AA->A->bool AB->A AB AB <=> AA->A->bool (AB->A AB) (AB->A AB)"
WF__inv__image:"fun", "bool", "inv__image", "WF", "AA->B", "AB->B->bool", "WF (inv__image AB->B->bool AA->B)", "WF AB->B->bool", "inv__image AB->B->bool AA->B"
total__inv__image:"fun", "bool", "total", "inv__image", "AA->B", "AB->B->bool", "inv__image AB->B->bool AA->B", "total (inv__image AB->B->bool AA->B)", "total AB->B->bool"
reflexive__inv__image:"fun", "bool", "reflexive", "inv__image", "AA->B", "AB->B->bool", "inv__image AB->B->bool AA->B", "reflexive (inv__image AB->B->bool AA->B)", "reflexive AB->B->bool"
symmetric__inv__image:"fun", "bool", "symmetric", "inv__image", "AA->B", "AB->B->bool", "inv__image AB->B->bool AA->B", "symmetric (inv__image AB->B->bool AA->B)", "symmetric AB->B->bool"
transitive__inv__image:"fun", "bool", "transitive", "inv__image", "AA->B", "AB->B->bool", "inv__image AB->B->bool AA->B", "transitive (inv__image AB->B->bool AA->B)", "transitive AB->B->bool"
RESTRICT__DEF:"fun", "bool", "RESTRICT", "COND", "ARB", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->B", "AA->B AA", "ARB", "RESTRICT AA->B AA->A->bool AA", "if AA->A->bool AA AA then AA->B AA else ARB"
RESTRICT__LEMMA:"fun", "bool", "RESTRICT", "=", "AB", "AB->A", "AB->A AB", "AB->B->bool", "AB->B->bool AB AB", "RESTRICT AB->A AB->B->bool AB AB"
approx__def:"fun", "bool", "approx", "RESTRICT", "=", "A(B->A)->B->A", "A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB", "AB", "AB->A", "AB->B->bool", "RESTRICT (\AB. A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB) AB->B->bool AB", "RESTRICT AB->A AB->B->bool AB", "approx AB->B->bool A(B->A)->B->A AB AB->A", "approx AB->B->bool A(B->A)->B->A AB AB->A <=> AB->A = RESTRICT (\AB. A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB) AB->B->bool AB"
the__fun__def:"fun", "bool", "the__fun", "approx", "_40", "=", "A(A->B)->A->B", "AA", "AA->A->bool", "AA->B", "_40 (\AA->B. approx AA->A->bool A(A->B)->A->B AA AA->B)", "approx AA->A->bool A(A->B)->A->B AA AA->B", "the__fun AA->A->bool A(A->B)->A->B AA"
WFREC__DEF:"fun", "bool", "the__fun", "WFREC", "TC", "RESTRICT", "=", "A(B->A)->B->A", "A(B->A)->B->A (RESTRICT (the__fun (TC AB->B->bool) (\AB->A AB. A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB) AB) AB->B->bool AB) AB", "A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB", "AB", "AB->A", "AB->B->bool", "RESTRICT (the__fun (TC AB->B->bool) (\AB->A AB. A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB) AB) AB->B->bool AB", "RESTRICT AB->A AB->B->bool AB", "TC AB->B->bool", "WFREC AB->B->bool A(B->A)->B->A", "the__fun (TC AB->B->bool) (\AB->A AB. A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB) AB"
WFREC__THM:"fun", "bool", "WFREC", "WF", "RESTRICT", "=", "A(B->A)->B->A", "A(B->A)->B->A (RESTRICT (WFREC AB->B->bool A(B->A)->B->A) AB->B->bool AB) AB", "AB", "AB->B->bool", "RESTRICT (WFREC AB->B->bool A(B->A)->B->A) AB->B->bool AB", "WF AB->B->bool", "WFREC AB->B->bool A(B->A)->B->A", "WFREC AB->B->bool A(B->A)->B->A AB"
WFREC__COROLLARY:"fun", "bool", "WFREC", "WF", "RESTRICT", "=", "A(B->A)->B->A", "A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB", "AB", "AB->A", "AB->A AB", "AB->B->bool", "RESTRICT AB->A AB->B->bool AB", "WF AB->B->bool", "WFREC AB->B->bool A(B->A)->B->A"
WF__RECURSION__THM:"fun", "bool", "_3F_21", "WF", "RESTRICT", "=", "A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB", "AB", "AB->A", "AB->A AB", "AB->B->bool", "RESTRICT AB->A AB->B->bool AB", "WF AB->B->bool", "_3F_21 (\AB->A. !AB. AB->A AB = A(B->A)->B->A (RESTRICT AB->A AB->B->bool AB) AB)"
WFP__DEF:"fun", "bool", "WFP", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "WFP AA->A->bool AA", "WFP AA->A->bool AA <=> (!AA->bool. (!AA. (!AA. AA->A->bool AA AA ==> AA->bool AA) ==> AA->bool AA) ==> AA->bool AA)"
WFP__RULES:"fun", "bool", "WFP", "AA", "AA->A->bool", "AA->A->bool AA AA", "WFP AA->A->bool AA"
WFP__INDUCT:"fun", "bool", "WFP", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "WFP AA->A->bool AA"
WFP__CASES:"fun", "bool", "WFP", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "WFP AA->A->bool AA", "WFP AA->A->bool AA <=> (!AA. AA->A->bool AA AA ==> WFP AA->A->bool AA)"
WFP__STRONG__INDUCT:"fun", "bool", "WFP", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool AA", "WFP AA->A->bool AA"
WF__EQ__WFP:"fun", "bool", "WFP", "WF", "=", "AA", "AA->A->bool", "WF AA->A->bool", "WF AA->A->bool <=> (!AA. WFP AA->A->bool AA)", "WFP AA->A->bool AA"
INDUCTIVE__INVARIANT__DEF:"fun", "bool", "INDUCTIVE__INVARIANT", "=", "A(B->A)->B->A", "A(B->A)->B->A AB->A AB", "AB", "AB->A", "AB->A AB", "AB->A->bool", "AB->A->bool AB (A(B->A)->B->A AB->A AB)", "AB->A->bool AB (AB->A AB)", "AB->B->bool", "AB->B->bool AB AB", "INDUCTIVE__INVARIANT AB->B->bool AB->A->bool A(B->A)->B->A", "INDUCTIVE__INVARIANT AB->B->bool AB->A->bool A(B->A)->B->A <=> (!AB->A AB. (!AB. AB->B->bool AB AB ==> AB->A->bool AB (AB->A AB)) ==> AB->A->bool AB (A(B->A)->B->A AB->A AB))"
INDUCTIVE__INVARIANT__ON__DEF:"fun", "bool", "INDUCTIVE__INVARIANT__ON", "=", "A(B->A)->B->A", "A(B->A)->B->A AB->A AB", "AB", "AB->A", "AB->A AB", "AB->A->bool", "AB->A->bool AB (A(B->A)->B->A AB->A AB)", "AB->A->bool AB (AB->A AB)", "AB->B->bool", "AB->B->bool AB AB", "AB->bool", "AB->bool AB", "INDUCTIVE__INVARIANT__ON AB->B->bool AB->bool AB->A->bool A(B->A)->B->A", "INDUCTIVE__INVARIANT__ON AB->B->bool AB->bool AB->A->bool A(B->A)->B->A <=> (!AB->A AB. AB->bool AB /\ (!AB. AB->bool AB ==> AB->B->bool AB AB ==> AB->A->bool AB (AB->A AB)) ==> AB->A->bool AB (A(B->A)->B->A AB->A AB))"
INDUCTIVE__INVARIANT__WFREC:"fun", "bool", "WFREC", "WF", "INDUCTIVE__INVARIANT", "A(B->A)->B->A", "AB", "AB->A->bool", "AB->A->bool AB (WFREC AB->B->bool A(B->A)->B->A AB)", "AB->B->bool", "INDUCTIVE__INVARIANT AB->B->bool AB->A->bool A(B->A)->B->A", "WF AB->B->bool", "WFREC AB->B->bool A(B->A)->B->A AB"
TFL__INDUCTIVE__INVARIANT__WFREC:"fun", "bool", "WFREC", "WF", "INDUCTIVE__INVARIANT", "=", "A(B->A)->B->A", "AB", "AB->A", "AB->A AB", "AB->A->bool", "AB->A->bool AB (AB->A AB)", "AB->B->bool", "INDUCTIVE__INVARIANT AB->B->bool AB->A->bool A(B->A)->B->A", "WF AB->B->bool", "WFREC AB->B->bool A(B->A)->B->A"
INDUCTIVE__INVARIANT__ON__WFREC:"fun", "bool", "WFREC", "WF", "INDUCTIVE__INVARIANT__ON", "A(B->A)->B->A", "AB", "AB->A->bool", "AB->A->bool AB (WFREC AB->B->bool A(B->A)->B->A AB)", "AB->B->bool", "AB->bool", "AB->bool AB", "INDUCTIVE__INVARIANT__ON AB->B->bool AB->bool AB->A->bool A(B->A)->B->A", "WF AB->B->bool", "WFREC AB->B->bool A(B->A)->B->A AB"
TFL__INDUCTIVE__INVARIANT__ON__WFREC:"fun", "bool", "WFREC", "WF", "INDUCTIVE__INVARIANT__ON", "=", "A(B->A)->B->A", "AB", "AB->A", "AB->A AB", "AB->A->bool", "AB->A->bool AB (AB->A AB)", "AB->B->bool", "AB->bool", "AB->bool AB", "INDUCTIVE__INVARIANT__ON AB->B->bool AB->bool AB->A->bool A(B->A)->B->A", "WF AB->B->bool", "WFREC AB->B->bool A(B->A)->B->A"
inv__DEF:"fun", "bool", "inv", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "inv AA->A->bool AA AA", "inv AA->A->bool AA AA <=> AA->A->bool AA AA"
inv__inv:"fun", "bool", "inv", "=", "AA->A->bool", "inv (inv AA->A->bool)", "inv AA->A->bool"
inv__RC:"fun", "bool", "inv", "RC", "=", "AA->A->bool", "RC (inv AA->A->bool)", "RC AA->A->bool", "inv (RC AA->A->bool)", "inv AA->A->bool"
inv__SC__0:"fun", "bool", "inv", "SC", "=", "AA->A->bool", "SC AA->A->bool", "inv (SC AA->A->bool)"
inv__SC__e1:"fun", "bool", "inv", "SC", "=", "AA->A->bool", "SC (inv AA->A->bool)", "SC AA->A->bool", "inv AA->A->bool"
inv__TC:"fun", "bool", "inv", "TC", "=", "AA->A->bool", "TC (inv AA->A->bool)", "TC AA->A->bool", "inv (TC AA->A->bool)", "inv AA->A->bool"
inv__EQC__0:"fun", "bool", "inv", "EQC", "=", "AA->A->bool", "EQC AA->A->bool", "inv (EQC AA->A->bool)"
inv__EQC__e1:"fun", "bool", "inv", "EQC", "=", "AA->A->bool", "EQC (inv AA->A->bool)", "EQC AA->A->bool", "inv AA->A->bool"
inv__MOVES__OUT__0:"fun", "bool", "inv", "=", "AA->A->bool", "inv (inv AA->A->bool)", "inv AA->A->bool"
inv__MOVES__OUT__1:"fun", "bool", "inv", "SC", "=", "AA->A->bool", "SC (inv AA->A->bool)", "SC AA->A->bool", "inv AA->A->bool"
inv__MOVES__OUT__2:"fun", "bool", "inv", "RC", "=", "AA->A->bool", "RC (inv AA->A->bool)", "RC AA->A->bool", "inv (RC AA->A->bool)", "inv AA->A->bool"
inv__MOVES__OUT__3:"fun", "bool", "inv", "TC", "=", "AA->A->bool", "TC (inv AA->A->bool)", "TC AA->A->bool", "inv (TC AA->A->bool)", "inv AA->A->bool"
inv__MOVES__OUT__4:"fun", "bool", "inv", "RTC", "=", "AA->A->bool", "RTC (inv AA->A->bool)", "RTC AA->A->bool", "inv (RTC AA->A->bool)", "inv AA->A->bool"
inv__MOVES__OUT__e5:"fun", "bool", "inv", "EQC", "=", "AA->A->bool", "EQC (inv AA->A->bool)", "EQC AA->A->bool", "inv AA->A->bool"
reflexive__inv:"fun", "bool", "reflexive", "inv", "=", "AA->A->bool", "inv AA->A->bool", "reflexive (inv AA->A->bool)", "reflexive (inv AA->A->bool) <=> reflexive AA->A->bool", "reflexive AA->A->bool"
irreflexive__inv:"fun", "bool", "irreflexive", "inv", "=", "AA->A->bool", "inv AA->A->bool", "irreflexive (inv AA->A->bool)", "irreflexive (inv AA->A->bool) <=> irreflexive AA->A->bool", "irreflexive AA->A->bool"
symmetric__inv:"fun", "bool", "symmetric", "inv", "=", "AA->A->bool", "inv AA->A->bool", "symmetric (inv AA->A->bool)", "symmetric (inv AA->A->bool) <=> symmetric AA->A->bool", "symmetric AA->A->bool"
antisymmetric__inv:"fun", "bool", "inv", "antisymmetric", "=", "AA->A->bool", "antisymmetric (inv AA->A->bool)", "antisymmetric (inv AA->A->bool) <=> antisymmetric AA->A->bool", "antisymmetric AA->A->bool", "inv AA->A->bool"
transitive__inv:"fun", "bool", "transitive", "inv", "=", "AA->A->bool", "inv AA->A->bool", "transitive (inv AA->A->bool)", "transitive (inv AA->A->bool) <=> transitive AA->A->bool", "transitive AA->A->bool"
symmetric__inv__identity:"fun", "bool", "symmetric", "inv", "=", "AA->A->bool", "inv AA->A->bool", "symmetric AA->A->bool"
equivalence__inv__identity:"fun", "bool", "inv", "equivalence", "=", "AA->A->bool", "equivalence AA->A->bool", "inv AA->A->bool"
INVOL__DEF:"fun", "bool", "o", "INVOL", "I", "=", "AA->A", "I", "INVOL AA->A", "INVOL AA->A <=> o AA->A AA->A = I", "o AA->A AA->A"
INVOL0:"fun", "bool", "INVOL", "=", "AA", "AA->A", "AA->A (AA->A AA)", "AA->A AA", "INVOL AA->A", "INVOL AA->A <=> (!AA. AA->A (AA->A AA) = AA)"
INVOL__ONE__ONE:"fun", "bool", "INVOL", "=", "AA", "AA->A", "AA->A AA", "AA->A AA = AA->A AA <=> AA = AA", "INVOL AA->A"
INVOL__ONE__ENO:"fun", "bool", "INVOL", "=", "AA", "AA->A", "AA->A AA", "AA->A AA = AA <=> AA = AA->A AA", "INVOL AA->A"
NOT__INVOL:"fun", "bool", "INVOL", "$not", "$not", "INVOL $not"
IDEM__DEF:"fun", "bool", "o", "IDEM", "=", "AA->A", "IDEM AA->A", "IDEM AA->A <=> o AA->A AA->A = AA->A", "o AA->A AA->A"
IDEM0:"fun", "bool", "IDEM", "=", "AA", "AA->A", "AA->A (AA->A AA)", "AA->A AA", "IDEM AA->A", "IDEM AA->A <=> (!AA. AA->A (AA->A AA) = AA->A AA)"
inv__INVOL:"fun", "bool", "inv", "INVOL", "INVOL inv", "inv"
O__DEF:"fun", "bool", "O", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "AB->C->bool", "AB->C->bool AB AC", "AC", "O AB->C->bool AA->B->bool AA AC", "O AB->C->bool AA->B->bool AA AC <=> (?AB. AA->B->bool AA AB /\ AB->C->bool AB AC)"
inv__O:"fun", "bool", "inv", "O", "=", "AA->A->bool", "O (inv AA->A->bool) (inv AA->A->bool)", "O AA->A->bool AA->A->bool", "inv (O AA->A->bool AA->A->bool)", "inv AA->A->bool"
RSUBSET0:"fun", "bool", "RSUBSET", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "RSUBSET AA->B->bool AA->B->bool", "RSUBSET AA->B->bool AA->B->bool <=> (!AA AB. AA->B->bool AA AB ==> AA->B->bool AA AB)"
irreflexive__RSUBSET:"fun", "bool", "irreflexive", "RSUBSET", "AA->A->bool", "RSUBSET AA->A->bool AA->A->bool", "irreflexive AA->A->bool"
RUNION0:"fun", "bool", "RUNION", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "RUNION AA->B->bool AA->B->bool AA AB", "RUNION AA->B->bool AA->B->bool AA AB <=> AA->B->bool AA AB \/ AA->B->bool AA AB"
RUNION__COMM:"fun", "bool", "RUNION", "=", "AA->B->bool", "RUNION AA->B->bool AA->B->bool"
RUNION__ASSOC:"fun", "bool", "RUNION", "=", "AA->B->bool", "RUNION (RUNION AA->B->bool AA->B->bool) AA->B->bool", "RUNION AA->B->bool (RUNION AA->B->bool AA->B->bool)", "RUNION AA->B->bool AA->B->bool"
RINTER0:"fun", "bool", "RINTER", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "RINTER AA->B->bool AA->B->bool AA AB", "RINTER AA->B->bool AA->B->bool AA AB <=> AA->B->bool AA AB /\ AA->B->bool AA AB"
RINTER__COMM:"fun", "bool", "RINTER", "=", "AA->B->bool", "RINTER AA->B->bool AA->B->bool"
RINTER__ASSOC:"fun", "bool", "RINTER", "=", "AA->B->bool", "RINTER (RINTER AA->B->bool AA->B->bool) AA->B->bool", "RINTER AA->B->bool (RINTER AA->B->bool AA->B->bool)", "RINTER AA->B->bool AA->B->bool"
antisymmetric__RINTER__0:"fun", "bool", "antisymmetric", "RINTER", "AA->A->bool", "RINTER AA->A->bool AA->A->bool", "antisymmetric (RINTER AA->A->bool AA->A->bool)", "antisymmetric AA->A->bool"
antisymmetric__RINTER__e1:"fun", "bool", "antisymmetric", "RINTER", "AA->A->bool", "RINTER AA->A->bool AA->A->bool", "antisymmetric (RINTER AA->A->bool AA->A->bool)", "antisymmetric AA->A->bool"
transitive__RINTER:"fun", "bool", "transitive", "RINTER", "AA->A->bool", "RINTER AA->A->bool AA->A->bool", "transitive (RINTER AA->A->bool AA->A->bool)", "transitive AA->A->bool"
RCOMPL0:"fun", "bool", "~", "RCOMPL", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "RCOMPL AA->B->bool AA AB", "RCOMPL AA->B->bool AA AB <=> ~AA->B->bool AA AB"
reflexive__Id__RSUBSET:"fun", "bool", "reflexive", "RSUBSET", "=", "$equals", "$equals", "AA->A->bool", "RSUBSET $equals AA->A->bool", "reflexive AA->A->bool", "reflexive AA->A->bool <=> RSUBSET $equals AA->A->bool"
symmetric__inv__RSUBSET:"fun", "bool", "symmetric", "inv", "RSUBSET", "=", "AA->A->bool", "RSUBSET (inv AA->A->bool) AA->A->bool", "inv AA->A->bool", "symmetric AA->A->bool", "symmetric AA->A->bool <=> RSUBSET (inv AA->A->bool) AA->A->bool"
transitive__O__RSUBSET:"fun", "bool", "transitive", "RSUBSET", "O", "=", "AA->A->bool", "O AA->A->bool AA->A->bool", "RSUBSET (O AA->A->bool AA->A->bool) AA->A->bool", "transitive AA->A->bool", "transitive AA->A->bool <=> RSUBSET (O AA->A->bool AA->A->bool) AA->A->bool"
PreOrder0:"fun", "bool", "transitive", "reflexive", "PreOrder", "=", "AA->A->bool", "PreOrder AA->A->bool", "PreOrder AA->A->bool <=> reflexive AA->A->bool /\ transitive AA->A->bool", "reflexive AA->A->bool", "transitive AA->A->bool"
Order0:"fun", "bool", "transitive", "antisymmetric", "Order", "=", "AA->A->bool", "Order AA->A->bool", "Order AA->A->bool <=> antisymmetric AA->A->bool /\ transitive AA->A->bool", "antisymmetric AA->A->bool", "transitive AA->A->bool"
WeakOrder0:"fun", "bool", "transitive", "reflexive", "antisymmetric", "WeakOrder", "=", "AA->A->bool", "WeakOrder AA->A->bool", "WeakOrder AA->A->bool <=> reflexive AA->A->bool /\ antisymmetric AA->A->bool /\ transitive AA->A->bool", "antisymmetric AA->A->bool", "reflexive AA->A->bool", "transitive AA->A->bool"
StrongOrder0:"fun", "bool", "transitive", "irreflexive", "StrongOrder", "=", "AA->A->bool", "StrongOrder AA->A->bool", "StrongOrder AA->A->bool <=> irreflexive AA->A->bool /\ transitive AA->A->bool", "irreflexive AA->A->bool", "transitive AA->A->bool"
irrefl__trans__implies__antisym:"fun", "bool", "transitive", "irreflexive", "antisymmetric", "AA->A->bool", "antisymmetric AA->A->bool", "irreflexive AA->A->bool", "transitive AA->A->bool"
StrongOrd__Ord:"fun", "bool", "StrongOrder", "Order", "AA->A->bool", "Order AA->A->bool", "StrongOrder AA->A->bool"
WeakOrd__Ord:"fun", "bool", "WeakOrder", "Order", "AA->A->bool", "Order AA->A->bool", "WeakOrder AA->A->bool"
WeakOrder__EQ:"fun", "bool", "WeakOrder", "=", "AA", "AA = AA <=> AA->A->bool AA AA /\ AA->A->bool AA AA", "AA->A->bool", "AA->A->bool AA AA", "WeakOrder AA->A->bool"
RSUBSET__ANTISYM:"fun", "bool", "RSUBSET", "=", "AA->B->bool", "RSUBSET AA->B->bool AA->B->bool"
RSUBSET__antisymmetric:"fun", "bool", "antisymmetric", "RSUBSET", "RSUBSET", "antisymmetric RSUBSET"
RSUBSET__WeakOrder:"fun", "bool", "WeakOrder", "RSUBSET", "RSUBSET", "WeakOrder RSUBSET"
EqIsBothRSUBSET:"fun", "bool", "RSUBSET", "=", "AA->B->bool", "AA->B->bool = AA->B->bool <=> RSUBSET AA->B->bool AA->B->bool /\ RSUBSET AA->B->bool AA->B->bool", "RSUBSET AA->B->bool AA->B->bool"
STRORD0:"fun", "bool", "~", "STRORD", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "STRORD AA->A->bool AA AA", "STRORD AA->A->bool AA AA <=> AA->A->bool AA AA /\ ~(AA = AA)"
STRORD__AND__NOT__Id:"fun", "bool", "STRORD", "RINTER", "RCOMPL", "=", "$equals", "$equals", "AA->A->bool", "RCOMPL $equals", "RINTER AA->A->bool (RCOMPL $equals)", "STRORD AA->A->bool"
RC__OR__Id:"fun", "bool", "RUNION", "RC", "=", "$equals", "$equals", "AA->A->bool", "RC AA->A->bool", "RUNION AA->A->bool $equals"
RC__Weak:"fun", "bool", "WeakOrder", "RC", "Order", "=", "AA->A->bool", "Order AA->A->bool", "Order AA->A->bool <=> WeakOrder (RC AA->A->bool)", "RC AA->A->bool", "WeakOrder (RC AA->A->bool)"
STRORD__Strong:"fun", "bool", "StrongOrder", "STRORD", "Order", "=", "AA->A->bool", "Order AA->A->bool", "Order AA->A->bool <=> StrongOrder (STRORD AA->A->bool)", "STRORD AA->A->bool", "StrongOrder (STRORD AA->A->bool)"
STRORD__RC:"fun", "bool", "StrongOrder", "STRORD", "RC", "=", "AA->A->bool", "RC AA->A->bool", "STRORD (RC AA->A->bool)", "StrongOrder AA->A->bool"
RC__STRORD:"fun", "bool", "WeakOrder", "STRORD", "RC", "=", "AA->A->bool", "RC (STRORD AA->A->bool)", "STRORD AA->A->bool", "WeakOrder AA->A->bool"
IDEM__STRORD:"fun", "bool", "STRORD", "IDEM", "IDEM STRORD", "STRORD"
IDEM__RC:"fun", "bool", "RC", "IDEM", "IDEM RC", "RC"
IDEM__SC:"fun", "bool", "SC", "IDEM", "IDEM SC", "SC"
IDEM__TC:"fun", "bool", "TC", "IDEM", "IDEM TC", "TC"
IDEM__RTC:"fun", "bool", "RTC", "IDEM", "IDEM RTC", "RTC"
trichotomous__STRORD:"fun", "bool", "trichotomous", "STRORD", "=", "AA->A->bool", "STRORD AA->A->bool", "trichotomous (STRORD AA->A->bool)", "trichotomous (STRORD AA->A->bool) <=> trichotomous AA->A->bool", "trichotomous AA->A->bool"
trichotomous__RC:"fun", "bool", "trichotomous", "RC", "=", "AA->A->bool", "RC AA->A->bool", "trichotomous (RC AA->A->bool)", "trichotomous (RC AA->A->bool) <=> trichotomous AA->A->bool", "trichotomous AA->A->bool"
LinearOrder0:"fun", "bool", "trichotomous", "Order", "LinearOrder", "=", "AA->A->bool", "LinearOrder AA->A->bool", "LinearOrder AA->A->bool <=> Order AA->A->bool /\ trichotomous AA->A->bool", "Order AA->A->bool", "trichotomous AA->A->bool"
StrongLinearOrder0:"fun", "bool", "trichotomous", "StrongOrder", "StrongLinearOrder", "=", "AA->A->bool", "StrongLinearOrder AA->A->bool", "StrongLinearOrder AA->A->bool <=> StrongOrder AA->A->bool /\ trichotomous AA->A->bool", "StrongOrder AA->A->bool", "trichotomous AA->A->bool"
WeakLinearOrder0:"fun", "bool", "trichotomous", "WeakOrder", "WeakLinearOrder", "=", "AA->A->bool", "WeakLinearOrder AA->A->bool", "WeakLinearOrder AA->A->bool <=> WeakOrder AA->A->bool /\ trichotomous AA->A->bool", "WeakOrder AA->A->bool", "trichotomous AA->A->bool"
WeakLinearOrder__dichotomy:"fun", "bool", "WeakOrder", "WeakLinearOrder", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "WeakLinearOrder AA->A->bool", "WeakLinearOrder AA->A->bool <=> WeakOrder AA->A->bool /\ (!AA AA. AA->A->bool AA AA \/ AA->A->bool AA AA)", "WeakOrder AA->A->bool"
diag__def:"fun", "bool", "diag", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "diag AA->bool AA AA", "diag AA->bool AA AA <=> AA = AA /\ IN AA AA->bool"
O__ASSOC:"fun", "bool", "O", "=", "AB->A->bool", "AC->D->bool", "AD->B->bool", "O (O AB->A->bool AD->B->bool) AC->D->bool", "O AB->A->bool (O AD->B->bool AC->D->bool)", "O AB->A->bool AD->B->bool", "O AD->B->bool AC->D->bool"
Id__O:"fun", "bool", "O", "=", "$equals", "$equals", "AA->B->bool", "O $equals AA->B->bool"
O__Id:"fun", "bool", "O", "=", "$equals", "$equals", "AA->B->bool", "O AA->B->bool $equals"
O__MONO:"fun", "bool", "RSUBSET", "O", "AB->C->bool", "AC->A->bool", "O AC->A->bool AB->C->bool", "RSUBSET (O AC->A->bool AB->C->bool) (O AC->A->bool AB->C->bool)", "RSUBSET AB->C->bool AB->C->bool", "RSUBSET AC->A->bool AC->A->bool"
inv__Id:"fun", "bool", "inv", "=", "$equals", "$equals", "inv $equals"
inv__diag:"fun", "bool", "inv", "diag", "=", "AA->bool", "diag AA->bool", "inv (diag AA->bool)"
RDOM__DEF:"fun", "bool", "RDOM", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "RDOM AA->B->bool AA", "RDOM AA->B->bool AA <=> (?AB. AA->B->bool AA AB)"
IN__RDOM:"fun", "bool", "RDOM", "IN", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "IN AA (RDOM AA->B->bool)", "IN AA (RDOM AA->B->bool) <=> (?AB. AA->B->bool AA AB)", "RDOM AA->B->bool"
RRANGE0:"fun", "bool", "RRANGE", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "RRANGE AA->B->bool AB", "RRANGE AA->B->bool AB <=> (?AA. AA->B->bool AA AB)"
IN__RRANGE:"fun", "bool", "RRANGE", "IN", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "IN AB (RRANGE AA->B->bool)", "IN AB (RRANGE AA->B->bool) <=> (?AA. AA->B->bool AA AB)", "RRANGE AA->B->bool"
IN__RDOM__RUNION:"fun", "bool", "RUNION", "RDOM", "IN", "=", "AA", "AA->B->bool", "IN AA (RDOM (RUNION AA->B->bool AA->B->bool))", "IN AA (RDOM (RUNION AA->B->bool AA->B->bool)) <=> IN AA (RDOM AA->B->bool) \/ IN AA (RDOM AA->B->bool)", "IN AA (RDOM AA->B->bool)", "RDOM (RUNION AA->B->bool AA->B->bool)", "RDOM AA->B->bool", "RUNION AA->B->bool AA->B->bool"
RUNIV0:"fun", "bool", "T", "RUNIV", "=", "AA", "AB", "RUNIV AA AB", "RUNIV AA AB <=> T", "T"
RUNIV__SUBSET__0:"fun", "bool", "RUNIV", "RSUBSET", "=", "AA->B->bool", "RSUBSET RUNIV AA->B->bool", "RSUBSET RUNIV AA->B->bool <=> AA->B->bool = RUNIV", "RUNIV"
RUNIV__SUBSET__e1:"fun", "bool", "RUNIV", "RSUBSET", "AA->B->bool", "RSUBSET AA->B->bool RUNIV", "RUNIV"
REMPTY__SUBSET__0:"fun", "bool", "RSUBSET", "EMPTY__REL", "AA->A->bool", "EMPTY__REL", "RSUBSET EMPTY__REL AA->A->bool"
REMPTY__SUBSET__e1:"fun", "bool", "RSUBSET", "EMPTY__REL", "=", "AA->A->bool", "EMPTY__REL", "RSUBSET AA->A->bool EMPTY__REL", "RSUBSET AA->A->bool EMPTY__REL <=> AA->A->bool = EMPTY__REL"
RRESTRICT__DEF:"fun", "bool", "RRESTRICT", "IN", "=", "AA", "AB", "AB->A->bool", "AB->A->bool AB AA", "AB->bool", "IN AB AB->bool", "RRESTRICT AB->A->bool AB->bool AB AA", "RRESTRICT AB->A->bool AB->bool AB AA <=> AB->A->bool AB AA /\ IN AB AB->bool"
IN__RDOM__RRESTRICT:"fun", "bool", "RRESTRICT", "RDOM", "IN", "=", "AB", "AB->A->bool", "AB->bool", "IN AB (RDOM (RRESTRICT AB->A->bool AB->bool))", "IN AB (RDOM (RRESTRICT AB->A->bool AB->bool)) <=> IN AB (RDOM AB->A->bool) /\ IN AB AB->bool", "IN AB (RDOM AB->A->bool)", "IN AB AB->bool", "RDOM (RRESTRICT AB->A->bool AB->bool)", "RDOM AB->A->bool", "RRESTRICT AB->A->bool AB->bool"
RDOM__DELETE__DEF:"fun", "bool", "~", "RDOM__DELETE", "=", "AA", "AB", "AB->A->bool", "AB->A->bool AB AA", "RDOM__DELETE AB->A->bool AB AB AA", "RDOM__DELETE AB->A->bool AB AB AA <=> AB->A->bool AB AA /\ ~(AB = AB)"
IN__RDOM__DELETE:"fun", "bool", "~", "RDOM__DELETE", "RDOM", "IN", "=", "AB", "AB->A->bool", "IN AB (RDOM (RDOM__DELETE AB->A->bool AB))", "IN AB (RDOM (RDOM__DELETE AB->A->bool AB)) <=> IN AB (RDOM AB->A->bool) /\ ~(AB = AB)", "IN AB (RDOM AB->A->bool)", "RDOM (RDOM__DELETE AB->A->bool AB)", "RDOM AB->A->bool", "RDOM__DELETE AB->A->bool AB"
diamond__def:"fun", "bool", "diamond", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "diamond AA->A->bool", "diamond AA->A->bool <=> (!AA AA AA. AA->A->bool AA AA /\ AA->A->bool AA AA ==> (?AA. AA->A->bool AA AA /\ AA->A->bool AA AA))"
rcdiamond__def:"fun", "bool", "rcdiamond", "RC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "RC AA->A->bool AA AA", "rcdiamond AA->A->bool", "rcdiamond AA->A->bool <=> (!AA AA AA. AA->A->bool AA AA /\ AA->A->bool AA AA ==> (?AA. RC AA->A->bool AA AA /\ RC AA->A->bool AA AA))"
CR__def:"fun", "bool", "diamond", "RTC", "CR", "=", "AA->A->bool", "CR AA->A->bool", "CR AA->A->bool <=> diamond (RTC AA->A->bool)", "RTC AA->A->bool", "diamond (RTC AA->A->bool)"
WCR__def:"fun", "bool", "WCR", "RTC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "RTC AA->A->bool AA AA", "WCR AA->A->bool", "WCR AA->A->bool <=> (!AA AA AA. AA->A->bool AA AA /\ AA->A->bool AA AA ==> (?AA. RTC AA->A->bool AA AA /\ RTC AA->A->bool AA AA))"
SN__def:"fun", "bool", "inv", "WF", "SN", "=", "AA->A->bool", "SN AA->A->bool", "SN AA->A->bool <=> WF (inv AA->A->bool)", "WF (inv AA->A->bool)", "inv AA->A->bool"
nf__def:"fun", "bool", "~", "nf", "=", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "nf AA->B->bool AA", "nf AA->B->bool AA <=> (!AB. ~AA->B->bool AA AB)"
rcdiamond__diamond:"fun", "bool", "rcdiamond", "diamond", "RC", "=", "AA->A->bool", "RC AA->A->bool", "diamond (RC AA->A->bool)", "rcdiamond AA->A->bool", "rcdiamond AA->A->bool <=> diamond (RC AA->A->bool)"
diamond__RC__diamond:"fun", "bool", "diamond", "RC", "AA->A->bool", "RC AA->A->bool", "diamond (RC AA->A->bool)", "diamond AA->A->bool"
diamond__TC__diamond:"fun", "bool", "diamond", "TC", "AA->A->bool", "TC AA->A->bool", "diamond (TC AA->A->bool)", "diamond AA->A->bool"
establish__CR__0:"fun", "bool", "rcdiamond", "CR", "AA->A->bool", "CR AA->A->bool", "rcdiamond AA->A->bool"
establish__CR__e1:"fun", "bool", "diamond", "CR", "AA->A->bool", "CR AA->A->bool", "diamond AA->A->bool"
Newmans__lemma:"fun", "bool", "WCR", "SN", "CR", "AA->A->bool", "CR AA->A->bool", "SN AA->A->bool", "WCR AA->A->bool"
SUC__REP__DEF__0:"ind", "fun", "bool", "SUC__REP", "ONE__ONE", "ONE__ONE SUC__REP", "SUC__REP"
SUC__REP__DEF__e1:"ind", "fun", "bool", "~", "SUC__REP", "ONTO", "ONTO SUC__REP", "SUC__REP"
ZERO__REP__DEF:"ind", "fun", "bool", "~", "ZERO__REP", "SUC__REP", "=", "Aind", "SUC__REP Aind", "ZERO__REP"
IS__NUM__REP0:"ind", "fun", "bool", "ZERO__REP", "SUC__REP", "IS__NUM__REP", "=", "Aind", "Aind->bool (SUC__REP Aind)", "Aind->bool Aind", "Aind->bool ZERO__REP", "IS__NUM__REP Aind", "IS__NUM__REP Aind <=> (!Aind->bool. Aind->bool ZERO__REP /\ (!Aind. Aind->bool Aind ==> Aind->bool (SUC__REP Aind)) ==> Aind->bool Aind)", "SUC__REP Aind", "ZERO__REP"
num__TY__DEF:"num", "ind", "fun", "bool", "TYPE__DEFINITION", "IS__NUM__REP", "Anum->ind", "IS__NUM__REP", "TYPE__DEFINITION IS__NUM__REP Anum->ind"
num__ISO__DEF__0:"num", "ind", "fun", "bool", "REP__num", "ABS__num", "=", "ABS__num (REP__num Anum)", "Anum", "REP__num Anum"
num__ISO__DEF__e1:"num", "ind", "fun", "bool", "REP__num", "IS__NUM__REP", "ABS__num", "=", "ABS__num Aind", "Aind", "IS__NUM__REP Aind", "IS__NUM__REP Aind <=> REP__num (ABS__num Aind) = Aind", "REP__num (ABS__num Aind)"
ZERO__DEF:"num", "ind", "fun", "bool", "ZERO__REP", "ABS__num", "=", "0", "0", "ABS__num ZERO__REP", "ZERO__REP"
SUC__DEF:"num", "ind", "fun", "bool", "SUC__REP", "SUC", "REP__num", "ABS__num", "=", "ABS__num (SUC__REP (REP__num Anum))", "Anum", "REP__num Anum", "SUC Anum", "SUC__REP (REP__num Anum)"
NOT__SUC:"num", "fun", "bool", "~", "SUC", "=", "0", "0", "Anum", "SUC Anum"
INV__SUC:"num", "fun", "bool", "SUC", "=", "Anum", "SUC Anum"
INDUCTION:"num", "fun", "bool", "SUC", "0", "0", "Anum", "Anum->bool (SUC Anum)", "Anum->bool 0", "Anum->bool Anum", "SUC Anum"
LESS__DEF:"num", "fun", "bool", "~", "_3C", "SUC", "=", "Anum", "Anum->bool (SUC Anum)", "Anum->bool Anum", "SUC Anum", "_3C Anum Anum", "_3C Anum Anum <=> (?Anum->bool. (!Anum. Anum->bool (SUC Anum) ==> Anum->bool Anum) /\ Anum->bool Anum /\ ~Anum->bool Anum)"
INV__SUC__EQ:"num", "fun", "bool", "SUC", "=", "Anum", "SUC Anum", "SUC Anum = SUC Anum <=> Anum = Anum"
LESS__REFL:"num", "fun", "bool", "~", "_3C", "Anum", "_3C Anum Anum"
SUC__LESS:"num", "fun", "bool", "_3C", "SUC", "Anum", "SUC Anum", "_3C (SUC Anum) Anum", "_3C Anum Anum"
NOT__LESS__0:"num", "fun", "bool", "~", "_3C", "0", "0", "Anum", "_3C Anum 0"
LESS__0__0:"num", "fun", "bool", "_3C", "SUC", "0", "0", "SUC 0", "_3C 0 (SUC 0)"
LESS__MONO:"num", "fun", "bool", "_3C", "SUC", "Anum", "SUC Anum", "_3C (SUC Anum) (SUC Anum)", "_3C Anum Anum"
LESS__SUC__REFL:"num", "fun", "bool", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum (SUC Anum)"
LESS__SUC:"num", "fun", "bool", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C Anum Anum"
LESS__LEMMA1:"num", "fun", "bool", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C Anum Anum"
LESS__LEMMA2:"num", "fun", "bool", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C Anum Anum"
LESS__THM:"num", "fun", "bool", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C Anum (SUC Anum) <=> Anum = Anum \/ _3C Anum Anum", "_3C Anum Anum"
LESS__SUC__IMP:"num", "fun", "bool", "~", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C Anum Anum"
LESS__0:"num", "fun", "bool", "_3C", "SUC", "0", "0", "Anum", "SUC Anum", "_3C 0 (SUC Anum)"
EQ__LESS:"num", "fun", "bool", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C Anum Anum"
SUC__ID:"num", "fun", "bool", "~", "SUC", "=", "Anum", "SUC Anum"
NOT__LESS__EQ:"num", "fun", "bool", "~", "_3C", "=", "Anum", "_3C Anum Anum"
LESS__NOT__EQ:"num", "fun", "bool", "~", "_3C", "=", "Anum", "_3C Anum Anum"
SIMP__REC__REL0:"num", "fun", "bool", "_3C", "SUC", "SIMP__REC__REL", "=", "0", "0", "AA", "AA->A", "AA->A (Anum->A Anum)", "Anum", "Anum->A", "Anum->A (SUC Anum)", "Anum->A 0", "Anum->A Anum", "SIMP__REC__REL Anum->A AA AA->A Anum", "SIMP__REC__REL Anum->A AA AA->A Anum <=> Anum->A 0 = AA /\ (!Anum. _3C Anum Anum ==> Anum->A (SUC Anum) = AA->A (Anum->A Anum))", "SUC Anum", "_3C Anum Anum"
SIMP__REC__EXISTS:"num", "fun", "bool", "SIMP__REC__REL", "AA", "AA->A", "Anum", "Anum->A", "SIMP__REC__REL Anum->A AA AA->A Anum"
SIMP__REC__REL__UNIQUE:"num", "fun", "bool", "_3C", "SIMP__REC__REL", "=", "AA", "AA->A", "Anum", "Anum->A", "Anum->A Anum", "SIMP__REC__REL Anum->A AA AA->A Anum", "_3C Anum Anum"
SIMP__REC__REL__UNIQUE__RESULT:"num", "fun", "bool", "_3F_21", "SUC", "SIMP__REC__REL", "=", "AA", "AA->A", "Anum", "Anum->A", "Anum->A Anum", "SIMP__REC__REL Anum->A AA AA->A (SUC Anum)", "SUC Anum", "_3F_21 (\AA. ?Anum->A. SIMP__REC__REL Anum->A AA AA->A (SUC Anum) /\ AA = Anum->A Anum)"
SIMP__REC0:"num", "fun", "bool", "SUC", "SIMP__REC__REL", "SIMP__REC", "=", "AA", "AA->A", "Anum", "Anum->A", "Anum->A Anum", "SIMP__REC AA AA->A Anum", "SIMP__REC__REL Anum->A AA AA->A (SUC Anum)", "SUC Anum"
LESS__SUC__SUC__0:"num", "fun", "bool", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum (SUC Anum)"
LESS__SUC__SUC__e1:"num", "fun", "bool", "_3C", "SUC", "Anum", "SUC (SUC Anum)", "SUC Anum", "_3C Anum (SUC (SUC Anum))"
SIMP__REC__THM__0:"num", "fun", "bool", "SIMP__REC", "=", "0", "0", "AA", "AA->A", "SIMP__REC AA AA->A 0"
SIMP__REC__THM__e1:"num", "fun", "bool", "SUC", "SIMP__REC", "=", "AA", "AA->A", "AA->A (SIMP__REC AA AA->A Anum)", "Anum", "SIMP__REC AA AA->A (SUC Anum)", "SIMP__REC AA AA->A Anum", "SUC Anum"
PRE__DEF:"num", "fun", "bool", "_40", "SUC", "PRE", "COND", "=", "0", "0", "Anum", "PRE Anum", "SUC Anum", "_40 (\Anum. Anum = SUC Anum)", "if Anum = 0 then 0 else _40 (\Anum. Anum = SUC Anum)"
PRE__0:"num", "fun", "bool", "PRE", "=", "0", "0", "PRE 0"
PRE__e1:"num", "fun", "bool", "SUC", "PRE", "=", "Anum", "PRE (SUC Anum)", "SUC Anum"
PRIM__REC__FUN0:"num", "fun", "bool", "SIMP__REC", "PRIM__REC__FUN", "PRE", "=", "AA", "AA->num->A", "AA->num->A (Anum->A (PRE Anum)) Anum", "Anum", "Anum->A (PRE Anum)", "PRE Anum", "PRIM__REC__FUN AA AA->num->A", "SIMP__REC (\Anum. AA) (\Anum->A Anum. AA->num->A (Anum->A (PRE Anum)) Anum)"
PRIM__REC__EQN__0:"num", "fun", "bool", "PRIM__REC__FUN", "=", "0", "0", "AA", "AA->num->A", "Anum", "PRIM__REC__FUN AA AA->num->A 0 Anum"
PRIM__REC__EQN__e1:"num", "fun", "bool", "SUC", "PRIM__REC__FUN", "PRE", "=", "AA", "AA->num->A", "AA->num->A (PRIM__REC__FUN AA AA->num->A Anum (PRE Anum)) Anum", "Anum", "PRE Anum", "PRIM__REC__FUN AA AA->num->A (SUC Anum) Anum", "PRIM__REC__FUN AA AA->num->A Anum (PRE Anum)", "SUC Anum"
PRIM__REC0:"num", "fun", "bool", "PRIM__REC__FUN", "PRIM__REC", "PRE", "=", "AA", "AA->num->A", "Anum", "PRE Anum", "PRIM__REC AA AA->num->A Anum", "PRIM__REC__FUN AA AA->num->A Anum (PRE Anum)"
PRIM__REC__THM__0:"num", "fun", "bool", "PRIM__REC", "=", "0", "0", "AA", "AA->num->A", "PRIM__REC AA AA->num->A 0"
PRIM__REC__THM__e1:"num", "fun", "bool", "SUC", "PRIM__REC", "=", "AA", "AA->num->A", "AA->num->A (PRIM__REC AA AA->num->A Anum) Anum", "Anum", "PRIM__REC AA AA->num->A (SUC Anum)", "PRIM__REC AA AA->num->A Anum", "SUC Anum"
DC:"num", "fun", "bool", "SUC", "=", "0", "0", "AA", "AA->A->bool (Anum->A Anum) (Anum->A (SUC Anum))", "AA->A->bool AA AA", "AA->bool (Anum->A Anum)", "AA->bool AA", "Anum", "Anum->A (SUC Anum)", "Anum->A 0", "Anum->A Anum", "SUC Anum"
num__Axiom__old:"num", "fun", "bool", "_3F_21", "SUC", "=", "0", "0", "AA", "AA->num->A (Anum->A Anum) Anum", "Anum", "Anum->A (SUC Anum)", "Anum->A 0", "Anum->A Anum", "SUC Anum", "_3F_21 (\Anum->A. Anum->A 0 = AA /\ (!Anum. Anum->A (SUC Anum) = AA->num->A (Anum->A Anum) Anum))"
num__Axiom:"num", "fun", "bool", "SUC", "=", "0", "0", "AA", "Anum", "Anum->A (SUC Anum)", "Anum->A 0", "Anum->A Anum", "Anum->A->A Anum (Anum->A Anum)", "SUC Anum"
wellfounded__def:"num", "fun", "bool", "~", "wellfounded", "SUC", "=", "AA->A->bool", "AA->A->bool (Anum->A (SUC Anum)) (Anum->A Anum)", "Anum", "Anum->A (SUC Anum)", "Anum->A Anum", "SUC Anum", "wellfounded AA->A->bool", "wellfounded AA->A->bool <=> ~(?Anum->A. !Anum. AA->A->bool (Anum->A (SUC Anum)) (Anum->A Anum))"
WF__IFF__WELLFOUNDED:"fun", "bool", "wellfounded", "WF", "=", "AA->A->bool", "WF AA->A->bool", "WF AA->A->bool <=> wellfounded AA->A->bool", "wellfounded AA->A->bool"
WF__PRED:"num", "fun", "bool", "WF", "SUC", "=", "Anum", "SUC Anum", "WF (\Anum Anum. Anum = SUC Anum)"
WF__LESS:"num", "fun", "bool", "_3C", "WF", "WF _3C", "_3C"
measure__def:"num", "fun", "bool", "measure", "inv__image", "_3C", "=", "_3C", "inv__image _3C", "measure"
WF__measure:"num", "fun", "bool", "measure", "WF", "AA->num", "WF (measure AA->num)", "measure AA->num"
measure__thm:"num", "fun", "bool", "measure", "_3C", "=", "AA", "AA->num", "AA->num AA", "_3C (AA->num AA) (AA->num AA)", "measure AA->num AA AA", "measure AA->num AA AA <=> _3C (AA->num AA) (AA->num AA)"
prod__TY__DEF:"prod", "fun", "bool", "TYPE__DEFINITION", "=", "AA", "AA#B->A->B->bool", "AA->B->bool", "AB", "TYPE__DEFINITION (\AA->B->bool. ?AA AB. AA->B->bool = (\AA AB. AA = AA /\ AB = AB)) AA#B->A->B->bool"
ABS__REP__prod__0:"prod", "fun", "bool", "REP__prod", "ABS__prod", "=", "AA#B", "ABS__prod (REP__prod AA#B)", "REP__prod AA#B"
ABS__REP__prod__e1:"prod", "fun", "bool", "REP__prod", "ABS__prod", "=", "(\AA->B->bool. ?AA AB. AA->B->bool = (\AA AB. AA = AA /\ AB = AB)) AA->B->bool", "(\AA->B->bool. ?AA AB. AA->B->bool = (\AA AB. AA = AA /\ AB = AB)) AA->B->bool <=> REP__prod (ABS__prod AA->B->bool) = AA->B->bool", "AA", "AA->B->bool", "AB", "ABS__prod AA->B->bool", "REP__prod (ABS__prod AA->B->bool)"
COMMA__DEF:"prod", "fun", "bool", "_2C", "ABS__prod", "=", "AA", "AB", "ABS__prod (\AA AB. AA = AA /\ AB = AB)", "_2C AA AB"
PAIR__EQ:"prod", "fun", "bool", "_2C", "=", "AA", "AB", "_2C AA AB", "_2C AA AB = _2C AA AB <=> AA = AA /\ AB = AB"
CLOSED__PAIR__EQ:"prod", "fun", "bool", "_2C", "=", "AA", "AB", "_2C AA AB", "_2C AA AB = _2C AA AB <=> AA = AA /\ AB = AB"
ABS__PAIR__THM:"prod", "fun", "bool", "_2C", "=", "AA", "AA#B", "AB", "_2C AA AB"
pair__CASES:"prod", "fun", "bool", "_2C", "=", "AA", "AA#B", "AB", "_2C AA AB"
PAIR:"prod", "fun", "bool", "_2C", "SND", "FST", "=", "AA#B", "FST AA#B", "SND AA#B", "_2C (FST AA#B) (SND AA#B)"
FST0:"prod", "fun", "bool", "_2C", "FST", "=", "AA", "AB", "FST (_2C AB AA)", "_2C AB AA"
SND0:"prod", "fun", "bool", "_2C", "SND", "=", "AA", "AB", "SND (_2C AA AB)", "_2C AA AB"
PAIR__FST__SND__EQ:"prod", "fun", "bool", "SND", "FST", "=", "AA#B", "AA#B = AA#B <=> FST AA#B = FST AA#B /\ SND AA#B = SND AA#B", "FST AA#B", "SND AA#B"
SWAP__def:"prod", "fun", "bool", "_2C", "SWAP", "SND", "FST", "=", "AA#B", "FST AA#B", "SND AA#B", "SWAP AA#B", "_2C (SND AA#B) (FST AA#B)"
CURRY__DEF:"prod", "fun", "bool", "_2C", "CURRY", "=", "AB", "AB#C->A", "AB#C->A (_2C AB AC)", "AC", "CURRY AB#C->A AB AC", "_2C AB AC"
UNCURRY0:"prod", "fun", "bool", "UNCURRY", "SND", "FST", "=", "AB#C", "AB->C->A", "AB->C->A (FST AB#C) (SND AB#C)", "FST AB#C", "SND AB#C", "UNCURRY AB->C->A AB#C"
UNCURRY__VAR:"prod", "fun", "bool", "UNCURRY", "SND", "FST", "=", "AB#C", "AB->C->A", "AB->C->A (FST AB#C) (SND AB#C)", "FST AB#C", "SND AB#C", "UNCURRY AB->C->A AB#C"
ELIM__UNCURRY:"prod", "fun", "bool", "UNCURRY", "SND", "FST", "=", "AB#C", "AB->C->A", "AB->C->A (FST AB#C) (SND AB#C)", "FST AB#C", "SND AB#C", "UNCURRY AB->C->A"
UNCURRY__DEF:"prod", "fun", "bool", "_2C", "UNCURRY", "=", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "UNCURRY AB->C->A (_2C AB AC)", "_2C AB AC"
CURRY__UNCURRY__THM:"prod", "fun", "bool", "UNCURRY", "CURRY", "=", "AA->B->C", "CURRY (UNCURRY AA->B->C)", "UNCURRY AA->B->C"
UNCURRY__CURRY__THM:"prod", "fun", "bool", "UNCURRY", "CURRY", "=", "AA#B->C", "CURRY AA#B->C", "UNCURRY (CURRY AA#B->C)"
CURRY__ONE__ONE__THM:"prod", "fun", "bool", "CURRY", "=", "AA#B->C", "CURRY AA#B->C", "CURRY AA#B->C = CURRY AA#B->C <=> AA#B->C = AA#B->C"
UNCURRY__ONE__ONE__THM:"prod", "fun", "bool", "UNCURRY", "=", "AA->B->C", "UNCURRY AA->B->C", "UNCURRY AA->B->C = UNCURRY AA->B->C <=> AA->B->C = AA->B->C"
pair__Axiom:"prod", "fun", "bool", "_2C", "=", "AB", "AB#C->A (_2C AB AC)", "AB->C->A AB AC", "AC", "_2C AB AC"
UNCURRY__CONG:"prod", "fun", "bool", "_2C", "UNCURRY", "=", "AB", "AB#C", "AB->C->A", "AB->C->A AB AC", "AC", "UNCURRY AB->C->A AB#C", "_2C AB AC"
LAMBDA__PROD:"prod", "fun", "bool", "_2C", "UNCURRY", "=", "AB", "AB#C", "AB#C->A (_2C AB AC)", "AB#C->A AB#C", "AC", "UNCURRY (\AB AC. AB#C->A (_2C AB AC))", "_2C AB AC"
EXISTS__PROD:"prod", "fun", "bool", "_2C", "=", "(?AA#B. AA#B->bool AA#B) <=> (?AA AB. AA#B->bool (_2C AA AB))", "AA", "AA#B", "AA#B->bool (_2C AA AB)", "AA#B->bool AA#B", "AB", "_2C AA AB"
FORALL__PROD:"prod", "fun", "bool", "_2C", "=", "(!AA#B. AA#B->bool AA#B) <=> (!AA AB. AA#B->bool (_2C AA AB))", "AA", "AA#B", "AA#B->bool (_2C AA AB)", "AA#B->bool AA#B", "AB", "_2C AA AB"
pair__induction:"prod", "fun", "bool", "_2C", "AA", "AA#B", "AA#B->bool (_2C AA AB)", "AA#B->bool AA#B", "AB", "_2C AA AB"
ELIM__PEXISTS:"prod", "fun", "bool", "SND", "FST", "=", "(?AA#B. AA->B->bool (FST AA#B) (SND AA#B)) <=> (?AA AB. AA->B->bool AA AB)", "AA", "AA#B", "AA->B->bool (FST AA#B) (SND AA#B)", "AA->B->bool AA AB", "AB", "FST AA#B", "SND AA#B"
ELIM__PFORALL:"prod", "fun", "bool", "SND", "FST", "=", "(!AA#B. AA->B->bool (FST AA#B) (SND AA#B)) <=> (!AA AB. AA->B->bool AA AB)", "AA", "AA#B", "AA->B->bool (FST AA#B) (SND AA#B)", "AA->B->bool AA AB", "AB", "FST AA#B", "SND AA#B"
PFORALL__THM:"prod", "fun", "bool", "UNCURRY", "=", "$forall", "$forall (UNCURRY (\AA AB. AA->B->bool AA AB))", "(!AA AB. AA->B->bool AA AB) <=> $forall (UNCURRY (\AA AB. AA->B->bool AA AB))", "AA", "AA->B->bool AA AB", "AB", "UNCURRY (\AA AB. AA->B->bool AA AB)"
PEXISTS__THM:"prod", "fun", "bool", "UNCURRY", "=", "$exists", "$exists (UNCURRY (\AA AB. AA->B->bool AA AB))", "(?AA AB. AA->B->bool AA AB) <=> $exists (UNCURRY (\AA AB. AA->B->bool AA AB))", "AA", "AA->B->bool AA AB", "AB", "UNCURRY (\AA AB. AA->B->bool AA AB)"
ELIM__PEXISTS__EVAL:"prod", "fun", "bool", "UNCURRY", "=", "$exists", "$exists (AB->A->bool AB)", "$exists (UNCURRY (\AB. AB->A->bool AB))", "$exists (UNCURRY (\AB. AB->A->bool AB)) <=> (?AB. $exists (AB->A->bool AB))", "AB", "AB->A->bool AB", "UNCURRY (\AB. AB->A->bool AB)"
ELIM__PFORALL__EVAL:"prod", "fun", "bool", "UNCURRY", "=", "$forall", "$forall (AB->A->bool AB)", "$forall (UNCURRY (\AB. AB->A->bool AB))", "$forall (UNCURRY (\AB. AB->A->bool AB)) <=> (!AB. $forall (AB->A->bool AB))", "AB", "AB->A->bool AB", "UNCURRY (\AB. AB->A->bool AB)"
PAIR__MAP:"prod", "fun", "bool", "_2C", "_23_23", "SND", "FST", "=", "AC#D", "AC->A", "AC->A (FST AC#D)", "AD->B", "AD->B (SND AC#D)", "FST AC#D", "SND AC#D", "_23_23 AC->A AD->B AC#D", "_2C (AC->A (FST AC#D)) (AD->B (SND AC#D))"
PAIR__MAP__THM:"prod", "fun", "bool", "_2C", "_23_23", "=", "AB", "AB->A", "AB->A AB", "AD", "AD->C", "AD->C AD", "_23_23 AB->A AD->C (_2C AB AD)", "_2C (AB->A AB) (AD->C AD)", "_2C AB AD"
FST__PAIR__MAP:"prod", "fun", "bool", "_23_23", "FST", "=", "AC#D", "AC->B", "AC->B (FST AC#D)", "AD->A", "FST (_23_23 AC->B AD->A AC#D)", "FST AC#D", "_23_23 AC->B AD->A AC#D"
SND__PAIR__MAP:"prod", "fun", "bool", "_23_23", "SND", "=", "AC#D", "AC->A", "AD->B", "AD->B (SND AC#D)", "SND (_23_23 AC->A AD->B AC#D)", "SND AC#D", "_23_23 AC->A AD->B AC#D"
LET2__RAND:"prod", "fun", "bool", "UNCURRY", "LET", "=", "AB->A (AC->D->B AC AD)", "AB->A (LET (UNCURRY (\AC AD. AC->D->B AC AD)) AC#D)", "AC", "AC#D", "AC->D->B AC AD", "AD", "LET (UNCURRY (\AC AD. AB->A (AC->D->B AC AD))) AC#D", "LET (UNCURRY (\AC AD. AC->D->B AC AD)) AC#D", "UNCURRY (\AC AD. AB->A (AC->D->B AC AD))", "UNCURRY (\AC AD. AC->D->B AC AD)"
LET2__RATOR:"prod", "fun", "bool", "UNCURRY", "LET", "=", "AB", "AC", "AC#D", "AC->D->B->A AC AD", "AC->D->B->A AC AD AB", "AD", "LET (UNCURRY (\AC AD. AC->D->B->A AC AD AB)) AC#D", "LET (UNCURRY (\AC AD. AC->D->B->A AC AD)) AC#D AB", "UNCURRY (\AC AD. AC->D->B->A AC AD AB)", "UNCURRY (\AC AD. AC->D->B->A AC AD)"
o__UNCURRY__R:"prod", "fun", "bool", "o", "UNCURRY", "=", "AB->C->D", "AD->A", "UNCURRY (o (o AD->A) AB->C->D)", "UNCURRY AB->C->D", "o (o AD->A) AB->C->D", "o AD->A", "o AD->A (UNCURRY AB->C->D)"
C__UNCURRY__L:"prod", "fun", "bool", "o", "UNCURRY", "C", "=", "AA->B->D->C", "AD", "C", "C (UNCURRY AA->B->D->C) AD", "C (o C AA->B->D->C) AD", "UNCURRY (C (o C AA->B->D->C) AD)", "UNCURRY AA->B->D->C", "o C AA->B->D->C"
S__UNCURRY__R:"prod", "fun", "bool", "o", "_2C", "UNCURRY", "S", "=", "AB#C->D->A", "AB->C->D", "S", "S (o S (o (o AB#C->D->A) _2C)) AB->C->D", "S AB#C->D->A (UNCURRY AB->C->D)", "UNCURRY (S (o S (o (o AB#C->D->A) _2C)) AB->C->D)", "UNCURRY AB->C->D", "_2C", "o (o AB#C->D->A) _2C", "o AB#C->D->A", "o S (o (o AB#C->D->A) _2C)"
FORALL__UNCURRY:"prod", "fun", "bool", "o", "UNCURRY", "=", "$forall", "$forall", "$forall (UNCURRY AA->B->bool)", "$forall (UNCURRY AA->B->bool) <=> $forall (o $forall AA->B->bool)", "$forall (o $forall AA->B->bool)", "AA->B->bool", "UNCURRY AA->B->bool", "o $forall AA->B->bool"
PAIR__FUN__THM:"prod", "fun", "bool", "_3F_21", "_2C", "SND", "FST", "=", "A(C->A#B)->bool (\AC. _2C (FST A(C->A)#(C->B) AC) (SND A(C->A)#(C->B) AC))", "A(C->A#B)->bool AC->A#B", "A(C->A)#(C->B)", "AC", "AC->A#B", "FST A(C->A)#(C->B) AC", "SND A(C->A)#(C->B) AC", "_2C (FST A(C->A)#(C->B) AC) (SND A(C->A)#(C->B) AC)", "_3F_21 (\A(C->A)#(C->B). A(C->A#B)->bool (\AC. _2C (FST A(C->A)#(C->B) AC) (SND A(C->A)#(C->B) AC)))", "_3F_21 (\AC->A#B. A(C->A#B)->bool AC->A#B)", "_3F_21 (\AC->A#B. A(C->A#B)->bool AC->A#B) <=> _3F_21 (\A(C->A)#(C->B). A(C->A#B)->bool (\AC. _2C (FST A(C->A)#(C->B) AC) (SND A(C->A)#(C->B) AC)))"
pair__CASE__def:"prod", "fun", "bool", "pair__CASE", "SND", "FST", "=", "AB#C", "AB->C->A", "AB->C->A (FST AB#C) (SND AB#C)", "FST AB#C", "SND AB#C", "pair__CASE AB#C AB->C->A"
pair__case__thm:"prod", "fun", "bool", "pair__CASE", "_2C", "=", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "_2C AB AC", "pair__CASE (_2C AB AC) AB->C->A"
pair__case__def:"prod", "fun", "bool", "pair__CASE", "_2C", "=", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "_2C AB AC", "pair__CASE (_2C AB AC) AB->C->A"
pair__case__cong:"prod", "fun", "bool", "pair__CASE", "_2C", "=", "AA", "AA#B", "AA->B->C", "AA->B->C AA AB", "AB", "_2C AA AB", "pair__CASE AA#B AA->B->C"
datatype__pair:"prod", "fun", "bool", "_2C", "DATATYPE", "A(B->C->B#C)->A _2C", "DATATYPE (A(B->C->B#C)->A _2C)", "_2C"
LEX__DEF:"prod", "fun", "bool", "UNCURRY", "LEX", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AB", "AB->B->bool", "AB->B->bool AB AB", "LEX AA->A->bool AB->B->bool", "UNCURRY (\AA AB. AA->A->bool AA AA \/ AA = AA /\ AB->B->bool AB AB)", "UNCURRY (\AA AB. UNCURRY (\AA AB. AA->A->bool AA AA \/ AA = AA /\ AB->B->bool AB AB))"
LEX__DEF__THM:"prod", "fun", "bool", "_2C", "LEX", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AB", "AB->B->bool", "AB->B->bool AB AB", "LEX AA->A->bool AB->B->bool (_2C AA AB) (_2C AA AB)", "LEX AA->A->bool AB->B->bool (_2C AA AB) (_2C AA AB) <=> AA->A->bool AA AA \/ AA = AA /\ AB->B->bool AB AB", "_2C AA AB"
WF__LEX:"prod", "fun", "bool", "WF", "LEX", "AA->A->bool", "AB->B->bool", "LEX AA->A->bool AB->B->bool", "WF (LEX AA->A->bool AB->B->bool)", "WF AA->A->bool", "WF AB->B->bool"
RPROD__DEF:"prod", "fun", "bool", "UNCURRY", "RPROD", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AB", "AB->B->bool", "AB->B->bool AB AB", "RPROD AA->A->bool AB->B->bool", "UNCURRY (\AA AB. AA->A->bool AA AA /\ AB->B->bool AB AB)", "UNCURRY (\AA AB. UNCURRY (\AA AB. AA->A->bool AA AA /\ AB->B->bool AB AB))"
WF__RPROD:"prod", "fun", "bool", "WF", "RPROD", "AA->A->bool", "AB->B->bool", "RPROD AA->A->bool AB->B->bool", "WF (RPROD AA->A->bool AB->B->bool)", "WF AA->A->bool", "WF AB->B->bool"
total__LEX:"prod", "fun", "bool", "total", "LEX", "AA->A->bool", "AB->B->bool", "LEX AA->A->bool AB->B->bool", "total (LEX AA->A->bool AB->B->bool)", "total AA->A->bool", "total AB->B->bool"
transitive__LEX:"prod", "fun", "bool", "transitive", "LEX", "AA->A->bool", "AB->B->bool", "LEX AA->A->bool AB->B->bool", "transitive (LEX AA->A->bool AB->B->bool)", "transitive AA->A->bool", "transitive AB->B->bool"
reflexive__LEX:"prod", "fun", "bool", "reflexive", "LEX", "=", "AA->A->bool", "AB->B->bool", "LEX AA->A->bool AB->B->bool", "reflexive (LEX AA->A->bool AB->B->bool)", "reflexive (LEX AA->A->bool AB->B->bool) <=> reflexive AA->A->bool \/ reflexive AB->B->bool", "reflexive AA->A->bool", "reflexive AB->B->bool"
symmetric__LEX:"prod", "fun", "bool", "symmetric", "LEX", "AA->A->bool", "AB->B->bool", "LEX AA->A->bool AB->B->bool", "symmetric (LEX AA->A->bool AB->B->bool)", "symmetric AA->A->bool", "symmetric AB->B->bool"
ADD__0:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B 0 Anum"
ADD__e1:"num", "fun", "bool", "_2B", "SUC", "=", "Anum", "SUC (_2B Anum Anum)", "SUC Anum", "_2B (SUC Anum) Anum", "_2B Anum Anum"
NUMERAL__DEF:"num", "fun", "bool", "NUMERAL", "=", "Anum", "NUMERAL Anum"
ALT__ZERO:"num", "fun", "bool", "ZERO", "=", "0", "0", "ZERO"
BIT10:"num", "fun", "bool", "_2B", "SUC", "BIT1", "=", "0", "0", "Anum", "BIT1 Anum", "SUC 0", "_2B Anum (SUC 0)", "_2B Anum (_2B Anum (SUC 0))"
BIT20:"num", "fun", "bool", "_2B", "SUC", "BIT2", "=", "0", "0", "Anum", "BIT2 Anum", "SUC (SUC 0)", "SUC 0", "_2B Anum (SUC (SUC 0))", "_2B Anum (_2B Anum (SUC (SUC 0)))"
nat__elim____magic0:"num", "fun", "bool", "nat__elim____magic", "=", "Anum", "nat__elim____magic Anum"
SUB__0:"num", "fun", "bool", "_2D", "=", "0", "0", "Anum", "_2D 0 Anum"
SUB__e1:"num", "fun", "bool", "_3C", "_2D", "SUC", "COND", "=", "0", "0", "Anum", "SUC (_2D Anum Anum)", "SUC Anum", "_2D (SUC Anum) Anum", "_2D Anum Anum", "_3C Anum Anum", "if _3C Anum Anum then 0 else SUC (_2D Anum Anum)"
MULT__0:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A 0 Anum"
MULT__e1:"num", "fun", "bool", "_2B", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A (SUC Anum) Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum"
EXP__0:"num", "fun", "bool", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "EXP Anum 0", "NUMERAL (BIT1 ZERO)", "ZERO"
EXP__e1:"num", "fun", "bool", "_2A", "SUC", "EXP", "=", "Anum", "EXP Anum (SUC Anum)", "EXP Anum Anum", "SUC Anum", "_2A Anum (EXP Anum Anum)"
GREATER__DEF:"num", "fun", "bool", "_3E", "_3C", "=", "Anum", "_3C Anum Anum", "_3E Anum Anum", "_3E Anum Anum <=> _3C Anum Anum"
LESS__OR__EQ:"num", "fun", "bool", "_3C_3D", "_3C", "=", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum", "_3C_3D Anum Anum <=> _3C Anum Anum \/ Anum = Anum"
GREATER__OR__EQ:"num", "fun", "bool", "_3E_3D", "_3E", "=", "Anum", "_3E Anum Anum", "_3E_3D Anum Anum", "_3E_3D Anum Anum <=> _3E Anum Anum \/ Anum = Anum"
EVEN__0:"num", "fun", "bool", "T", "EVEN", "=", "0", "0", "EVEN 0", "EVEN 0 <=> T", "T"
EVEN__e1:"num", "fun", "bool", "~", "SUC", "EVEN", "=", "Anum", "EVEN (SUC Anum)", "EVEN (SUC Anum) <=> ~EVEN Anum", "EVEN Anum", "SUC Anum"
ODD__0:"num", "fun", "bool", "ODD", "F", "=", "0", "0", "F", "ODD 0", "ODD 0 <=> F"
ODD__e1:"num", "fun", "bool", "~", "SUC", "ODD", "=", "Anum", "ODD (SUC Anum)", "ODD (SUC Anum) <=> ~ODD Anum", "ODD Anum", "SUC Anum"
num__case__def__0:"num", "fun", "bool", "num__CASE", "=", "0", "0", "AA", "Anum->A", "num__CASE 0 AA Anum->A"
num__case__def__e1:"num", "fun", "bool", "num__CASE", "SUC", "=", "AA", "Anum", "Anum->A", "Anum->A Anum", "SUC Anum", "num__CASE (SUC Anum) AA Anum->A"
FUNPOW__0:"num", "fun", "bool", "FUNPOW", "=", "0", "0", "AA", "AA->A", "FUNPOW AA->A 0 AA"
FUNPOW__e1:"num", "fun", "bool", "SUC", "FUNPOW", "=", "AA", "AA->A", "AA->A AA", "Anum", "FUNPOW AA->A (SUC Anum) AA", "FUNPOW AA->A Anum (AA->A AA)", "SUC Anum"
NRC__0:"num", "fun", "bool", "NRC", "=", "0", "0", "AA", "AA->A->bool", "NRC AA->A->bool 0 AA AA", "NRC AA->A->bool 0 AA AA <=> AA = AA"
NRC__e1:"num", "fun", "bool", "SUC", "NRC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "Anum", "NRC AA->A->bool (SUC Anum) AA AA", "NRC AA->A->bool (SUC Anum) AA AA <=> (?AA. AA->A->bool AA AA /\ NRC AA->A->bool Anum AA AA)", "NRC AA->A->bool Anum AA AA", "SUC Anum"
ONE:"num", "fun", "bool", "ZERO", "SUC", "NUMERAL", "BIT1", "=", "0", "0", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC 0", "ZERO"
TWO:"num", "fun", "bool", "ZERO", "SUC", "NUMERAL", "BIT2", "BIT1", "=", "BIT1 ZERO", "BIT2 ZERO", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "SUC (NUMERAL (BIT1 ZERO))", "ZERO"
NORM__0:"num", "fun", "bool", "ZERO", "NUMERAL", "=", "0", "0", "NUMERAL ZERO", "ZERO"
num__case__compute:"num", "fun", "bool", "num__CASE", "PRE", "COND", "=", "0", "0", "AA", "Anum", "Anum->A", "Anum->A (PRE Anum)", "PRE Anum", "if Anum = 0 then AA else Anum->A (PRE Anum)", "num__CASE Anum AA Anum->A"
SUC__NOT:"num", "fun", "bool", "~", "SUC", "=", "0", "0", "Anum", "SUC Anum"
ADD__00:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B Anum 0"
ADD__SUC:"num", "fun", "bool", "_2B", "SUC", "=", "Anum", "SUC (_2B Anum Anum)", "SUC Anum", "_2B Anum (SUC Anum)", "_2B Anum Anum"
ADD__CLAUSES__0:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B 0 Anum"
ADD__CLAUSES__1:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B Anum 0"
ADD__CLAUSES__2:"num", "fun", "bool", "_2B", "SUC", "=", "Anum", "SUC (_2B Anum Anum)", "SUC Anum", "_2B (SUC Anum) Anum", "_2B Anum Anum"
ADD__CLAUSES__e3:"num", "fun", "bool", "_2B", "SUC", "=", "Anum", "SUC (_2B Anum Anum)", "SUC Anum", "_2B Anum (SUC Anum)", "_2B Anum Anum"
ADD__SYM:"num", "fun", "bool", "_2B", "=", "Anum", "_2B Anum Anum"
ADD__COMM:"num", "fun", "bool", "_2B", "=", "Anum", "_2B Anum Anum"
ADD__ASSOC:"num", "fun", "bool", "_2B", "=", "Anum", "_2B (_2B Anum Anum) Anum", "_2B Anum (_2B Anum Anum)", "_2B Anum Anum"
num__CASES:"num", "fun", "bool", "SUC", "=", "0", "0", "Anum", "SUC Anum"
NOT__ZERO__LT__ZERO:"num", "fun", "bool", "~", "_3C", "=", "0", "0", "Anum", "_3C 0 Anum", "~(Anum = 0) <=> _3C 0 Anum"
NOT__LT__ZERO__EQ__ZERO:"num", "fun", "bool", "~", "_3C", "=", "0", "0", "Anum", "_3C 0 Anum", "~_3C 0 Anum <=> Anum = 0"
LESS__ADD:"num", "fun", "bool", "_3C", "_2B", "=", "Anum", "_2B Anum Anum", "_3C Anum Anum"
LESS__TRANS:"num", "fun", "bool", "_3C", "Anum", "_3C Anum Anum"
transitive__LESS:"num", "fun", "bool", "transitive", "_3C", "_3C", "transitive _3C"
LESS__ANTISYM:"num", "fun", "bool", "~", "_3C", "Anum", "_3C Anum Anum"
LESS__LESS__SUC:"num", "fun", "bool", "~", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C Anum Anum"
transitive__measure:"num", "fun", "bool", "transitive", "measure", "AA->num", "measure AA->num", "transitive (measure AA->num)"
LESS__MONO__REV:"num", "fun", "bool", "_3C", "SUC", "Anum", "SUC Anum", "_3C (SUC Anum) (SUC Anum)", "_3C Anum Anum"
LESS__MONO__EQ:"num", "fun", "bool", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C (SUC Anum) (SUC Anum)", "_3C (SUC Anum) (SUC Anum) <=> _3C Anum Anum", "_3C Anum Anum"
LESS__OR:"num", "fun", "bool", "_3C_3D", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum Anum", "_3C_3D (SUC Anum) Anum"
OR__LESS:"num", "fun", "bool", "_3C_3D", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum Anum", "_3C_3D (SUC Anum) Anum"
LESS__EQ:"num", "fun", "bool", "_3C_3D", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C Anum Anum", "_3C Anum Anum <=> _3C_3D (SUC Anum) Anum", "_3C_3D (SUC Anum) Anum"
LESS__SUC__EQ__COR:"num", "fun", "bool", "~", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C (SUC Anum) Anum", "_3C Anum Anum"
LESS__NOT__SUC:"num", "fun", "bool", "~", "_3C", "SUC", "=", "Anum", "SUC Anum", "_3C (SUC Anum) Anum", "_3C Anum Anum"
LESS__0__CASES:"num", "fun", "bool", "_3C", "=", "0", "0", "Anum", "_3C 0 Anum"
LESS__CASES__IMP:"num", "fun", "bool", "~", "_3C", "=", "Anum", "_3C Anum Anum"
LESS__CASES:"num", "fun", "bool", "_3C_3D", "_3C", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum"
ADD__INV__0:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum"
LESS__EQ__ADD:"num", "fun", "bool", "_3C_3D", "_2B", "Anum", "_2B Anum Anum", "_3C_3D Anum (_2B Anum Anum)"
LESS__EQ__ADD__EXISTS:"num", "fun", "bool", "_3C_3D", "_2B", "=", "Anum", "_2B Anum Anum", "_3C_3D Anum Anum"
LESS__STRONG__ADD:"num", "fun", "bool", "_3C", "_2B", "SUC", "=", "Anum", "SUC Anum", "_2B (SUC Anum) Anum", "_3C Anum Anum"
LESS__EQ__SUC__REFL:"num", "fun", "bool", "_3C_3D", "SUC", "Anum", "SUC Anum", "_3C_3D Anum (SUC Anum)"
LESS__ADD__NONZERO:"num", "fun", "bool", "~", "_3C", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_3C Anum (_2B Anum Anum)"
LESS__EQ__ANTISYM:"num", "fun", "bool", "~", "_3C_3D", "_3C", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum"
NOT__LESS:"num", "fun", "bool", "~", "_3C_3D", "_3C", "=", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum", "~_3C Anum Anum <=> _3C_3D Anum Anum"
SUB__0__0:"num", "fun", "bool", "_2D", "=", "0", "0", "Anum", "_2D 0 Anum"
SUB__0__e1:"num", "fun", "bool", "_2D", "=", "0", "0", "Anum", "_2D Anum 0"
SUB__EQ__0:"num", "fun", "bool", "_3C_3D", "_2D", "=", "0", "0", "Anum", "_2D Anum Anum", "_2D Anum Anum = 0 <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
ADD1:"num", "fun", "bool", "_2B", "ZERO", "SUC", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC Anum", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))"
SUC__SUB1:"num", "fun", "bool", "_2D", "ZERO", "SUC", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC Anum", "ZERO", "_2D (SUC Anum) (NUMERAL (BIT1 ZERO))"
PRE__SUB1:"num", "fun", "bool", "_2D", "ZERO", "PRE", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "PRE Anum", "ZERO", "_2D Anum (NUMERAL (BIT1 ZERO))"
MULT__00:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A Anum 0"
MULT__SUC:"num", "fun", "bool", "_2B", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A Anum (SUC Anum)", "_2A Anum Anum", "_2B Anum (_2A Anum Anum)"
MULT__LEFT__1:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A (NUMERAL (BIT1 ZERO)) Anum"
MULT__RIGHT__1:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum (NUMERAL (BIT1 ZERO))"
MULT__CLAUSES__0:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A 0 Anum"
MULT__CLAUSES__1:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A Anum 0"
MULT__CLAUSES__2:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A (NUMERAL (BIT1 ZERO)) Anum"
MULT__CLAUSES__3:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum (NUMERAL (BIT1 ZERO))"
MULT__CLAUSES__4:"num", "fun", "bool", "_2B", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A (SUC Anum) Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum"
MULT__CLAUSES__e5:"num", "fun", "bool", "_2B", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A Anum (SUC Anum)", "_2A Anum Anum", "_2B Anum (_2A Anum Anum)"
MULT__SYM:"num", "fun", "bool", "_2A", "=", "Anum", "_2A Anum Anum"
MULT__COMM:"num", "fun", "bool", "_2A", "=", "Anum", "_2A Anum Anum"
RIGHT__ADD__DISTRIB:"num", "fun", "bool", "_2B", "_2A", "=", "Anum", "_2A (_2B Anum Anum) Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) (_2A Anum Anum)", "_2B Anum Anum"
LEFT__ADD__DISTRIB:"num", "fun", "bool", "_2B", "_2A", "=", "Anum", "_2A Anum (_2B Anum Anum)", "_2A Anum Anum", "_2B (_2A Anum Anum) (_2A Anum Anum)", "_2B Anum Anum"
MULT__ASSOC:"num", "fun", "bool", "_2A", "=", "Anum", "_2A (_2A Anum Anum) Anum", "_2A Anum (_2A Anum Anum)", "_2A Anum Anum"
SUB__ADD:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "Anum", "_2B (_2D Anum Anum) Anum", "_2D Anum Anum", "_3C_3D Anum Anum"
PRE__SUB:"num", "fun", "bool", "_2D", "PRE", "=", "Anum", "PRE (_2D Anum Anum)", "PRE Anum", "_2D (PRE Anum) Anum", "_2D Anum Anum"
ADD__EQ__0:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_2B Anum Anum = 0 <=> Anum = 0 /\ Anum = 0"
ADD__EQ__1:"num", "fun", "bool", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum Anum", "_2B Anum Anum = NUMERAL (BIT1 ZERO) <=> Anum = NUMERAL (BIT1 ZERO) /\ Anum = 0 \/ Anum = 0 /\ Anum = NUMERAL (BIT1 ZERO)"
ADD__INV__0__EQ:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_2B Anum Anum = Anum <=> Anum = 0"
PRE__SUC__EQ:"num", "fun", "bool", "_3C", "SUC", "PRE", "=", "0", "0", "Anum", "Anum = PRE Anum <=> SUC Anum = Anum", "PRE Anum", "SUC Anum", "_3C 0 Anum"
INV__PRE__EQ:"num", "fun", "bool", "_3C", "PRE", "=", "0", "0", "Anum", "PRE Anum", "PRE Anum = PRE Anum <=> Anum = Anum", "_3C 0 Anum"
LESS__SUC__NOT:"num", "fun", "bool", "~", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C Anum Anum"
ADD__EQ__SUB:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2B Anum Anum = Anum <=> Anum = _2D Anum Anum", "_2D Anum Anum", "_3C_3D Anum Anum"
LESS__MONO__ADD:"num", "fun", "bool", "_3C", "_2B", "Anum", "_2B Anum Anum", "_3C (_2B Anum Anum) (_2B Anum Anum)", "_3C Anum Anum"
LESS__MONO__ADD__INV:"num", "fun", "bool", "_3C", "_2B", "Anum", "_2B Anum Anum", "_3C (_2B Anum Anum) (_2B Anum Anum)", "_3C Anum Anum"
LESS__MONO__ADD__EQ:"num", "fun", "bool", "_3C", "_2B", "=", "Anum", "_2B Anum Anum", "_3C (_2B Anum Anum) (_2B Anum Anum)", "_3C (_2B Anum Anum) (_2B Anum Anum) <=> _3C Anum Anum", "_3C Anum Anum"
LT__ADD__RCANCEL:"num", "fun", "bool", "_3C", "_2B", "=", "Anum", "_2B Anum Anum", "_3C (_2B Anum Anum) (_2B Anum Anum)", "_3C (_2B Anum Anum) (_2B Anum Anum) <=> _3C Anum Anum", "_3C Anum Anum"
LT__ADD__LCANCEL:"num", "fun", "bool", "_3C", "_2B", "=", "Anum", "_2B Anum Anum", "_3C (_2B Anum Anum) (_2B Anum Anum)", "_3C (_2B Anum Anum) (_2B Anum Anum) <=> _3C Anum Anum", "_3C Anum Anum"
EQ__MONO__ADD__EQ:"num", "fun", "bool", "_2B", "=", "Anum", "_2B Anum Anum", "_2B Anum Anum = _2B Anum Anum <=> Anum = Anum"
LESS__EQ__MONO__ADD__EQ:"num", "fun", "bool", "_3C_3D", "_2B", "=", "Anum", "_2B Anum Anum", "_3C_3D (_2B Anum Anum) (_2B Anum Anum)", "_3C_3D (_2B Anum Anum) (_2B Anum Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
LESS__EQ__TRANS:"num", "fun", "bool", "_3C_3D", "Anum", "_3C_3D Anum Anum"
LESS__EQ__LESS__EQ__MONO:"num", "fun", "bool", "_3C_3D", "_2B", "Anum", "_2B Anum Anum", "_3C_3D (_2B Anum Anum) (_2B Anum Anum)", "_3C_3D Anum Anum"
LESS__EQ__REFL:"num", "fun", "bool", "_3C_3D", "Anum", "_3C_3D Anum Anum"
LESS__IMP__LESS__OR__EQ:"num", "fun", "bool", "_3C_3D", "_3C", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum"
LESS__MONO__MULT:"num", "fun", "bool", "_3C_3D", "_2A", "Anum", "_2A Anum Anum", "_3C_3D (_2A Anum Anum) (_2A Anum Anum)", "_3C_3D Anum Anum"
LESS__MONO__MULT2:"num", "fun", "bool", "_3C_3D", "_2A", "Anum", "_2A Anum Anum", "_3C_3D (_2A Anum Anum) (_2A Anum Anum)", "_3C_3D Anum Anum"
RIGHT__SUB__DISTRIB:"num", "fun", "bool", "_2D", "_2A", "=", "Anum", "_2A (_2D Anum Anum) Anum", "_2A Anum Anum", "_2D (_2A Anum Anum) (_2A Anum Anum)", "_2D Anum Anum"
LEFT__SUB__DISTRIB:"num", "fun", "bool", "_2D", "_2A", "=", "Anum", "_2A Anum (_2D Anum Anum)", "_2A Anum Anum", "_2D (_2A Anum Anum) (_2A Anum Anum)", "_2D Anum Anum"
LESS__ADD__1:"num", "fun", "bool", "_3C", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "_2B Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_3C Anum Anum"
EXP__ADD:"num", "fun", "bool", "_2B", "_2A", "EXP", "=", "Anum", "EXP Anum (_2B Anum Anum)", "EXP Anum Anum", "_2A (EXP Anum Anum) (EXP Anum Anum)", "_2B Anum Anum"
NOT__ODD__EQ__EVEN:"num", "fun", "bool", "~", "_2B", "SUC", "=", "Anum", "SUC (_2B Anum Anum)", "_2B Anum Anum"
MULT__SUC__EQ:"num", "fun", "bool", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A Anum (SUC Anum)", "_2A Anum (SUC Anum) = _2A Anum (SUC Anum) <=> Anum = Anum"
MULT__EXP__MONO:"num", "fun", "bool", "_2A", "SUC", "EXP", "=", "Anum", "EXP (SUC Anum) Anum", "SUC Anum", "_2A Anum (EXP (SUC Anum) Anum)", "_2A Anum (EXP (SUC Anum) Anum) = _2A Anum (EXP (SUC Anum) Anum) <=> Anum = Anum"
LESS__EQUAL__ANTISYM:"num", "fun", "bool", "_3C_3D", "=", "Anum", "_3C_3D Anum Anum"
LESS__ADD__SUC:"num", "fun", "bool", "_3C", "_2B", "SUC", "Anum", "SUC Anum", "_2B Anum (SUC Anum)", "_3C Anum (_2B Anum (SUC Anum))"
ZERO__LESS__EQ:"num", "fun", "bool", "_3C_3D", "0", "0", "Anum", "_3C_3D 0 Anum"
LESS__EQ__MONO:"num", "fun", "bool", "_3C_3D", "SUC", "=", "Anum", "SUC Anum", "_3C_3D (SUC Anum) (SUC Anum)", "_3C_3D (SUC Anum) (SUC Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
LESS__OR__EQ__ADD:"num", "fun", "bool", "_3C", "_2B", "=", "Anum", "_2B Anum Anum", "_3C Anum Anum"
WOP:"num", "fun", "bool", "~", "_3C", "Anum", "Anum->bool Anum", "_3C Anum Anum"
COMPLETE__INDUCTION:"num", "fun", "bool", "_3C", "Anum", "Anum->bool Anum", "_3C Anum Anum"
FORALL__NUM__THM:"num", "fun", "bool", "SUC", "=", "0", "(!Anum. Anum->bool Anum) <=> Anum->bool 0 /\ (!Anum. Anum->bool Anum ==> Anum->bool (SUC Anum))", "0", "Anum", "Anum->bool (SUC Anum)", "Anum->bool 0", "Anum->bool Anum", "SUC Anum"
SUB__MONO__EQ:"num", "fun", "bool", "_2D", "SUC", "=", "Anum", "SUC Anum", "_2D (SUC Anum) (SUC Anum)", "_2D Anum Anum"
SUB__PLUS:"num", "fun", "bool", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D (_2D Anum Anum) Anum", "_2D Anum (_2B Anum Anum)", "_2D Anum Anum"
INV__PRE__LESS:"num", "fun", "bool", "_3C", "PRE", "=", "0", "0", "Anum", "PRE Anum", "_3C (PRE Anum) (PRE Anum)", "_3C (PRE Anum) (PRE Anum) <=> _3C Anum Anum", "_3C 0 Anum", "_3C Anum Anum"
INV__PRE__LESS__EQ:"num", "fun", "bool", "_3C_3D", "_3C", "PRE", "=", "0", "0", "Anum", "PRE Anum", "_3C 0 Anum", "_3C_3D (PRE Anum) (PRE Anum)", "_3C_3D (PRE Anum) (PRE Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
SUB__LESS__EQ:"num", "fun", "bool", "_3C_3D", "_2D", "Anum", "_2D Anum Anum", "_3C_3D (_2D Anum Anum) Anum"
SUB__EQ__EQ__0:"num", "fun", "bool", "_2D", "=", "0", "0", "Anum", "_2D Anum Anum", "_2D Anum Anum = Anum <=> Anum = 0 \/ Anum = 0"
SUB__LESS__0:"num", "fun", "bool", "_3C", "_2D", "=", "0", "0", "Anum", "_2D Anum Anum", "_3C 0 (_2D Anum Anum)", "_3C Anum Anum", "_3C Anum Anum <=> _3C 0 (_2D Anum Anum)"
SUB__LESS__OR:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "ZERO", "NUMERAL", "BIT1", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D Anum (NUMERAL (BIT1 ZERO))", "_3C Anum Anum", "_3C_3D Anum (_2D Anum (NUMERAL (BIT1 ZERO)))"
LESS__SUB__ADD__LESS:"num", "fun", "bool", "_3C", "_2D", "_2B", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C (_2B Anum Anum) Anum", "_3C Anum (_2D Anum Anum)"
TIMES2:"num", "fun", "bool", "_2B", "_2A", "ZERO", "NUMERAL", "BIT2", "=", "Anum", "BIT2 ZERO", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum", "_2B Anum Anum"
LESS__MULT__MONO:"num", "fun", "bool", "_3C", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A (SUC Anum) Anum", "_3C (_2A (SUC Anum) Anum) (_2A (SUC Anum) Anum)", "_3C (_2A (SUC Anum) Anum) (_2A (SUC Anum) Anum) <=> _3C Anum Anum", "_3C Anum Anum"
MULT__MONO__EQ:"num", "fun", "bool", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A (SUC Anum) Anum", "_2A (SUC Anum) Anum = _2A (SUC Anum) Anum <=> Anum = Anum"
EQ__ADD__LCANCEL:"num", "fun", "bool", "_2B", "=", "Anum", "_2B Anum Anum", "_2B Anum Anum = _2B Anum Anum <=> Anum = Anum"
EQ__ADD__RCANCEL:"num", "fun", "bool", "_2B", "=", "Anum", "_2B Anum Anum", "_2B Anum Anum = _2B Anum Anum <=> Anum = Anum"
EQ__MULT__LCANCEL:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_2A Anum Anum = _2A Anum Anum <=> Anum = 0 \/ Anum = Anum"
ADD__SUB:"num", "fun", "bool", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D (_2B Anum Anum) Anum"
LESS__EQ__ADD__SUB:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "Anum", "_2B Anum (_2D Anum Anum)", "_2B Anum Anum", "_2D (_2B Anum Anum) Anum", "_2D Anum Anum", "_3C_3D Anum Anum"
SUB__EQUAL__0:"num", "fun", "bool", "_2D", "=", "0", "0", "Anum", "_2D Anum Anum"
LESS__EQ__SUB__LESS:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C (_2D Anum Anum) Anum", "_3C (_2D Anum Anum) Anum <=> _3C Anum (_2B Anum Anum)", "_3C Anum (_2B Anum Anum)", "_3C_3D Anum Anum"
NOT__SUC__LESS__EQ:"num", "fun", "bool", "~", "_3C_3D", "SUC", "=", "Anum", "SUC Anum", "_3C_3D (SUC Anum) Anum", "_3C_3D Anum Anum", "~_3C_3D (SUC Anum) Anum <=> _3C_3D Anum Anum"
SUB__SUB:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D (_2B Anum Anum) Anum", "_2D Anum (_2D Anum Anum)", "_2D Anum Anum", "_3C_3D Anum Anum"
LESS__IMP__LESS__ADD:"num", "fun", "bool", "_3C", "_2B", "Anum", "_2B Anum Anum", "_3C Anum (_2B Anum Anum)", "_3C Anum Anum"
LESS__EQ__IMP__LESS__SUC:"num", "fun", "bool", "_3C_3D", "_3C", "SUC", "Anum", "SUC Anum", "_3C Anum (SUC Anum)", "_3C_3D Anum Anum"
SUB__LESS__EQ__ADD:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C_3D (_2D Anum Anum) Anum", "_3C_3D (_2D Anum Anum) Anum <=> _3C_3D Anum (_2B Anum Anum)", "_3C_3D Anum (_2B Anum Anum)", "_3C_3D Anum Anum"
SUB__CANCEL:"num", "fun", "bool", "_3C_3D", "_2D", "=", "Anum", "_2D Anum Anum", "_2D Anum Anum = _2D Anum Anum <=> Anum = Anum", "_3C_3D Anum Anum"
CANCEL__SUB:"num", "fun", "bool", "_3C_3D", "_2D", "=", "Anum", "_2D Anum Anum", "_2D Anum Anum = _2D Anum Anum <=> Anum = Anum", "_3C_3D Anum Anum"
NOT__EXP__0:"num", "fun", "bool", "~", "SUC", "EXP", "=", "0", "0", "Anum", "EXP (SUC Anum) Anum", "SUC Anum"
ZERO__LESS__EXP:"num", "fun", "bool", "_3C", "SUC", "EXP", "0", "0", "Anum", "EXP (SUC Anum) Anum", "SUC Anum", "_3C 0 (EXP (SUC Anum) Anum)"
ODD__OR__EVEN:"num", "fun", "bool", "_2B", "_2A", "ZERO", "SUC", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC (SUC 0)", "SUC 0", "ZERO", "_2A (SUC (SUC 0)) Anum", "_2B (_2A (SUC (SUC 0)) Anum) (NUMERAL (BIT1 ZERO))"
LESS__EXP__SUC__MONO:"num", "fun", "bool", "_3C", "SUC", "EXP", "Anum", "EXP (SUC (SUC Anum)) (SUC Anum)", "EXP (SUC (SUC Anum)) Anum", "SUC (SUC Anum)", "SUC Anum", "_3C (EXP (SUC (SUC Anum)) Anum) (EXP (SUC (SUC Anum)) (SUC Anum))"
LESS__LESS__CASES:"num", "fun", "bool", "_3C", "=", "Anum", "_3C Anum Anum"
GREATER__EQ:"num", "fun", "bool", "_3E_3D", "_3C_3D", "=", "Anum", "_3C_3D Anum Anum", "_3E_3D Anum Anum", "_3E_3D Anum Anum <=> _3C_3D Anum Anum"
LESS__EQ__CASES:"num", "fun", "bool", "_3C_3D", "Anum", "_3C_3D Anum Anum"
LESS__EQUAL__ADD:"num", "fun", "bool", "_3C_3D", "_2B", "=", "Anum", "_2B Anum Anum", "_3C_3D Anum Anum"
LESS__EQ__EXISTS:"num", "fun", "bool", "_3C_3D", "_2B", "=", "Anum", "_2B Anum Anum", "_3C_3D Anum Anum", "_3C_3D Anum Anum <=> (?Anum. Anum = _2B Anum Anum)"
NOT__LESS__EQUAL:"num", "fun", "bool", "~", "_3C_3D", "_3C", "=", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum", "~_3C_3D Anum Anum <=> _3C Anum Anum"
LESS__EQ__0:"num", "fun", "bool", "_3C_3D", "=", "0", "0", "Anum", "_3C_3D Anum 0", "_3C_3D Anum 0 <=> Anum = 0"
MULT__EQ__0:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_2A Anum Anum = 0 <=> Anum = 0 \/ Anum = 0"
MULT__EQ__1:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_2A Anum Anum = NUMERAL (BIT1 ZERO) <=> Anum = NUMERAL (BIT1 ZERO) /\ Anum = NUMERAL (BIT1 ZERO)"
MULT__EQ__ID:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_2A Anum Anum = Anum <=> Anum = NUMERAL (BIT1 ZERO) \/ Anum = 0"
LESS__MULT2:"num", "fun", "bool", "_3C", "_2A", "0", "0", "Anum", "_2A Anum Anum", "_3C 0 (_2A Anum Anum)", "_3C 0 Anum"
ZERO__LESS__MULT:"num", "fun", "bool", "_3C", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C 0 (_2A Anum Anum)", "_3C 0 (_2A Anum Anum) <=> _3C 0 Anum /\ _3C 0 Anum", "_3C 0 Anum"
ZERO__LESS__ADD:"num", "fun", "bool", "_3C", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_3C 0 (_2B Anum Anum)", "_3C 0 (_2B Anum Anum) <=> _3C 0 Anum \/ _3C 0 Anum", "_3C 0 Anum"
LESS__EQ__LESS__TRANS:"num", "fun", "bool", "_3C_3D", "_3C", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum"
LESS__LESS__EQ__TRANS:"num", "fun", "bool", "_3C_3D", "_3C", "Anum", "_3C Anum Anum", "_3C_3D Anum Anum"
FACT__0:"num", "fun", "bool", "ZERO", "NUMERAL", "FACT", "BIT1", "=", "0", "0", "BIT1 ZERO", "FACT 0", "NUMERAL (BIT1 ZERO)", "ZERO"
FACT__e1:"num", "fun", "bool", "_2A", "SUC", "FACT", "=", "Anum", "FACT (SUC Anum)", "FACT Anum", "SUC Anum", "_2A (SUC Anum) (FACT Anum)"
FACT__LESS:"num", "fun", "bool", "_3C", "FACT", "0", "0", "Anum", "FACT Anum", "_3C 0 (FACT Anum)"
EVEN__ODD:"num", "fun", "bool", "~", "ODD", "EVEN", "=", "Anum", "EVEN Anum", "EVEN Anum <=> ~ODD Anum", "ODD Anum"
ODD__EVEN:"num", "fun", "bool", "~", "ODD", "EVEN", "=", "Anum", "EVEN Anum", "ODD Anum", "ODD Anum <=> ~EVEN Anum"
EVEN__OR__ODD:"num", "fun", "bool", "ODD", "EVEN", "Anum", "EVEN Anum", "ODD Anum"
EVEN__AND__ODD:"num", "fun", "bool", "~", "ODD", "EVEN", "Anum", "EVEN Anum", "ODD Anum"
EVEN__ADD:"num", "fun", "bool", "_2B", "EVEN", "=", "Anum", "EVEN (_2B Anum Anum)", "EVEN (_2B Anum Anum) <=> EVEN Anum <=> EVEN Anum", "EVEN Anum", "EVEN Anum <=> EVEN Anum", "_2B Anum Anum"
EVEN__MULT:"num", "fun", "bool", "_2A", "EVEN", "=", "Anum", "EVEN (_2A Anum Anum)", "EVEN (_2A Anum Anum) <=> EVEN Anum \/ EVEN Anum", "EVEN Anum", "_2A Anum Anum"
ODD__ADD:"num", "fun", "bool", "~", "_2B", "ODD", "=", "Anum", "ODD (_2B Anum Anum)", "ODD (_2B Anum Anum) <=> ~(ODD Anum <=> ODD Anum)", "ODD Anum", "ODD Anum <=> ODD Anum", "_2B Anum Anum"
ODD__MULT:"num", "fun", "bool", "_2A", "ODD", "=", "Anum", "ODD (_2A Anum Anum)", "ODD (_2A Anum Anum) <=> ODD Anum /\ ODD Anum", "ODD Anum", "_2A Anum Anum"
EVEN__DOUBLE:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "EVEN", "BIT2", "Anum", "BIT2 ZERO", "EVEN (_2A (NUMERAL (BIT2 ZERO)) Anum)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum"
ODD__DOUBLE:"num", "fun", "bool", "_2A", "ZERO", "SUC", "ODD", "NUMERAL", "BIT2", "Anum", "BIT2 ZERO", "NUMERAL (BIT2 ZERO)", "ODD (SUC (_2A (NUMERAL (BIT2 ZERO)) Anum))", "SUC (_2A (NUMERAL (BIT2 ZERO)) Anum)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum"
EVEN__ODD__EXISTS__0:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "EVEN", "BIT2", "=", "Anum", "BIT2 ZERO", "EVEN Anum", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum"
EVEN__ODD__EXISTS__e1:"num", "fun", "bool", "_2A", "ZERO", "SUC", "ODD", "NUMERAL", "BIT2", "=", "Anum", "BIT2 ZERO", "NUMERAL (BIT2 ZERO)", "ODD Anum", "SUC (_2A (NUMERAL (BIT2 ZERO)) Anum)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum"
EVEN__EXISTS:"num", "fun", "bool", "_2A", "ZERO", "NUMERAL", "EVEN", "BIT2", "=", "Anum", "BIT2 ZERO", "EVEN Anum", "EVEN Anum <=> (?Anum. Anum = _2A (NUMERAL (BIT2 ZERO)) Anum)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum"
ODD__EXISTS:"num", "fun", "bool", "_2A", "ZERO", "SUC", "ODD", "NUMERAL", "BIT2", "=", "Anum", "BIT2 ZERO", "NUMERAL (BIT2 ZERO)", "ODD Anum", "ODD Anum <=> (?Anum. Anum = SUC (_2A (NUMERAL (BIT2 ZERO)) Anum))", "SUC (_2A (NUMERAL (BIT2 ZERO)) Anum)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum"
EVEN__EXP:"num", "fun", "bool", "_3C", "EXP", "EVEN", "0", "0", "Anum", "EVEN (EXP Anum Anum)", "EVEN Anum", "EXP Anum Anum", "_3C 0 Anum"
EQ__LESS__EQ:"num", "fun", "bool", "_3C_3D", "=", "Anum", "Anum = Anum <=> _3C_3D Anum Anum /\ _3C_3D Anum Anum", "_3C_3D Anum Anum"
ADD__MONO__LESS__EQ:"num", "fun", "bool", "_3C_3D", "_2B", "=", "Anum", "_2B Anum Anum", "_3C_3D (_2B Anum Anum) (_2B Anum Anum)", "_3C_3D (_2B Anum Anum) (_2B Anum Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
LE__ADD__LCANCEL:"num", "fun", "bool", "_3C_3D", "_2B", "=", "Anum", "_2B Anum Anum", "_3C_3D (_2B Anum Anum) (_2B Anum Anum)", "_3C_3D (_2B Anum Anum) (_2B Anum Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
LE__ADD__RCANCEL:"num", "fun", "bool", "_3C_3D", "_2B", "=", "Anum", "_2B Anum Anum", "_3C_3D (_2B Anum Anum) (_2B Anum Anum)", "_3C_3D (_2B Anum Anum) (_2B Anum Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
NOT__SUC__LESS__EQ__0:"num", "fun", "bool", "~", "_3C_3D", "SUC", "0", "0", "Anum", "SUC Anum", "_3C_3D (SUC Anum) 0"
NOT__LEQ:"num", "fun", "bool", "~", "_3C_3D", "SUC", "=", "Anum", "SUC Anum", "_3C_3D (SUC Anum) Anum", "_3C_3D Anum Anum", "~_3C_3D Anum Anum <=> _3C_3D (SUC Anum) Anum"
NOT__NUM__EQ:"num", "fun", "bool", "~", "_3C_3D", "SUC", "=", "Anum", "SUC Anum", "_3C_3D (SUC Anum) Anum", "~(Anum = Anum) <=> _3C_3D (SUC Anum) Anum \/ _3C_3D (SUC Anum) Anum"
NOT__GREATER:"num", "fun", "bool", "~", "_3E", "_3C_3D", "=", "Anum", "_3C_3D Anum Anum", "_3E Anum Anum", "~_3E Anum Anum <=> _3C_3D Anum Anum"
NOT__GREATER__EQ:"num", "fun", "bool", "~", "_3E_3D", "_3C_3D", "SUC", "=", "Anum", "SUC Anum", "_3C_3D (SUC Anum) Anum", "_3E_3D Anum Anum", "~_3E_3D Anum Anum <=> _3C_3D (SUC Anum) Anum"
SUC__ONE__ADD:"num", "fun", "bool", "_2B", "ZERO", "SUC", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC Anum", "ZERO", "_2B (NUMERAL (BIT1 ZERO)) Anum"
SUC__ADD__SYM:"num", "fun", "bool", "_2B", "SUC", "=", "Anum", "SUC (_2B Anum Anum)", "SUC Anum", "_2B (SUC Anum) Anum", "_2B Anum Anum"
NOT__SUC__ADD__LESS__EQ:"num", "fun", "bool", "~", "_3C_3D", "_2B", "SUC", "Anum", "SUC (_2B Anum Anum)", "_2B Anum Anum", "_3C_3D (SUC (_2B Anum Anum)) Anum"
MULT__LESS__EQ__SUC:"num", "fun", "bool", "_3C_3D", "_2A", "SUC", "=", "Anum", "SUC Anum", "_2A (SUC Anum) Anum", "_3C_3D (_2A (SUC Anum) Anum) (_2A (SUC Anum) Anum)", "_3C_3D Anum Anum", "_3C_3D Anum Anum <=> _3C_3D (_2A (SUC Anum) Anum) (_2A (SUC Anum) Anum)"
LE__MULT__LCANCEL:"num", "fun", "bool", "_3C_3D", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C_3D (_2A Anum Anum) (_2A Anum Anum)", "_3C_3D (_2A Anum Anum) (_2A Anum Anum) <=> Anum = 0 \/ _3C_3D Anum Anum", "_3C_3D Anum Anum"
LE__MULT__RCANCEL:"num", "fun", "bool", "_3C_3D", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C_3D (_2A Anum Anum) (_2A Anum Anum)", "_3C_3D (_2A Anum Anum) (_2A Anum Anum) <=> Anum = 0 \/ _3C_3D Anum Anum", "_3C_3D Anum Anum"
LT__MULT__LCANCEL:"num", "fun", "bool", "_3C", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C (_2A Anum Anum) (_2A Anum Anum)", "_3C (_2A Anum Anum) (_2A Anum Anum) <=> _3C 0 Anum /\ _3C Anum Anum", "_3C 0 Anum", "_3C Anum Anum"
LT__MULT__RCANCEL:"num", "fun", "bool", "_3C", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C (_2A Anum Anum) (_2A Anum Anum)", "_3C (_2A Anum Anum) (_2A Anum Anum) <=> _3C 0 Anum /\ _3C Anum Anum", "_3C 0 Anum", "_3C Anum Anum"
LT__MULT__CANCEL__LBARE__0:"num", "fun", "bool", "_3C", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum", "_3C Anum (_2A Anum Anum)", "_3C Anum (_2A Anum Anum) <=> _3C 0 Anum /\ _3C (NUMERAL (BIT1 ZERO)) Anum"
LT__MULT__CANCEL__LBARE__e1:"num", "fun", "bool", "_3C", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum", "_3C Anum (_2A Anum Anum)", "_3C Anum (_2A Anum Anum) <=> _3C 0 Anum /\ _3C (NUMERAL (BIT1 ZERO)) Anum"
LT__MULT__CANCEL__RBARE__0:"num", "fun", "bool", "_3C", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C (_2A Anum Anum) Anum", "_3C (_2A Anum Anum) Anum <=> _3C 0 Anum /\ Anum = 0", "_3C 0 Anum"
LT__MULT__CANCEL__RBARE__e1:"num", "fun", "bool", "_3C", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C (_2A Anum Anum) Anum", "_3C (_2A Anum Anum) Anum <=> _3C 0 Anum /\ Anum = 0", "_3C 0 Anum"
LE__MULT__CANCEL__LBARE__0:"num", "fun", "bool", "_3C_3D", "_3C", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C 0 Anum", "_3C_3D Anum (_2A Anum Anum)", "_3C_3D Anum (_2A Anum Anum) <=> Anum = 0 \/ _3C 0 Anum"
LE__MULT__CANCEL__LBARE__e1:"num", "fun", "bool", "_3C_3D", "_3C", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_3C 0 Anum", "_3C_3D Anum (_2A Anum Anum)", "_3C_3D Anum (_2A Anum Anum) <=> Anum = 0 \/ _3C 0 Anum"
LE__MULT__CANCEL__RBARE__0:"num", "fun", "bool", "_3C_3D", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_3C_3D (_2A Anum Anum) Anum", "_3C_3D (_2A Anum Anum) Anum <=> Anum = 0 \/ _3C_3D Anum (NUMERAL (BIT1 ZERO))", "_3C_3D Anum (NUMERAL (BIT1 ZERO))"
LE__MULT__CANCEL__RBARE__e1:"num", "fun", "bool", "_3C_3D", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_3C_3D (_2A Anum Anum) Anum", "_3C_3D (_2A Anum Anum) Anum <=> Anum = 0 \/ _3C_3D Anum (NUMERAL (BIT1 ZERO))", "_3C_3D Anum (NUMERAL (BIT1 ZERO))"
SUB__LEFT__ADD:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "COND", "=", "Anum", "_2B Anum (_2D Anum Anum)", "_2B Anum Anum", "_2D (_2B Anum Anum) Anum", "_2D Anum Anum", "_3C_3D Anum Anum", "if _3C_3D Anum Anum then Anum else _2D (_2B Anum Anum) Anum"
SUB__RIGHT__ADD:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "COND", "=", "Anum", "_2B (_2D Anum Anum) Anum", "_2B Anum Anum", "_2D (_2B Anum Anum) Anum", "_2D Anum Anum", "_3C_3D Anum Anum", "if _3C_3D Anum Anum then Anum else _2D (_2B Anum Anum) Anum"
SUB__LEFT__SUB:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "COND", "=", "Anum", "_2B Anum Anum", "_2D (_2B Anum Anum) Anum", "_2D Anum (_2D Anum Anum)", "_2D Anum Anum", "_3C_3D Anum Anum", "if _3C_3D Anum Anum then Anum else _2D (_2B Anum Anum) Anum"
SUB__RIGHT__SUB:"num", "fun", "bool", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D (_2D Anum Anum) Anum", "_2D Anum (_2B Anum Anum)", "_2D Anum Anum"
SUB__LEFT__SUC:"num", "fun", "bool", "_3C_3D", "_2D", "SUC", "COND", "=", "0", "0", "Anum", "SUC (_2D Anum Anum)", "SUC 0", "SUC Anum", "_2D (SUC Anum) Anum", "_2D Anum Anum", "_3C_3D Anum Anum", "if _3C_3D Anum Anum then SUC 0 else _2D (SUC Anum) Anum"
SUB__LEFT__LESS__EQ:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C_3D (_2B Anum Anum) Anum", "_3C_3D Anum (_2D Anum Anum)", "_3C_3D Anum (_2D Anum Anum) <=> _3C_3D (_2B Anum Anum) Anum \/ _3C_3D Anum 0", "_3C_3D Anum 0"
SUB__RIGHT__LESS__EQ:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C_3D (_2D Anum Anum) Anum", "_3C_3D (_2D Anum Anum) Anum <=> _3C_3D Anum (_2B Anum Anum)", "_3C_3D Anum (_2B Anum Anum)"
SUB__LEFT__LESS:"num", "fun", "bool", "_3C", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C (_2B Anum Anum) Anum", "_3C Anum (_2D Anum Anum)", "_3C Anum (_2D Anum Anum) <=> _3C (_2B Anum Anum) Anum"
SUB__RIGHT__LESS:"num", "fun", "bool", "_3C", "_2D", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C (_2D Anum Anum) Anum", "_3C (_2D Anum Anum) Anum <=> _3C Anum (_2B Anum Anum) /\ _3C 0 Anum", "_3C 0 Anum", "_3C Anum (_2B Anum Anum)"
SUB__LEFT__GREATER__EQ:"num", "fun", "bool", "_3E_3D", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3E_3D (_2B Anum Anum) Anum", "_3E_3D Anum (_2D Anum Anum)", "_3E_3D Anum (_2D Anum Anum) <=> _3E_3D (_2B Anum Anum) Anum"
SUB__RIGHT__GREATER__EQ:"num", "fun", "bool", "_3E_3D", "_2D", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3E_3D (_2D Anum Anum) Anum", "_3E_3D (_2D Anum Anum) Anum <=> _3E_3D Anum (_2B Anum Anum) \/ _3E_3D 0 Anum", "_3E_3D 0 Anum", "_3E_3D Anum (_2B Anum Anum)"
SUB__LEFT__GREATER:"num", "fun", "bool", "_3E", "_2D", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3E (_2B Anum Anum) Anum", "_3E Anum (_2D Anum Anum)", "_3E Anum (_2D Anum Anum) <=> _3E (_2B Anum Anum) Anum /\ _3E Anum 0", "_3E Anum 0"
SUB__RIGHT__GREATER:"num", "fun", "bool", "_3E", "_2D", "_2B", "=", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_3E (_2D Anum Anum) Anum", "_3E (_2D Anum Anum) Anum <=> _3E Anum (_2B Anum Anum)", "_3E Anum (_2B Anum Anum)"
SUB__LEFT__EQ:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "0", "0", "Anum", "Anum = _2D Anum Anum <=> _2B Anum Anum = Anum \/ _3C_3D Anum 0 /\ _3C_3D Anum Anum", "_2B Anum Anum", "_2D Anum Anum", "_3C_3D Anum 0", "_3C_3D Anum Anum"
SUB__RIGHT__EQ:"num", "fun", "bool", "_3C_3D", "_2D", "_2B", "=", "0", "0", "Anum", "_2B Anum Anum", "_2D Anum Anum", "_2D Anum Anum = Anum <=> Anum = _2B Anum Anum \/ _3C_3D Anum Anum /\ _3C_3D Anum 0", "_3C_3D Anum 0", "_3C_3D Anum Anum"
LE__0:"num", "fun", "bool", "_3C_3D", "=", "0", "0", "Anum", "_3C_3D Anum 0", "_3C_3D Anum 0 <=> Anum = 0"
LE__e1:"num", "fun", "bool", "_3C_3D", "SUC", "=", "Anum", "SUC Anum", "_3C_3D Anum (SUC Anum)", "_3C_3D Anum (SUC Anum) <=> Anum = SUC Anum \/ _3C_3D Anum Anum", "_3C_3D Anum Anum"
DA:"num", "fun", "bool", "_3C", "_2B", "_2A", "=", "0", "0", "Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C 0 Anum", "_3C Anum Anum"
DIVISION:"num", "fun", "bool", "_3C", "_2B", "_2A", "MOD", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "MOD Anum Anum", "_2A (DIV Anum Anum) Anum", "_2B (_2A (DIV Anum Anum) Anum) (MOD Anum Anum)", "_3C (MOD Anum Anum) Anum", "_3C 0 Anum"
DIV2__def:"num", "fun", "bool", "ZERO", "NUMERAL", "DIV2", "DIV", "BIT2", "=", "Anum", "BIT2 ZERO", "DIV Anum (NUMERAL (BIT2 ZERO))", "DIV2 Anum", "NUMERAL (BIT2 ZERO)", "ZERO"
MOD__ONE:"num", "fun", "bool", "SUC", "MOD", "=", "0", "0", "Anum", "MOD Anum (SUC 0)", "SUC 0"
MOD__1:"num", "fun", "bool", "ZERO", "NUMERAL", "MOD", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "MOD Anum (NUMERAL (BIT1 ZERO))", "NUMERAL (BIT1 ZERO)", "ZERO"
DIV__LESS__EQ:"num", "fun", "bool", "_3C_3D", "_3C", "DIV", "0", "0", "Anum", "DIV Anum Anum", "_3C 0 Anum", "_3C_3D (DIV Anum Anum) Anum"
DIV__UNIQUE:"num", "fun", "bool", "_3C", "_2B", "_2A", "DIV", "=", "Anum", "DIV Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C Anum Anum"
MOD__UNIQUE:"num", "fun", "bool", "_3C", "_2B", "_2A", "MOD", "=", "Anum", "MOD Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C Anum Anum"
DIV__MULT:"num", "fun", "bool", "_3C", "_2B", "_2A", "DIV", "=", "Anum", "DIV (_2B (_2A Anum Anum) Anum) Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C Anum Anum"
LESS__MOD:"num", "fun", "bool", "_3C", "MOD", "=", "Anum", "MOD Anum Anum", "_3C Anum Anum"
MOD__EQ__0:"num", "fun", "bool", "_3C", "_2A", "MOD", "=", "0", "0", "Anum", "MOD (_2A Anum Anum) Anum", "_2A Anum Anum", "_3C 0 Anum"
ZERO__MOD:"num", "fun", "bool", "_3C", "MOD", "=", "0", "0", "Anum", "MOD 0 Anum", "_3C 0 Anum"
ZERO__DIV:"num", "fun", "bool", "_3C", "DIV", "=", "0", "0", "Anum", "DIV 0 Anum", "_3C 0 Anum"
MOD__MULT:"num", "fun", "bool", "_3C", "_2B", "_2A", "MOD", "=", "Anum", "MOD (_2B (_2A Anum Anum) Anum) Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C Anum Anum"
MOD__TIMES:"num", "fun", "bool", "_3C", "_2B", "_2A", "MOD", "=", "0", "0", "Anum", "MOD (_2B (_2A Anum Anum) Anum) Anum", "MOD Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C 0 Anum"
MOD__TIMES__SUB:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "_2A", "MOD", "=", "0", "0", "Anum", "MOD (_2D (_2A Anum Anum) Anum) Anum", "MOD (_2D Anum Anum) Anum", "_2A Anum Anum", "_2D (_2A Anum Anum) Anum", "_2D Anum Anum", "_3C 0 Anum", "_3C_3D Anum Anum"
MOD__PLUS:"num", "fun", "bool", "_3C", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B (MOD Anum Anum) (MOD Anum Anum)) Anum", "MOD (_2B Anum Anum) Anum", "MOD Anum Anum", "_2B (MOD Anum Anum) (MOD Anum Anum)", "_2B Anum Anum", "_3C 0 Anum"
MOD__MOD:"num", "fun", "bool", "_3C", "MOD", "=", "0", "0", "Anum", "MOD (MOD Anum Anum) Anum", "MOD Anum Anum", "_3C 0 Anum"
LESS__DIV__EQ__ZERO:"num", "fun", "bool", "_3C", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "_3C Anum Anum"
MULT__DIV:"num", "fun", "bool", "_3C", "_2A", "DIV", "=", "0", "0", "Anum", "DIV (_2A Anum Anum) Anum", "_2A Anum Anum", "_3C 0 Anum"
ADD__DIV__ADD__DIV:"num", "fun", "bool", "_3C", "_2B", "_2A", "DIV", "=", "0", "0", "Anum", "DIV (_2B (_2A Anum Anum) Anum) Anum", "DIV Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_2B Anum (DIV Anum Anum)", "_3C 0 Anum"
ADD__DIV__RWT:"num", "fun", "bool", "_3C", "_2B", "MOD", "DIV", "=", "0", "0", "Anum", "DIV (_2B Anum Anum) Anum", "DIV Anum Anum", "MOD Anum Anum", "_2B (DIV Anum Anum) (DIV Anum Anum)", "_2B Anum Anum", "_3C 0 Anum"
MOD__MULT__MOD:"num", "fun", "bool", "_3C", "_2A", "MOD", "=", "0", "0", "Anum", "MOD (MOD Anum (_2A Anum Anum)) Anum", "MOD Anum (_2A Anum Anum)", "MOD Anum Anum", "_2A Anum Anum", "_3C 0 Anum"
DIV__ONE:"num", "fun", "bool", "SUC", "DIV", "=", "0", "0", "Anum", "DIV Anum (SUC 0)", "SUC 0"
DIV__1:"num", "fun", "bool", "ZERO", "NUMERAL", "DIV", "BIT1", "=", "Anum", "BIT1 ZERO", "DIV Anum (NUMERAL (BIT1 ZERO))", "NUMERAL (BIT1 ZERO)", "ZERO"
DIVMOD__ID:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "MOD", "DIV", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "DIV Anum Anum", "MOD Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C 0 Anum"
DIV__DIV__DIV__MULT:"num", "fun", "bool", "_3C", "_2A", "DIV", "=", "0", "0", "Anum", "DIV (DIV Anum Anum) Anum", "DIV Anum (_2A Anum Anum)", "DIV Anum Anum", "_2A Anum Anum", "_3C 0 Anum"
SUC__PRE:"num", "fun", "bool", "_3C", "SUC", "PRE", "=", "0", "0", "Anum", "PRE Anum", "SUC (PRE Anum)", "_3C 0 Anum", "_3C 0 Anum <=> SUC (PRE Anum) = Anum"
DIV__LESS:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "DIV", "BIT1", "0", "0", "Anum", "BIT1 ZERO", "DIV Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (DIV Anum Anum) Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum"
MOD__LESS:"num", "fun", "bool", "_3C", "MOD", "0", "0", "Anum", "MOD Anum Anum", "_3C (MOD Anum Anum) Anum", "_3C 0 Anum"
ADD__MODULUS__0:"num", "fun", "bool", "_3C", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B Anum Anum) Anum", "MOD Anum Anum", "_2B Anum Anum", "_3C 0 Anum"
ADD__MODULUS__e1:"num", "fun", "bool", "_3C", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B Anum Anum) Anum", "MOD Anum Anum", "_2B Anum Anum", "_3C 0 Anum"
ADD__MODULUS__LEFT:"num", "fun", "bool", "_3C", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B Anum Anum) Anum", "MOD Anum Anum", "_2B Anum Anum", "_3C 0 Anum"
ADD__MODULUS__RIGHT:"num", "fun", "bool", "_3C", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B Anum Anum) Anum", "MOD Anum Anum", "_2B Anum Anum", "_3C 0 Anum"
DIV__P:"num", "fun", "bool", "_3C", "_2B", "_2A", "DIV", "=", "0", "0", "Anum", "Anum->bool (DIV Anum Anum)", "Anum->bool (DIV Anum Anum) <=> (?Anum Anum. Anum = _2B (_2A Anum Anum) Anum /\ _3C Anum Anum /\ Anum->bool Anum)", "Anum->bool Anum", "DIV Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C 0 Anum", "_3C Anum Anum"
DIV__P__UNIV:"num", "fun", "bool", "_3C", "_2B", "_2A", "DIV", "=", "0", "0", "Anum", "Anum->bool (DIV Anum Anum)", "Anum->bool (DIV Anum Anum) <=> (!Anum Anum. Anum = _2B (_2A Anum Anum) Anum /\ _3C Anum Anum ==> Anum->bool Anum)", "Anum->bool Anum", "DIV Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C 0 Anum", "_3C Anum Anum"
MOD__P:"num", "fun", "bool", "_3C", "_2B", "_2A", "MOD", "=", "0", "0", "Anum", "Anum->bool (MOD Anum Anum)", "Anum->bool (MOD Anum Anum) <=> (?Anum Anum. Anum = _2B (_2A Anum Anum) Anum /\ _3C Anum Anum /\ Anum->bool Anum)", "Anum->bool Anum", "MOD Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C 0 Anum", "_3C Anum Anum"
MOD__P__UNIV:"num", "fun", "bool", "_3C", "_2B", "_2A", "MOD", "=", "0", "0", "Anum", "Anum->bool (MOD Anum Anum)", "Anum->bool (MOD Anum Anum) <=> (!Anum Anum. Anum = _2B (_2A Anum Anum) Anum /\ _3C Anum Anum ==> Anum->bool Anum)", "Anum->bool Anum", "MOD Anum Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "_3C 0 Anum", "_3C Anum Anum"
MOD__TIMES2:"num", "fun", "bool", "_3C", "_2A", "MOD", "=", "0", "0", "Anum", "MOD (_2A (MOD Anum Anum) (MOD Anum Anum)) Anum", "MOD (_2A Anum Anum) Anum", "MOD Anum Anum", "_2A (MOD Anum Anum) (MOD Anum Anum)", "_2A Anum Anum", "_3C 0 Anum"
MOD__COMMON__FACTOR:"num", "fun", "bool", "_3C", "_2A", "MOD", "=", "0", "0", "Anum", "MOD (_2A Anum Anum) (_2A Anum Anum)", "MOD Anum Anum", "_2A Anum (MOD Anum Anum)", "_2A Anum Anum", "_3C 0 Anum"
X__MOD__Y__EQ__X:"num", "fun", "bool", "_3C", "MOD", "=", "0", "0", "Anum", "MOD Anum Anum", "MOD Anum Anum = Anum <=> _3C Anum Anum", "_3C 0 Anum", "_3C Anum Anum"
DIV__LE__MONOTONE:"num", "fun", "bool", "_3C_3D", "_3C", "DIV", "0", "0", "Anum", "DIV Anum Anum", "_3C 0 Anum", "_3C_3D (DIV Anum Anum) (DIV Anum Anum)", "_3C_3D Anum Anum"
LE__LT1:"num", "fun", "bool", "_3C_3D", "_3C", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "_3C Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_3C_3D Anum Anum", "_3C_3D Anum Anum <=> _3C Anum (_2B Anum (NUMERAL (BIT1 ZERO)))"
X__LE__DIV:"num", "fun", "bool", "_3C_3D", "_3C", "_2A", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "_2A Anum Anum", "_3C 0 Anum", "_3C_3D (_2A Anum Anum) Anum", "_3C_3D Anum (DIV Anum Anum)", "_3C_3D Anum (DIV Anum Anum) <=> _3C_3D (_2A Anum Anum) Anum"
X__LT__DIV:"num", "fun", "bool", "_3C_3D", "_3C", "_2B", "_2A", "ZERO", "NUMERAL", "DIV", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "DIV Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A (_2B Anum (NUMERAL (BIT1 ZERO))) Anum", "_2B Anum (NUMERAL (BIT1 ZERO))", "_3C 0 Anum", "_3C Anum (DIV Anum Anum)", "_3C Anum (DIV Anum Anum) <=> _3C_3D (_2A (_2B Anum (NUMERAL (BIT1 ZERO))) Anum) Anum", "_3C_3D (_2A (_2B Anum (NUMERAL (BIT1 ZERO))) Anum) Anum"
DIV__LT__X:"num", "fun", "bool", "_3C", "_2A", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "_2A Anum Anum", "_3C (DIV Anum Anum) Anum", "_3C (DIV Anum Anum) Anum <=> _3C Anum (_2A Anum Anum)", "_3C 0 Anum", "_3C Anum (_2A Anum Anum)"
DIV__LE__X:"num", "fun", "bool", "_3C_3D", "_3C", "_2B", "_2A", "ZERO", "NUMERAL", "DIV", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "DIV Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A (_2B Anum (NUMERAL (BIT1 ZERO))) Anum", "_2B Anum (NUMERAL (BIT1 ZERO))", "_3C 0 Anum", "_3C Anum (_2A (_2B Anum (NUMERAL (BIT1 ZERO))) Anum)", "_3C_3D (DIV Anum Anum) Anum", "_3C_3D (DIV Anum Anum) Anum <=> _3C Anum (_2A (_2B Anum (NUMERAL (BIT1 ZERO))) Anum)"
DIV__EQ__X:"num", "fun", "bool", "_3C_3D", "_3C", "_2A", "SUC", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "DIV Anum Anum = Anum <=> _3C_3D (_2A Anum Anum) Anum /\ _3C Anum (_2A (SUC Anum) Anum)", "SUC Anum", "_2A (SUC Anum) Anum", "_2A Anum Anum", "_3C 0 Anum", "_3C Anum (_2A (SUC Anum) Anum)", "_3C_3D (_2A Anum Anum) Anum"
DIV__MOD__MOD__DIV:"num", "fun", "bool", "_3C", "_2A", "MOD", "DIV", "=", "0", "0", "Anum", "DIV (MOD Anum (_2A Anum Anum)) Anum", "DIV Anum Anum", "MOD (DIV Anum Anum) Anum", "MOD Anum (_2A Anum Anum)", "_2A Anum Anum", "_3C 0 Anum"
MULT__EQ__DIV:"num", "fun", "bool", "_3C", "_2A", "MOD", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "MOD Anum Anum", "_2A Anum Anum", "_2A Anum Anum = Anum <=> Anum = DIV Anum Anum /\ MOD Anum Anum = 0", "_3C 0 Anum"
NUMERAL__MULT__EQ__DIV__0:"num", "fun", "bool", "_2A", "NUMERAL", "MOD", "DIV", "BIT1", "=", "0", "0", "Anum", "BIT1 Anum", "DIV (NUMERAL Anum) (NUMERAL (BIT1 Anum))", "MOD (NUMERAL Anum) (NUMERAL (BIT1 Anum))", "NUMERAL (BIT1 Anum)", "NUMERAL Anum", "_2A (NUMERAL (BIT1 Anum)) Anum", "_2A (NUMERAL (BIT1 Anum)) Anum = NUMERAL Anum <=> Anum = DIV (NUMERAL Anum) (NUMERAL (BIT1 Anum)) /\ MOD (NUMERAL Anum) (NUMERAL (BIT1 Anum)) = 0"
NUMERAL__MULT__EQ__DIV__e1:"num", "fun", "bool", "_2A", "NUMERAL", "MOD", "DIV", "BIT2", "=", "0", "0", "Anum", "BIT2 Anum", "DIV (NUMERAL Anum) (NUMERAL (BIT2 Anum))", "MOD (NUMERAL Anum) (NUMERAL (BIT2 Anum))", "NUMERAL (BIT2 Anum)", "NUMERAL Anum", "_2A (NUMERAL (BIT2 Anum)) Anum", "_2A (NUMERAL (BIT2 Anum)) Anum = NUMERAL Anum <=> Anum = DIV (NUMERAL Anum) (NUMERAL (BIT2 Anum)) /\ MOD (NUMERAL Anum) (NUMERAL (BIT2 Anum)) = 0"
MOD__EQ__0__DIVISOR:"num", "fun", "bool", "_3C", "_2A", "MOD", "=", "0", "0", "Anum", "MOD Anum Anum", "MOD Anum Anum = 0 <=> (?Anum. Anum = _2A Anum Anum)", "_2A Anum Anum", "_3C 0 Anum"
MOD__SUC:"num", "fun", "bool", "~", "_3C", "_2A", "SUC", "MOD", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "MOD (SUC Anum) Anum", "MOD Anum Anum", "SUC (DIV Anum Anum)", "SUC (MOD Anum Anum)", "SUC Anum", "_2A (SUC (DIV Anum Anum)) Anum", "_3C 0 Anum"
MOD__SUC__IFF:"num", "fun", "bool", "~", "_3C", "_2A", "SUC", "MOD", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "MOD (SUC Anum) Anum", "MOD (SUC Anum) Anum = SUC (MOD Anum Anum) <=> ~(SUC Anum = _2A (SUC (DIV Anum Anum)) Anum)", "MOD Anum Anum", "SUC (DIV Anum Anum)", "SUC (MOD Anum Anum)", "SUC Anum", "_2A (SUC (DIV Anum Anum)) Anum", "_3C 0 Anum"
ONE__MOD:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "MOD", "BIT1", "=", "Anum", "BIT1 ZERO", "MOD (NUMERAL (BIT1 ZERO)) Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum"
ONE__MOD__IFF:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "MOD", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "MOD (NUMERAL (BIT1 ZERO)) Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum <=> _3C 0 Anum /\ MOD (NUMERAL (BIT1 ZERO)) Anum = NUMERAL (BIT1 ZERO)", "_3C 0 Anum"
MOD__LESS__EQ:"num", "fun", "bool", "_3C_3D", "_3C", "MOD", "0", "0", "Anum", "MOD Anum Anum", "_3C 0 Anum", "_3C_3D (MOD Anum Anum) Anum"
MOD__LIFT__PLUS:"num", "fun", "bool", "_3C", "_2D", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B Anum Anum) Anum", "MOD Anum Anum", "_2B (MOD Anum Anum) Anum", "_2B Anum Anum", "_2D Anum (MOD Anum Anum)", "_3C 0 Anum", "_3C Anum (_2D Anum (MOD Anum Anum))"
MOD__LIFT__PLUS__IFF:"num", "fun", "bool", "_3C", "_2D", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B Anum Anum) Anum", "MOD (_2B Anum Anum) Anum = _2B (MOD Anum Anum) Anum <=> _3C Anum (_2D Anum (MOD Anum Anum))", "MOD Anum Anum", "_2B (MOD Anum Anum) Anum", "_2B Anum Anum", "_2D Anum (MOD Anum Anum)", "_3C 0 Anum", "_3C Anum (_2D Anum (MOD Anum Anum))"
num__case__cong:"num", "fun", "bool", "num__CASE", "SUC", "=", "0", "0", "AA", "Anum", "Anum->A", "Anum->A Anum", "SUC Anum", "num__CASE Anum AA Anum->A"
SUC__ELIM__THM:"num", "fun", "bool", "_3C", "_2D", "ZERO", "SUC", "NUMERAL", "BIT1", "=", "0", "(!Anum. Anum->num->bool (SUC Anum) Anum) <=> (!Anum. _3C 0 Anum ==> Anum->num->bool Anum (_2D Anum (NUMERAL (BIT1 ZERO))))", "0", "Anum", "Anum->num->bool (SUC Anum) Anum", "Anum->num->bool Anum (_2D Anum (NUMERAL (BIT1 ZERO)))", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC Anum", "ZERO", "_2D Anum (NUMERAL (BIT1 ZERO))", "_3C 0 Anum"
SUC__ELIM__NUMERALS:"num", "fun", "bool", "_2D", "ZERO", "SUC", "NUMERAL", "BIT2", "BIT1", "=", "(!Anum. Anum->A (SUC Anum) = Anum->num->A Anum (SUC Anum)) <=> (!Anum. Anum->A (NUMERAL (BIT1 Anum)) = Anum->num->A (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) (NUMERAL (BIT1 Anum))) /\ (!Anum. Anum->A (NUMERAL (BIT2 Anum)) = Anum->num->A (NUMERAL (BIT1 Anum)) (NUMERAL (BIT2 Anum)))", "Anum", "Anum->A (NUMERAL (BIT1 Anum))", "Anum->A (NUMERAL (BIT2 Anum))", "Anum->A (SUC Anum)", "Anum->num->A (NUMERAL (BIT1 Anum)) (NUMERAL (BIT2 Anum))", "Anum->num->A (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) (NUMERAL (BIT1 Anum))", "Anum->num->A Anum (SUC Anum)", "BIT1 Anum", "BIT1 ZERO", "BIT2 Anum", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 Anum)", "SUC Anum", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))"
SUB__ELIM__THM:"num", "fun", "bool", "_2D", "_2B", "=", "0", "0", "Anum", "Anum->bool (_2D Anum Anum)", "Anum->bool (_2D Anum Anum) <=> (!Anum. (Anum = _2B Anum Anum ==> Anum->bool 0) /\ (Anum = _2B Anum Anum ==> Anum->bool Anum))", "Anum->bool 0", "Anum->bool Anum", "_2B Anum Anum", "_2D Anum Anum"
PRE__ELIM__THM:"num", "fun", "bool", "SUC", "PRE", "=", "0", "0", "Anum", "Anum->bool (PRE Anum)", "Anum->bool (PRE Anum) <=> (!Anum. (Anum = 0 ==> Anum->bool 0) /\ (Anum = SUC Anum ==> Anum->bool Anum))", "Anum->bool 0", "Anum->bool Anum", "PRE Anum", "SUC Anum"
MULT__INCREASES:"num", "fun", "bool", "_3C_3D", "_3C", "_2A", "ZERO", "SUC", "NUMERAL", "BIT1", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC Anum", "ZERO", "_2A Anum Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum", "_3C_3D (SUC Anum) (_2A Anum Anum)"
EXP__ALWAYS__BIG__ENOUGH:"num", "fun", "bool", "_3C_3D", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "Anum", "BIT1 ZERO", "EXP Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C_3D Anum (EXP Anum Anum)"
EXP__EQ__0:"num", "fun", "bool", "_3C", "EXP", "=", "0", "0", "Anum", "EXP Anum Anum", "EXP Anum Anum = 0 <=> Anum = 0 /\ _3C 0 Anum", "_3C 0 Anum"
ZERO__LT__EXP:"num", "fun", "bool", "_3C", "EXP", "=", "0", "0", "Anum", "EXP Anum Anum", "_3C 0 (EXP Anum Anum)", "_3C 0 (EXP Anum Anum) <=> _3C 0 Anum \/ Anum = 0", "_3C 0 Anum"
EXP__1__0:"num", "fun", "bool", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "Anum", "BIT1 ZERO", "EXP (NUMERAL (BIT1 ZERO)) Anum", "NUMERAL (BIT1 ZERO)", "ZERO"
EXP__1__e1:"num", "fun", "bool", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "Anum", "BIT1 ZERO", "EXP Anum (NUMERAL (BIT1 ZERO))", "NUMERAL (BIT1 ZERO)", "ZERO"
EXP__EQ__1:"num", "fun", "bool", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "EXP Anum Anum", "EXP Anum Anum = NUMERAL (BIT1 ZERO) <=> Anum = NUMERAL (BIT1 ZERO) \/ Anum = 0", "NUMERAL (BIT1 ZERO)", "ZERO"
EXP__BASE__LE__MONO:"num", "fun", "bool", "_3C_3D", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "Anum", "BIT1 ZERO", "EXP Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C_3D (EXP Anum Anum) (EXP Anum Anum)", "_3C_3D (EXP Anum Anum) (EXP Anum Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
EXP__BASE__LT__MONO:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "Anum", "BIT1 ZERO", "EXP Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (EXP Anum Anum) (EXP Anum Anum)", "_3C (EXP Anum Anum) (EXP Anum Anum) <=> _3C Anum Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C Anum Anum"
EXP__BASE__INJECTIVE:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "Anum", "BIT1 ZERO", "EXP Anum Anum", "EXP Anum Anum = EXP Anum Anum <=> Anum = Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum"
EXP__BASE__LEQ__MONO__IMP:"num", "fun", "bool", "_3C_3D", "_3C", "EXP", "0", "0", "Anum", "EXP Anum Anum", "_3C 0 Anum", "_3C_3D (EXP Anum Anum) (EXP Anum Anum)", "_3C_3D Anum Anum"
EXP__BASE__LEQ__MONO__SUC__IMP:"num", "fun", "bool", "_3C_3D", "SUC", "EXP", "Anum", "EXP (SUC Anum) Anum", "SUC Anum", "_3C_3D (EXP (SUC Anum) Anum) (EXP (SUC Anum) Anum)", "_3C_3D Anum Anum"
EXP__BASE__LE__IFF:"num", "fun", "bool", "_3C_3D", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "EXP Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum", "_3C_3D (EXP Anum Anum) (EXP Anum Anum)", "_3C_3D (EXP Anum Anum) (EXP Anum Anum) <=> Anum = 0 /\ Anum = 0 \/ Anum = 0 /\ _3C 0 Anum \/ Anum = NUMERAL (BIT1 ZERO) \/ _3C (NUMERAL (BIT1 ZERO)) Anum /\ _3C_3D Anum Anum", "_3C_3D Anum Anum"
X__LE__X__EXP:"num", "fun", "bool", "_3C_3D", "_3C", "EXP", "0", "0", "Anum", "EXP Anum Anum", "_3C 0 Anum", "_3C_3D Anum (EXP Anum Anum)"
X__LT__EXP__X:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "Anum", "BIT1 ZERO", "EXP Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C Anum (EXP Anum Anum)"
ZERO__EXP:"num", "fun", "bool", "ZERO", "NUMERAL", "EXP", "COND", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "EXP 0 Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "if Anum = 0 then NUMERAL (BIT1 ZERO) else 0"
X__LT__EXP__X__IFF:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "EXP Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C Anum (EXP Anum Anum)", "_3C Anum (EXP Anum Anum) <=> _3C (NUMERAL (BIT1 ZERO)) Anum \/ Anum = 0"
EXP__EXP__LT__MONO:"num", "fun", "bool", "_3C", "EXP", "=", "0", "0", "Anum", "EXP Anum Anum", "_3C (EXP Anum Anum) (EXP Anum Anum)", "_3C (EXP Anum Anum) (EXP Anum Anum) <=> _3C Anum Anum /\ _3C 0 Anum", "_3C 0 Anum", "_3C Anum Anum"
EXP__EXP__LE__MONO:"num", "fun", "bool", "_3C_3D", "EXP", "=", "0", "0", "Anum", "EXP Anum Anum", "_3C_3D (EXP Anum Anum) (EXP Anum Anum)", "_3C_3D (EXP Anum Anum) (EXP Anum Anum) <=> _3C_3D Anum Anum \/ Anum = 0", "_3C_3D Anum Anum"
EXP__EXP__INJECTIVE:"num", "fun", "bool", "EXP", "=", "0", "0", "Anum", "EXP Anum Anum", "EXP Anum Anum = EXP Anum Anum <=> Anum = 0 \/ Anum = Anum"
EXP__SUB:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "EXP", "DIV", "=", "0", "0", "Anum", "DIV (EXP Anum Anum) (EXP Anum Anum)", "EXP Anum (_2D Anum Anum)", "EXP Anum Anum", "_2D Anum Anum", "_3C 0 Anum", "_3C_3D Anum Anum"
EXP__SUB__NUMERAL:"num", "fun", "bool", "_3C", "_2D", "ZERO", "NUMERAL", "EXP", "DIV", "BIT2", "BIT1", "=", "0", "0", "Anum", "BIT1 Anum", "BIT1 ZERO", "BIT2 Anum", "DIV (EXP Anum (NUMERAL (BIT1 Anum))) Anum", "DIV (EXP Anum (NUMERAL (BIT2 Anum))) Anum", "EXP Anum (NUMERAL (BIT1 Anum))", "EXP Anum (NUMERAL (BIT2 Anum))", "EXP Anum (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO)))", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 Anum)", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))", "_3C 0 Anum"
EXP__BASE__MULT:"num", "fun", "bool", "_2A", "EXP", "=", "Anum", "EXP (_2A Anum Anum) Anum", "EXP Anum Anum", "_2A (EXP Anum Anum) (EXP Anum Anum)", "_2A Anum Anum"
EXP__EXP__MULT:"num", "fun", "bool", "_2A", "EXP", "=", "Anum", "EXP (EXP Anum Anum) Anum", "EXP Anum (_2A Anum Anum)", "EXP Anum Anum", "_2A Anum Anum"
MAX__DEF:"num", "fun", "bool", "_3C", "MAX", "COND", "=", "Anum", "MAX Anum Anum", "_3C Anum Anum", "if _3C Anum Anum then Anum else Anum"
MIN__DEF:"num", "fun", "bool", "_3C", "MIN", "COND", "=", "Anum", "MIN Anum Anum", "_3C Anum Anum", "if _3C Anum Anum then Anum else Anum"
MAX__COMM:"num", "fun", "bool", "MAX", "=", "Anum", "MAX Anum Anum"
MIN__COMM:"num", "fun", "bool", "MIN", "=", "Anum", "MIN Anum Anum"
MAX__ASSOC:"num", "fun", "bool", "MAX", "=", "Anum", "MAX (MAX Anum Anum) Anum", "MAX Anum (MAX Anum Anum)", "MAX Anum Anum"
MIN__ASSOC:"num", "fun", "bool", "MIN", "=", "Anum", "MIN (MIN Anum Anum) Anum", "MIN Anum (MIN Anum Anum)", "MIN Anum Anum"
MIN__MAX__EQ:"num", "fun", "bool", "MIN", "MAX", "=", "Anum", "MAX Anum Anum", "MIN Anum Anum", "MIN Anum Anum = MAX Anum Anum <=> Anum = Anum"
MIN__MAX__LT:"num", "fun", "bool", "~", "_3C", "MIN", "MAX", "=", "Anum", "MAX Anum Anum", "MIN Anum Anum", "_3C (MIN Anum Anum) (MAX Anum Anum)", "_3C (MIN Anum Anum) (MAX Anum Anum) <=> ~(Anum = Anum)"
MIN__MAX__LE:"num", "fun", "bool", "_3C_3D", "MIN", "MAX", "Anum", "MAX Anum Anum", "MIN Anum Anum", "_3C_3D (MIN Anum Anum) (MAX Anum Anum)"
MIN__MAX__PRED:"num", "fun", "bool", "MIN", "MAX", "Anum", "Anum->bool (MAX Anum Anum)", "Anum->bool (MIN Anum Anum)", "Anum->bool Anum", "MAX Anum Anum", "MIN Anum Anum"
MIN__LT__0:"num", "fun", "bool", "_3C", "MIN", "=", "Anum", "MIN Anum Anum", "_3C (MIN Anum Anum) Anum", "_3C (MIN Anum Anum) Anum <=> _3C Anum Anum \/ _3C Anum Anum", "_3C Anum Anum"
MIN__LT__e1:"num", "fun", "bool", "_3C", "MIN", "=", "Anum", "MIN Anum Anum", "_3C Anum (MIN Anum Anum)", "_3C Anum (MIN Anum Anum) <=> _3C Anum Anum /\ _3C Anum Anum", "_3C Anum Anum"
MAX__LT__0:"num", "fun", "bool", "_3C", "MAX", "=", "Anum", "MAX Anum Anum", "_3C Anum (MAX Anum Anum)", "_3C Anum (MAX Anum Anum) <=> _3C Anum Anum \/ _3C Anum Anum", "_3C Anum Anum"
MAX__LT__e1:"num", "fun", "bool", "_3C", "MAX", "=", "Anum", "MAX Anum Anum", "_3C (MAX Anum Anum) Anum", "_3C (MAX Anum Anum) Anum <=> _3C Anum Anum /\ _3C Anum Anum", "_3C Anum Anum"
MIN__LE__0:"num", "fun", "bool", "_3C_3D", "MIN", "=", "Anum", "MIN Anum Anum", "_3C_3D (MIN Anum Anum) Anum", "_3C_3D (MIN Anum Anum) Anum <=> _3C_3D Anum Anum \/ _3C_3D Anum Anum", "_3C_3D Anum Anum"
MIN__LE__e1:"num", "fun", "bool", "_3C_3D", "MIN", "=", "Anum", "MIN Anum Anum", "_3C_3D Anum (MIN Anum Anum)", "_3C_3D Anum (MIN Anum Anum) <=> _3C_3D Anum Anum /\ _3C_3D Anum Anum", "_3C_3D Anum Anum"
MAX__LE__0:"num", "fun", "bool", "_3C_3D", "MAX", "=", "Anum", "MAX Anum Anum", "_3C_3D Anum (MAX Anum Anum)", "_3C_3D Anum (MAX Anum Anum) <=> _3C_3D Anum Anum \/ _3C_3D Anum Anum", "_3C_3D Anum Anum"
MAX__LE__e1:"num", "fun", "bool", "_3C_3D", "MAX", "=", "Anum", "MAX Anum Anum", "_3C_3D (MAX Anum Anum) Anum", "_3C_3D (MAX Anum Anum) Anum <=> _3C_3D Anum Anum /\ _3C_3D Anum Anum", "_3C_3D Anum Anum"
MIN__0__0:"num", "fun", "bool", "MIN", "=", "0", "0", "Anum", "MIN Anum 0"
MIN__0__e1:"num", "fun", "bool", "MIN", "=", "0", "0", "Anum", "MIN 0 Anum"
MAX__0__0:"num", "fun", "bool", "MAX", "=", "0", "0", "Anum", "MAX Anum 0"
MAX__0__e1:"num", "fun", "bool", "MAX", "=", "0", "0", "Anum", "MAX 0 Anum"
MIN__IDEM:"num", "fun", "bool", "MIN", "=", "Anum", "MIN Anum Anum"
MAX__IDEM:"num", "fun", "bool", "MAX", "=", "Anum", "MAX Anum Anum"
EXISTS__GREATEST:"num", "fun", "bool", "~", "_3E", "=", "(?Anum. Anum->bool Anum) /\ (?Anum. !Anum. _3E Anum Anum ==> ~Anum->bool Anum) <=> (?Anum. Anum->bool Anum /\ (!Anum. _3E Anum Anum ==> ~Anum->bool Anum))", "Anum", "Anum->bool Anum", "_3E Anum Anum"
EXISTS__NUM:"num", "fun", "bool", "SUC", "=", "0", "(?Anum. Anum->bool Anum) <=> Anum->bool 0 \/ (?Anum. Anum->bool (SUC Anum))", "0", "Anum", "Anum->bool (SUC Anum)", "Anum->bool 0", "Anum->bool Anum", "SUC Anum"
FORALL__NUM:"num", "fun", "bool", "SUC", "=", "0", "(!Anum. Anum->bool Anum) <=> Anum->bool 0 /\ (!Anum. Anum->bool (SUC Anum))", "0", "Anum", "Anum->bool (SUC Anum)", "Anum->bool 0", "Anum->bool Anum", "SUC Anum"
BOUNDED__FORALL__THM:"num", "fun", "bool", "_3C", "_2D", "ZERO", "NUMERAL", "BIT1", "=", "0", "(!Anum. _3C Anum Anum ==> Anum->bool Anum) <=> Anum->bool (_2D Anum (NUMERAL (BIT1 ZERO))) /\ (!Anum. _3C Anum (_2D Anum (NUMERAL (BIT1 ZERO))) ==> Anum->bool Anum)", "0", "Anum", "Anum->bool (_2D Anum (NUMERAL (BIT1 ZERO)))", "Anum->bool Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D Anum (NUMERAL (BIT1 ZERO))", "_3C 0 Anum", "_3C Anum (_2D Anum (NUMERAL (BIT1 ZERO)))", "_3C Anum Anum"
BOUNDED__EXISTS__THM:"num", "fun", "bool", "_3C", "_2D", "ZERO", "NUMERAL", "BIT1", "=", "0", "(?Anum. _3C Anum Anum /\ Anum->bool Anum) <=> Anum->bool (_2D Anum (NUMERAL (BIT1 ZERO))) \/ (?Anum. _3C Anum (_2D Anum (NUMERAL (BIT1 ZERO))) /\ Anum->bool Anum)", "0", "Anum", "Anum->bool (_2D Anum (NUMERAL (BIT1 ZERO)))", "Anum->bool Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D Anum (NUMERAL (BIT1 ZERO))", "_3C 0 Anum", "_3C Anum (_2D Anum (NUMERAL (BIT1 ZERO)))", "_3C Anum Anum"
transitive__monotone:"num", "fun", "bool", "transitive", "_3C", "SUC", "AA->A->bool", "AA->A->bool (Anum->A Anum) (Anum->A (SUC Anum))", "AA->A->bool (Anum->A Anum) (Anum->A Anum)", "Anum", "Anum->A (SUC Anum)", "Anum->A Anum", "SUC Anum", "_3C Anum Anum", "transitive AA->A->bool"
STRICTLY__INCREASING__TC:"num", "fun", "bool", "_3C", "SUC", "Anum", "Anum->num (SUC Anum)", "Anum->num Anum", "SUC Anum", "_3C (Anum->num Anum) (Anum->num (SUC Anum))", "_3C (Anum->num Anum) (Anum->num Anum)", "_3C Anum Anum"
STRICTLY__INCREASING__ONE__ONE:"num", "fun", "bool", "_3C", "SUC", "ONE__ONE", "Anum", "Anum->num", "Anum->num (SUC Anum)", "Anum->num Anum", "ONE__ONE Anum->num", "SUC Anum", "_3C (Anum->num Anum) (Anum->num (SUC Anum))"
ONE__ONE__UNBOUNDED:"num", "fun", "bool", "_3C", "ONE__ONE", "Anum", "Anum->num", "Anum->num Anum", "ONE__ONE Anum->num", "_3C Anum (Anum->num Anum)"
STRICTLY__INCREASING__UNBOUNDED:"num", "fun", "bool", "_3C", "SUC", "Anum", "Anum->num (SUC Anum)", "Anum->num Anum", "SUC Anum", "_3C (Anum->num Anum) (Anum->num (SUC Anum))", "_3C Anum (Anum->num Anum)"
NOT__STRICTLY__DECREASING:"num", "fun", "bool", "~", "_3C", "SUC", "Anum", "Anum->num (SUC Anum)", "Anum->num Anum", "SUC Anum", "_3C (Anum->num (SUC Anum)) (Anum->num Anum)"
ABS__DIFF__def:"num", "fun", "bool", "_3C", "_2D", "COND", "ABS__DIFF", "=", "ABS__DIFF Anum Anum", "Anum", "_2D Anum Anum", "_3C Anum Anum", "if _3C Anum Anum then _2D Anum Anum else _2D Anum Anum"
ABS__DIFF__SYM:"num", "fun", "bool", "ABS__DIFF", "=", "ABS__DIFF Anum Anum", "Anum"
ABS__DIFF__COMM:"num", "fun", "bool", "ABS__DIFF", "=", "ABS__DIFF Anum Anum", "Anum"
ABS__DIFF__EQS:"num", "fun", "bool", "ABS__DIFF", "=", "0", "0", "ABS__DIFF Anum Anum", "Anum"
ABS__DIFF__EQ__0:"num", "fun", "bool", "ABS__DIFF", "=", "0", "0", "ABS__DIFF Anum Anum", "ABS__DIFF Anum Anum = 0 <=> Anum = Anum", "Anum"
ABS__DIFF__ZERO__0:"num", "fun", "bool", "ABS__DIFF", "=", "0", "0", "ABS__DIFF Anum 0", "Anum"
ABS__DIFF__ZERO__e1:"num", "fun", "bool", "ABS__DIFF", "=", "0", "0", "ABS__DIFF 0 Anum", "Anum"
ABS__DIFF__TRIANGLE:"num", "fun", "bool", "_3C_3D", "_2B", "ABS__DIFF", "ABS__DIFF Anum Anum", "Anum", "_2B (ABS__DIFF Anum Anum) (ABS__DIFF Anum Anum)", "_3C_3D (ABS__DIFF Anum Anum) (_2B (ABS__DIFF Anum Anum) (ABS__DIFF Anum Anum))"
ABS__DIFF__ADD__SAME:"num", "fun", "bool", "_2B", "ABS__DIFF", "=", "ABS__DIFF (_2B Anum Anum) (_2B Anum Anum)", "ABS__DIFF Anum Anum", "Anum", "_2B Anum Anum"
LT__SUB__RCANCEL:"num", "fun", "bool", "_3C", "_2D", "=", "Anum", "_2D Anum Anum", "_3C (_2D Anum Anum) (_2D Anum Anum)", "_3C (_2D Anum Anum) (_2D Anum Anum) <=> _3C Anum Anum /\ _3C Anum Anum", "_3C Anum Anum"
LE__SUB__RCANCEL:"num", "fun", "bool", "_3C_3D", "_2D", "=", "Anum", "_2D Anum Anum", "_3C_3D (_2D Anum Anum) (_2D Anum Anum)", "_3C_3D (_2D Anum Anum) (_2D Anum Anum) <=> _3C_3D Anum Anum \/ _3C_3D Anum Anum", "_3C_3D Anum Anum"
ABS__DIFF__SUMS:"num", "fun", "bool", "_3C_3D", "_2B", "ABS__DIFF", "ABS__DIFF (_2B Anum Anum) (_2B Anum Anum)", "ABS__DIFF Anum Anum", "Anum", "_2B (ABS__DIFF Anum Anum) (ABS__DIFF Anum Anum)", "_2B Anum Anum", "_3C_3D (ABS__DIFF (_2B Anum Anum) (_2B Anum Anum)) (_2B (ABS__DIFF Anum Anum) (ABS__DIFF Anum Anum))"
FUNPOW__SUC:"num", "fun", "bool", "SUC", "FUNPOW", "=", "AA", "AA->A", "AA->A (FUNPOW AA->A Anum AA)", "Anum", "FUNPOW AA->A (SUC Anum) AA", "FUNPOW AA->A Anum AA", "SUC Anum"
FUNPOW__00:"num", "fun", "bool", "FUNPOW", "=", "0", "0", "AA", "AA->A", "FUNPOW AA->A 0 AA"
FUNPOW__ADD:"num", "fun", "bool", "_2B", "FUNPOW", "=", "AA", "AA->A", "Anum", "FUNPOW AA->A (_2B Anum Anum) AA", "FUNPOW AA->A Anum (FUNPOW AA->A Anum AA)", "FUNPOW AA->A Anum AA", "_2B Anum Anum"
FUNPOW__1:"num", "fun", "bool", "ZERO", "NUMERAL", "FUNPOW", "BIT1", "=", "AA", "AA->A", "AA->A AA", "BIT1 ZERO", "FUNPOW AA->A (NUMERAL (BIT1 ZERO)) AA", "NUMERAL (BIT1 ZERO)", "ZERO"
NRC__00:"num", "fun", "bool", "NRC", "=", "0", "0", "AA", "AA->A->bool", "NRC AA->A->bool 0 AA AA", "NRC AA->A->bool 0 AA AA <=> AA = AA"
NRC__1:"num", "fun", "bool", "ZERO", "NUMERAL", "NRC", "BIT1", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "BIT1 ZERO", "NRC AA->A->bool (NUMERAL (BIT1 ZERO)) AA AA", "NRC AA->A->bool (NUMERAL (BIT1 ZERO)) AA AA <=> AA->A->bool AA AA", "NUMERAL (BIT1 ZERO)", "ZERO"
NRC__ADD__I:"num", "fun", "bool", "_2B", "NRC", "AA", "AA->A->bool", "Anum", "NRC AA->A->bool (_2B Anum Anum) AA AA", "NRC AA->A->bool Anum AA AA", "_2B Anum Anum"
NRC__ADD__E:"num", "fun", "bool", "_2B", "NRC", "AA", "AA->A->bool", "Anum", "NRC AA->A->bool (_2B Anum Anum) AA AA", "NRC AA->A->bool Anum AA AA", "_2B Anum Anum"
NRC__ADD__EQN:"num", "fun", "bool", "_2B", "NRC", "=", "AA", "AA->A->bool", "Anum", "NRC AA->A->bool (_2B Anum Anum) AA AA", "NRC AA->A->bool (_2B Anum Anum) AA AA <=> (?AA. NRC AA->A->bool Anum AA AA /\ NRC AA->A->bool Anum AA AA)", "NRC AA->A->bool Anum AA AA", "_2B Anum Anum"
NRC__SUC__RECURSE__LEFT:"num", "fun", "bool", "SUC", "NRC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "Anum", "NRC AA->A->bool (SUC Anum) AA AA", "NRC AA->A->bool (SUC Anum) AA AA <=> (?AA. NRC AA->A->bool Anum AA AA /\ AA->A->bool AA AA)", "NRC AA->A->bool Anum AA AA", "SUC Anum"
NRC__RTC:"num", "fun", "bool", "RTC", "NRC", "AA", "AA->A->bool", "Anum", "NRC AA->A->bool Anum AA AA", "RTC AA->A->bool AA AA"
RTC__NRC:"num", "fun", "bool", "RTC", "NRC", "AA", "AA->A->bool", "Anum", "NRC AA->A->bool Anum AA AA", "RTC AA->A->bool AA AA"
RTC__eq__NRC:"num", "fun", "bool", "RTC", "NRC", "=", "AA", "AA->A->bool", "Anum", "NRC AA->A->bool Anum AA AA", "RTC AA->A->bool AA AA", "RTC AA->A->bool AA AA <=> (?Anum. NRC AA->A->bool Anum AA AA)"
TC__eq__NRC:"num", "fun", "bool", "TC", "SUC", "NRC", "=", "AA", "AA->A->bool", "Anum", "NRC AA->A->bool (SUC Anum) AA AA", "SUC Anum", "TC AA->A->bool AA AA", "TC AA->A->bool AA AA <=> (?Anum. NRC AA->A->bool (SUC Anum) AA AA)"
LESS__EQUAL__DIFF:"num", "fun", "bool", "_3C_3D", "_2D", "=", "Anum", "_2D Anum Anum", "_3C_3D Anum Anum"
MOD__2:"num", "fun", "bool", "ZERO", "NUMERAL", "MOD", "EVEN", "COND", "BIT2", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "BIT2 ZERO", "EVEN Anum", "MOD Anum (NUMERAL (BIT2 ZERO))", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "if EVEN Anum then 0 else NUMERAL (BIT1 ZERO)"
EVEN__MOD2:"num", "fun", "bool", "ZERO", "NUMERAL", "MOD", "EVEN", "BIT2", "=", "0", "0", "Anum", "BIT2 ZERO", "EVEN Anum", "EVEN Anum <=> MOD Anum (NUMERAL (BIT2 ZERO)) = 0", "MOD Anum (NUMERAL (BIT2 ZERO))", "NUMERAL (BIT2 ZERO)", "ZERO"
SUC__MOD:"num", "fun", "bool", "_3C", "SUC", "MOD", "=", "0", "0", "Anum", "MOD (SUC Anum) Anum", "MOD (SUC Anum) Anum = MOD (SUC Anum) Anum <=> MOD Anum Anum = MOD Anum Anum", "MOD Anum Anum", "SUC Anum", "_3C 0 Anum"
ADD__MOD:"num", "fun", "bool", "_3C", "_2B", "MOD", "=", "0", "0", "Anum", "MOD (_2B Anum Anum) Anum", "MOD (_2B Anum Anum) Anum = MOD (_2B Anum Anum) Anum <=> MOD Anum Anum = MOD Anum Anum", "MOD Anum Anum", "_2B Anum Anum", "_3C 0 Anum"
MOD__ELIM:"num", "fun", "bool", "_3C", "_2B", "MOD", "0", "0", "Anum", "Anum->bool (MOD Anum Anum)", "Anum->bool (_2B Anum Anum)", "Anum->bool Anum", "MOD Anum Anum", "_2B Anum Anum", "_3C 0 Anum"
DOUBLE__LT:"num", "fun", "bool", "_3C", "_2B", "_2A", "ZERO", "NUMERAL", "BIT2", "BIT1", "=", "Anum", "BIT1 ZERO", "BIT2 ZERO", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum", "_2B (_2A (NUMERAL (BIT2 ZERO)) Anum) (NUMERAL (BIT1 ZERO))", "_3C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2A (NUMERAL (BIT2 ZERO)) Anum)", "_3C (_2B (_2A (NUMERAL (BIT2 ZERO)) Anum) (NUMERAL (BIT1 ZERO))) (_2A (NUMERAL (BIT2 ZERO)) Anum)", "_3C (_2B (_2A (NUMERAL (BIT2 ZERO)) Anum) (NUMERAL (BIT1 ZERO))) (_2A (NUMERAL (BIT2 ZERO)) Anum) <=> _3C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2A (NUMERAL (BIT2 ZERO)) Anum)"
EXP2__LT:"num", "fun", "bool", "_3C", "ZERO", "SUC", "NUMERAL", "EXP", "DIV", "BIT2", "=", "Anum", "BIT2 ZERO", "DIV Anum (NUMERAL (BIT2 ZERO))", "EXP (NUMERAL (BIT2 ZERO)) (SUC Anum)", "EXP (NUMERAL (BIT2 ZERO)) Anum", "NUMERAL (BIT2 ZERO)", "SUC Anum", "ZERO", "_3C (DIV Anum (NUMERAL (BIT2 ZERO))) (EXP (NUMERAL (BIT2 ZERO)) Anum)", "_3C (DIV Anum (NUMERAL (BIT2 ZERO))) (EXP (NUMERAL (BIT2 ZERO)) Anum) <=> _3C Anum (EXP (NUMERAL (BIT2 ZERO)) (SUC Anum))", "_3C Anum (EXP (NUMERAL (BIT2 ZERO)) (SUC Anum))"
SUB__LESS:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "0", "0", "Anum", "_2D Anum Anum", "_3C (_2D Anum Anum) Anum", "_3C 0 Anum", "_3C_3D Anum Anum"
SUB__MOD:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "MOD", "=", "0", "0", "Anum", "MOD (_2D Anum Anum) Anum", "MOD Anum Anum", "_2D Anum Anum", "_3C 0 Anum", "_3C_3D Anum Anum"
ONE__LT__MULT__IMP:"num", "fun", "bool", "_3C", "_2A", "ZERO", "NUMERAL", "BIT1", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_3C (NUMERAL (BIT1 ZERO)) (_2A Anum Anum)", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum"
ONE__LT__MULT:"num", "fun", "bool", "_3C", "_2A", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_3C (NUMERAL (BIT1 ZERO)) (_2A Anum Anum)", "_3C (NUMERAL (BIT1 ZERO)) (_2A Anum Anum) <=> _3C 0 Anum /\ _3C (NUMERAL (BIT1 ZERO)) Anum \/ _3C 0 Anum /\ _3C (NUMERAL (BIT1 ZERO)) Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum"
ONE__LT__EXP:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "EXP Anum Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_3C (NUMERAL (BIT1 ZERO)) (EXP Anum Anum)", "_3C (NUMERAL (BIT1 ZERO)) (EXP Anum Anum) <=> _3C (NUMERAL (BIT1 ZERO)) Anum /\ _3C 0 Anum", "_3C (NUMERAL (BIT1 ZERO)) Anum", "_3C 0 Anum"
findq__def:"prod", "num", "fun", "bool", "measure", "findq", "_3C", "_2D", "_2C", "_2A", "ZERO", "WFREC", "UNCURRY", "NUMERAL", "LET", "COND", "BIT2", "=", "0", "0", "Anum", "Anum#num#num->num (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))", "BIT2 ZERO", "LET (\Anum. if _3C Anum Anum then Anum else Anum#num#num->num (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))) (_2A (NUMERAL (BIT2 ZERO)) Anum)", "NUMERAL (BIT2 ZERO)", "UNCURRY (\Anum Anum. _2D Anum Anum)", "UNCURRY (\Anum Anum. if Anum = 0 then Anum else LET (\Anum. if _3C Anum Anum then Anum else Anum#num#num->num (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))) (_2A (NUMERAL (BIT2 ZERO)) Anum))", "UNCURRY (\Anum. UNCURRY (\Anum Anum. _2D Anum Anum))", "UNCURRY (\Anum. UNCURRY (\Anum Anum. if Anum = 0 then Anum else LET (\Anum. if _3C Anum Anum then Anum else Anum#num#num->num (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))) (_2A (NUMERAL (BIT2 ZERO)) Anum)))", "WFREC (measure (UNCURRY (\Anum. UNCURRY (\Anum Anum. _2D Anum Anum)))) (\Anum#num#num->num. UNCURRY (\Anum. UNCURRY (\Anum Anum. if Anum = 0 then Anum else LET (\Anum. if _3C Anum Anum then Anum else Anum#num#num->num (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))) (_2A (NUMERAL (BIT2 ZERO)) Anum))))", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum", "_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum)", "_2C Anum Anum", "_2D Anum Anum", "_3C Anum Anum", "findq", "if Anum = 0 then Anum else LET (\Anum. if _3C Anum Anum then Anum else Anum#num#num->num (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))) (_2A (NUMERAL (BIT2 ZERO)) Anum)", "if _3C Anum Anum then Anum else Anum#num#num->num (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))", "measure (UNCURRY (\Anum. UNCURRY (\Anum Anum. _2D Anum Anum)))"
findq__thm:"prod", "num", "fun", "bool", "findq", "_3C", "_2C", "_2A", "ZERO", "NUMERAL", "LET", "COND", "BIT2", "=", "0", "0", "Anum", "BIT2 ZERO", "LET (\Anum. if _3C Anum Anum then Anum else findq (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))) (_2A (NUMERAL (BIT2 ZERO)) Anum)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum", "_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum)", "_2C Anum (_2C Anum Anum)", "_2C Anum Anum", "_3C Anum Anum", "findq (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))", "findq (_2C Anum (_2C Anum Anum))", "if Anum = 0 then Anum else LET (\Anum. if _3C Anum Anum then Anum else findq (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))) (_2A (NUMERAL (BIT2 ZERO)) Anum)", "if _3C Anum Anum then Anum else findq (_2C (_2A (NUMERAL (BIT2 ZERO)) Anum) (_2C Anum Anum))"
findq__eq__0:"prod", "num", "fun", "bool", "findq", "_2C", "=", "0", "0", "Anum", "_2C Anum (_2C Anum Anum)", "_2C Anum Anum", "findq (_2C Anum (_2C Anum Anum))", "findq (_2C Anum (_2C Anum Anum)) = 0 <=> Anum = 0"
findq__divisor:"prod", "num", "fun", "bool", "findq", "_3C_3D", "_2C", "_2A", "Anum", "_2A (findq (_2C Anum (_2C Anum Anum))) Anum", "_2A Anum Anum", "_2C Anum (_2C Anum Anum)", "_2C Anum Anum", "_3C_3D (_2A (findq (_2C Anum (_2C Anum Anum))) Anum) (_2A Anum Anum)", "_3C_3D Anum Anum", "findq (_2C Anum (_2C Anum Anum))"
DIVMOD__DEF:"prod", "num", "fun", "bool", "o", "measure", "findq", "_3C", "_2D", "_2C", "_2B", "_2A", "ZERO", "WFREC", "UNCURRY", "SND", "NUMERAL", "LET", "FST", "DIVMOD", "COND", "BIT1", "=", "0", "0", "Anum", "Anum#num#num->num#num (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))", "BIT1 ZERO", "DIVMOD", "FST", "LET (\Anum. Anum#num#num->num#num (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))", "NUMERAL (BIT1 ZERO)", "SND", "UNCURRY (\Anum Anum. if Anum = 0 then _2C 0 0 else if _3C Anum Anum then _2C Anum Anum else LET (\Anum. Anum#num#num->num#num (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum))))", "UNCURRY (\Anum. UNCURRY (\Anum Anum. if Anum = 0 then _2C 0 0 else if _3C Anum Anum then _2C Anum Anum else LET (\Anum. Anum#num#num->num#num (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))))", "WFREC (measure (o FST SND)) (\Anum#num#num->num#num. UNCURRY (\Anum. UNCURRY (\Anum Anum. if Anum = 0 then _2C 0 0 else if _3C Anum Anum then _2C Anum Anum else LET (\Anum. Anum#num#num->num#num (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum))))))", "ZERO", "_2A Anum Anum", "_2B Anum Anum", "_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)", "_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum)", "_2C (_2D Anum (_2A Anum Anum)) Anum", "_2C 0 0", "_2C Anum Anum", "_2D Anum (_2A Anum Anum)", "_3C Anum Anum", "findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum))", "if Anum = 0 then _2C 0 0 else if _3C Anum Anum then _2C Anum Anum else LET (\Anum. Anum#num#num->num#num (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))", "if _3C Anum Anum then _2C Anum Anum else LET (\Anum. Anum#num#num->num#num (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))", "measure (o FST SND)", "o FST SND"
DIVMOD__THM:"prod", "num", "fun", "bool", "findq", "_3C", "_2D", "_2C", "_2B", "_2A", "ZERO", "NUMERAL", "LET", "DIVMOD", "COND", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "DIVMOD (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))", "DIVMOD (_2C Anum (_2C Anum Anum))", "LET (\Anum. DIVMOD (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_2B Anum Anum", "_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)", "_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum)", "_2C (_2D Anum (_2A Anum Anum)) Anum", "_2C 0 0", "_2C Anum (_2C Anum Anum)", "_2C Anum Anum", "_2D Anum (_2A Anum Anum)", "_3C Anum Anum", "findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum))", "if Anum = 0 then _2C 0 0 else if _3C Anum Anum then _2C Anum Anum else LET (\Anum. DIVMOD (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))", "if _3C Anum Anum then _2C Anum Anum else LET (\Anum. DIVMOD (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))"
MOD__SUB:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "_2A", "MOD", "=", "0", "0", "Anum", "MOD (_2D Anum (_2A Anum Anum)) Anum", "MOD Anum Anum", "_2A Anum Anum", "_2D Anum (_2A Anum Anum)", "_3C 0 Anum", "_3C_3D (_2A Anum Anum) Anum"
DIV__SUB:"num", "fun", "bool", "_3C_3D", "_3C", "_2D", "_2A", "DIV", "=", "0", "0", "Anum", "DIV (_2D Anum (_2A Anum Anum)) Anum", "DIV Anum Anum", "_2A Anum Anum", "_2D (DIV Anum Anum) Anum", "_2D Anum (_2A Anum Anum)", "_3C 0 Anum", "_3C_3D (_2A Anum Anum) Anum"
DIVMOD__CORRECT:"prod", "num", "fun", "bool", "_3C", "_2C", "_2B", "MOD", "DIVMOD", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "DIVMOD (_2C Anum (_2C Anum Anum))", "MOD Anum Anum", "_2B Anum (DIV Anum Anum)", "_2C (_2B Anum (DIV Anum Anum)) (MOD Anum Anum)", "_2C Anum (_2C Anum Anum)", "_2C Anum Anum", "_3C 0 Anum"
DIVMOD__CALC__0:"prod", "num", "fun", "bool", "_3C", "_2C", "FST", "DIVMOD", "DIV", "=", "0", "0", "Anum", "DIV Anum Anum", "DIVMOD (_2C 0 (_2C Anum Anum))", "FST (DIVMOD (_2C 0 (_2C Anum Anum)))", "_2C 0 (_2C Anum Anum)", "_2C Anum Anum", "_3C 0 Anum"
DIVMOD__CALC__e1:"prod", "num", "fun", "bool", "_3C", "_2C", "SND", "MOD", "DIVMOD", "=", "0", "0", "Anum", "DIVMOD (_2C 0 (_2C Anum Anum))", "MOD Anum Anum", "SND (DIVMOD (_2C 0 (_2C Anum Anum)))", "_2C 0 (_2C Anum Anum)", "_2C Anum Anum", "_3C 0 Anum"
MODEQ__DEF:"num", "fun", "bool", "_2B", "_2A", "MODEQ", "=", "Anum", "MODEQ Anum Anum Anum", "MODEQ Anum Anum Anum <=> (?Anum Anum. _2B (_2A Anum Anum) Anum = _2B (_2A Anum Anum) Anum)", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum"
MODEQ__0__CONG:"num", "fun", "bool", "MODEQ", "=", "0", "0", "Anum", "MODEQ 0 Anum Anum", "MODEQ 0 Anum Anum <=> Anum = Anum"
MODEQ__NONZERO__MODEQUALITY:"num", "fun", "bool", "_3C", "MODEQ", "MOD", "=", "0", "0", "Anum", "MOD Anum Anum", "MODEQ Anum Anum Anum", "MODEQ Anum Anum Anum <=> MOD Anum Anum = MOD Anum Anum", "_3C 0 Anum"
MODEQ__THM:"num", "fun", "bool", "_3C", "MODEQ", "MOD", "=", "0", "0", "Anum", "MOD Anum Anum", "MODEQ Anum Anum Anum", "MODEQ Anum Anum Anum <=> Anum = 0 /\ Anum = Anum \/ _3C 0 Anum /\ MOD Anum Anum = MOD Anum Anum", "_3C 0 Anum"
MODEQ__INTRO__CONG:"num", "fun", "bool", "_3C", "MODEQ", "MOD", "=", "0", "0", "Anum", "MOD Anum Anum", "MODEQ Anum Anum Anum", "_3C 0 Anum"
MODEQ__PLUS__CONG:"num", "fun", "bool", "_2B", "MODEQ", "Anum", "MODEQ Anum (_2B Anum Anum) (_2B Anum Anum)", "MODEQ Anum Anum Anum", "_2B Anum Anum"
MODEQ__MULT__CONG:"num", "fun", "bool", "_2A", "MODEQ", "Anum", "MODEQ Anum (_2A Anum Anum) (_2A Anum Anum)", "MODEQ Anum Anum Anum", "_2A Anum Anum"
MODEQ__REFL:"num", "fun", "bool", "MODEQ", "Anum", "MODEQ Anum Anum Anum"
MODEQ__SYM:"num", "fun", "bool", "MODEQ", "=", "Anum", "MODEQ Anum Anum Anum", "MODEQ Anum Anum Anum <=> MODEQ Anum Anum Anum"
MODEQ__TRANS:"num", "fun", "bool", "MODEQ", "Anum", "MODEQ Anum Anum Anum"
MODEQ__NUMERAL__0:"num", "fun", "bool", "_3C_3D", "NUMERAL", "MODEQ", "MOD", "BIT1", "Anum", "BIT1 Anum", "MOD (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 Anum))", "MODEQ (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 Anum)) (MOD (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 Anum)))", "NUMERAL (BIT1 Anum)", "NUMERAL Anum", "_3C_3D (NUMERAL Anum) (NUMERAL Anum)"
MODEQ__NUMERAL__1:"num", "fun", "bool", "_3C_3D", "NUMERAL", "MODEQ", "MOD", "BIT2", "BIT1", "Anum", "BIT1 Anum", "BIT2 Anum", "MOD (NUMERAL (BIT2 Anum)) (NUMERAL (BIT1 Anum))", "MODEQ (NUMERAL (BIT1 Anum)) (NUMERAL (BIT2 Anum)) (MOD (NUMERAL (BIT2 Anum)) (NUMERAL (BIT1 Anum)))", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)", "NUMERAL Anum", "_3C_3D (NUMERAL Anum) (NUMERAL Anum)"
MODEQ__NUMERAL__2:"num", "fun", "bool", "_3C_3D", "NUMERAL", "MODEQ", "MOD", "BIT2", "Anum", "BIT2 Anum", "MOD (NUMERAL (BIT2 Anum)) (NUMERAL (BIT2 Anum))", "MODEQ (NUMERAL (BIT2 Anum)) (NUMERAL (BIT2 Anum)) (MOD (NUMERAL (BIT2 Anum)) (NUMERAL (BIT2 Anum)))", "NUMERAL (BIT2 Anum)", "NUMERAL Anum", "_3C_3D (NUMERAL Anum) (NUMERAL Anum)"
MODEQ__NUMERAL__e3:"num", "fun", "bool", "_3C", "NUMERAL", "MODEQ", "MOD", "BIT2", "BIT1", "Anum", "BIT1 Anum", "BIT2 Anum", "MOD (NUMERAL (BIT1 Anum)) (NUMERAL (BIT2 Anum))", "MODEQ (NUMERAL (BIT2 Anum)) (NUMERAL (BIT1 Anum)) (MOD (NUMERAL (BIT1 Anum)) (NUMERAL (BIT2 Anum)))", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)", "NUMERAL Anum", "_3C (NUMERAL Anum) (NUMERAL Anum)"
MODEQ__MOD:"num", "fun", "bool", "_3C", "MODEQ", "MOD", "0", "0", "Anum", "MOD Anum Anum", "MODEQ Anum (MOD Anum Anum) Anum", "_3C 0 Anum"
MODEQ__0:"num", "fun", "bool", "_3C", "MODEQ", "0", "0", "Anum", "MODEQ Anum Anum 0", "_3C 0 Anum"
datatype__num:"num", "fun", "bool", "SUC", "DATATYPE", "0", "0", "Anum->(num->num)->A 0 SUC", "DATATYPE (Anum->(num->num)->A 0 SUC)", "SUC"
ITERATION:"fun", "bool", "COND", "=", "AA", "AA->A (AA->A AA)", "AA->A AA", "AA->bool AA", "if AA->bool AA then AA else AA->A (AA->A AA)"
WHILE0:"fun", "bool", "WHILE", "COND", "=", "AA", "AA->A", "AA->A AA", "AA->bool", "AA->bool AA", "WHILE AA->bool AA->A (AA->A AA)", "WHILE AA->bool AA->A AA", "if AA->bool AA then WHILE AA->bool AA->A (AA->A AA) else AA"
WHILE__INDUCTION:"fun", "bool", "WF", "AA", "AA->A AA", "AA->A->bool", "AA->A->bool (AA->A AA) AA", "AA->bool (AA->A AA)", "AA->bool AA", "WF AA->A->bool"
HOARE__SPEC__DEF:"fun", "bool", "HOARE__SPEC", "=", "AA->bool", "AA->bool (AB->A AB)", "AB", "AB->A", "AB->A AB", "AB->bool", "AB->bool AB", "HOARE__SPEC AB->bool AB->A AA->bool", "HOARE__SPEC AB->bool AB->A AA->bool <=> (!AB. AB->bool AB ==> AA->bool (AB->A AB))"
WHILE__RULE:"fun", "bool", "~", "WHILE", "WF", "HOARE__SPEC", "AA", "AA->A", "AA->A AA", "AA->A->bool", "AA->A->bool (AA->A AA) AA", "AA->bool", "AA->bool AA", "HOARE__SPEC (\AA. AA->bool AA /\ AA->bool AA) AA->A AA->bool", "HOARE__SPEC AA->bool (WHILE AA->bool AA->A) (\AA. AA->bool AA /\ ~AA->bool AA)", "WF AA->A->bool", "WHILE AA->bool AA->A"
LEAST__DEF:"num", "fun", "bool", "o", "WHILE", "SUC", "LEAST", "=", "0", "$not", "$not", "0", "Anum->bool", "LEAST Anum->bool", "SUC", "WHILE (o $not Anum->bool) SUC 0", "o $not Anum->bool"
LEAST__INTRO:"num", "fun", "bool", "LEAST", "Anum", "Anum->bool", "Anum->bool (LEAST Anum->bool)", "Anum->bool Anum", "LEAST Anum->bool"
LESS__LEAST:"num", "fun", "bool", "~", "_3C", "LEAST", "Anum", "Anum->bool", "Anum->bool Anum", "LEAST Anum->bool", "_3C Anum (LEAST Anum->bool)"
FULL__LEAST__INTRO:"num", "fun", "bool", "_3C_3D", "LEAST", "Anum", "Anum->bool", "Anum->bool (LEAST Anum->bool)", "Anum->bool Anum", "LEAST Anum->bool", "_3C_3D (LEAST Anum->bool) Anum"
LEAST__ELIM:"num", "fun", "bool", "~", "_3C", "LEAST", "Anum", "Anum->bool", "Anum->bool (LEAST Anum->bool)", "Anum->bool Anum", "LEAST Anum->bool", "_3C Anum Anum"
LEAST__EXISTS:"num", "fun", "bool", "~", "_3C", "LEAST", "=", "(?Anum. Anum->bool Anum) <=> Anum->bool (LEAST Anum->bool) /\ (!Anum. _3C Anum (LEAST Anum->bool) ==> ~Anum->bool Anum)", "Anum", "Anum->bool", "Anum->bool (LEAST Anum->bool)", "Anum->bool Anum", "LEAST Anum->bool", "_3C Anum (LEAST Anum->bool)"
LEAST__EXISTS__IMP:"num", "fun", "bool", "~", "_3C", "LEAST", "Anum", "Anum->bool", "Anum->bool (LEAST Anum->bool)", "Anum->bool Anum", "LEAST Anum->bool", "_3C Anum (LEAST Anum->bool)"
LEAST__EQ__0:"num", "fun", "bool", "LEAST", "=", "Anum", "LEAST (\Anum. Anum = Anum)"
LEAST__EQ__e1:"num", "fun", "bool", "LEAST", "=", "Anum", "LEAST (\Anum. Anum = Anum)"
LEAST__T:"num", "fun", "bool", "T", "LEAST", "=", "0", "0", "LEAST (\Anum. T)", "T"
OLEAST__def:"option", "num", "fun", "bool", "SOME", "OLEAST", "NONE", "LEAST", "COND", "=", "Anum", "Anum->bool", "Anum->bool Anum", "LEAST (\Anum. Anum->bool Anum)", "NONE", "OLEAST Anum->bool", "SOME (LEAST (\Anum. Anum->bool Anum))", "if ?Anum. Anum->bool Anum then SOME (LEAST (\Anum. Anum->bool Anum)) else NONE"
OLEAST__INTRO:"option", "num", "fun", "bool", "~", "_3C", "SOME", "OLEAST", "NONE", "A(num)option->bool (OLEAST Anum->bool)", "A(num)option->bool (SOME Anum)", "A(num)option->bool NONE", "Anum", "Anum->bool", "Anum->bool Anum", "NONE", "OLEAST Anum->bool", "SOME Anum", "_3C Anum Anum"
OLEAST__EQNS__0:"option", "num", "fun", "bool", "SOME", "OLEAST", "=", "Anum", "OLEAST (\Anum. Anum = Anum)", "SOME Anum"
OLEAST__EQNS__1:"option", "num", "fun", "bool", "SOME", "OLEAST", "=", "Anum", "OLEAST (\Anum. Anum = Anum)", "SOME Anum"
OLEAST__EQNS__2:"option", "num", "fun", "bool", "OLEAST", "NONE", "F", "=", "F", "NONE", "OLEAST (\Anum. F)"
OLEAST__EQNS__e3:"option", "num", "fun", "bool", "T", "SOME", "OLEAST", "=", "0", "0", "OLEAST (\Anum. T)", "SOME 0", "T"
OWHILE__def:"option", "num", "fun", "bool", "~", "SOME", "OWHILE", "NONE", "LEAST", "FUNPOW", "COND", "=", "AA", "AA->A", "AA->bool", "AA->bool (FUNPOW AA->A Anum AA)", "Anum", "FUNPOW AA->A (LEAST (\Anum. ~AA->bool (FUNPOW AA->A Anum AA))) AA", "FUNPOW AA->A Anum AA", "LEAST (\Anum. ~AA->bool (FUNPOW AA->A Anum AA))", "NONE", "OWHILE AA->bool AA->A AA", "SOME (FUNPOW AA->A (LEAST (\Anum. ~AA->bool (FUNPOW AA->A Anum AA))) AA)", "if ?Anum. ~AA->bool (FUNPOW AA->A Anum AA) then SOME (FUNPOW AA->A (LEAST (\Anum. ~AA->bool (FUNPOW AA->A Anum AA))) AA) else NONE"
OWHILE__THM:"option", "fun", "bool", "SOME", "OWHILE", "COND", "=", "AA", "AA->A", "AA->A AA", "AA->bool", "AA->bool AA", "OWHILE AA->bool AA->A (AA->A AA)", "OWHILE AA->bool AA->A AA", "SOME AA", "if AA->bool AA then OWHILE AA->bool AA->A (AA->A AA) else SOME AA"
OWHILE__EQ__NONE:"option", "num", "fun", "bool", "OWHILE", "NONE", "FUNPOW", "=", "AA", "AA->A", "AA->bool", "AA->bool (FUNPOW AA->A Anum AA)", "Anum", "FUNPOW AA->A Anum AA", "NONE", "OWHILE AA->bool AA->A AA", "OWHILE AA->bool AA->A AA = NONE <=> (!Anum. AA->bool (FUNPOW AA->A Anum AA))"
OWHILE__ENDCOND:"option", "fun", "bool", "~", "SOME", "OWHILE", "=", "AA", "AA->A", "AA->bool", "AA->bool AA", "OWHILE AA->bool AA->A AA", "SOME AA"
OWHILE__WHILE:"option", "fun", "bool", "WHILE", "SOME", "OWHILE", "=", "AA", "AA->A", "AA->bool", "OWHILE AA->bool AA->A AA", "SOME AA", "WHILE AA->bool AA->A AA"
OWHILE__INV__IND:"option", "fun", "bool", "SOME", "OWHILE", "=", "AA", "AA->A", "AA->A AA", "AA->bool", "AA->bool (AA->A AA)", "AA->bool AA", "OWHILE AA->bool AA->A AA", "SOME AA"
OWHILE__IND:"option", "fun", "bool", "~", "SOME", "OWHILE", "=", "AA", "AA->A", "AA->A AA", "AA->A->bool (AA->A AA) AA", "AA->A->bool AA AA", "AA->bool", "AA->bool AA", "OWHILE AA->bool AA->A AA", "SOME AA"
numeral__suc__0:"num", "fun", "bool", "ZERO", "SUC", "BIT1", "=", "BIT1 ZERO", "SUC ZERO", "ZERO"
numeral__suc__1:"num", "fun", "bool", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "SUC (BIT1 Anum)"
numeral__suc__e2:"num", "fun", "bool", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 (SUC Anum)", "BIT2 Anum", "SUC (BIT2 Anum)", "SUC Anum"
iZ0:"num", "fun", "bool", "iZ", "=", "Anum", "iZ Anum"
iiSUC0:"num", "fun", "bool", "iiSUC", "SUC", "=", "Anum", "SUC (SUC Anum)", "SUC Anum", "iiSUC Anum"
numeral__distrib__0:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B 0 Anum"
numeral__distrib__1:"num", "fun", "bool", "_2B", "=", "0", "0", "Anum", "_2B Anum 0"
numeral__distrib__2:"num", "fun", "bool", "iZ", "_2B", "NUMERAL", "=", "Anum", "NUMERAL (iZ (_2B Anum Anum))", "NUMERAL Anum", "_2B (NUMERAL Anum) (NUMERAL Anum)", "_2B Anum Anum", "iZ (_2B Anum Anum)"
numeral__distrib__3:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A 0 Anum"
numeral__distrib__4:"num", "fun", "bool", "_2A", "=", "0", "0", "Anum", "_2A Anum 0"
numeral__distrib__5:"num", "fun", "bool", "_2A", "NUMERAL", "=", "Anum", "NUMERAL (_2A Anum Anum)", "NUMERAL Anum", "_2A (NUMERAL Anum) (NUMERAL Anum)", "_2A Anum Anum"
numeral__distrib__6:"num", "fun", "bool", "_2D", "=", "0", "0", "Anum", "_2D 0 Anum"
numeral__distrib__7:"num", "fun", "bool", "_2D", "=", "0", "0", "Anum", "_2D Anum 0"
numeral__distrib__8:"num", "fun", "bool", "_2D", "NUMERAL", "=", "Anum", "NUMERAL (_2D Anum Anum)", "NUMERAL Anum", "_2D (NUMERAL Anum) (NUMERAL Anum)", "_2D Anum Anum"
numeral__distrib__9:"num", "fun", "bool", "NUMERAL", "EXP", "BIT1", "=", "0", "0", "Anum", "BIT1 Anum", "EXP 0 (NUMERAL (BIT1 Anum))", "NUMERAL (BIT1 Anum)"
numeral__distrib__10:"num", "fun", "bool", "NUMERAL", "EXP", "BIT2", "=", "0", "0", "Anum", "BIT2 Anum", "EXP 0 (NUMERAL (BIT2 Anum))", "NUMERAL (BIT2 Anum)"
numeral__distrib__11:"num", "fun", "bool", "ZERO", "NUMERAL", "EXP", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "EXP Anum 0", "NUMERAL (BIT1 ZERO)", "ZERO"
numeral__distrib__12:"num", "fun", "bool", "NUMERAL", "EXP", "=", "Anum", "EXP (NUMERAL Anum) (NUMERAL Anum)", "EXP Anum Anum", "NUMERAL (EXP Anum Anum)", "NUMERAL Anum"
numeral__distrib__13:"num", "fun", "bool", "ZERO", "SUC", "NUMERAL", "BIT1", "=", "0", "0", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "SUC 0", "ZERO"
numeral__distrib__14:"num", "fun", "bool", "SUC", "NUMERAL", "=", "Anum", "NUMERAL (SUC Anum)", "NUMERAL Anum", "SUC (NUMERAL Anum)", "SUC Anum"
numeral__distrib__15:"num", "fun", "bool", "PRE", "=", "0", "0", "PRE 0"
numeral__distrib__16:"num", "fun", "bool", "PRE", "NUMERAL", "=", "Anum", "NUMERAL (PRE Anum)", "NUMERAL Anum", "PRE (NUMERAL Anum)", "PRE Anum"
numeral__distrib__17:"num", "fun", "bool", "ZERO", "NUMERAL", "=", "0", "0", "Anum", "NUMERAL Anum", "NUMERAL Anum = 0 <=> Anum = ZERO", "ZERO"
numeral__distrib__18:"num", "fun", "bool", "ZERO", "NUMERAL", "=", "0", "0", "0 = NUMERAL Anum <=> Anum = ZERO", "Anum", "NUMERAL Anum", "ZERO"
numeral__distrib__19:"num", "fun", "bool", "NUMERAL", "=", "Anum", "NUMERAL Anum", "NUMERAL Anum = NUMERAL Anum <=> Anum = Anum"
numeral__distrib__20:"num", "fun", "bool", "_3C", "F", "=", "0", "0", "Anum", "F", "_3C Anum 0", "_3C Anum 0 <=> F"
numeral__distrib__21:"num", "fun", "bool", "_3C", "ZERO", "NUMERAL", "=", "0", "0", "Anum", "NUMERAL Anum", "ZERO", "_3C 0 (NUMERAL Anum)", "_3C 0 (NUMERAL Anum) <=> _3C ZERO Anum", "_3C ZERO Anum"
numeral__distrib__22:"num", "fun", "bool", "_3C", "NUMERAL", "=", "Anum", "NUMERAL Anum", "_3C (NUMERAL Anum) (NUMERAL Anum)", "_3C (NUMERAL Anum) (NUMERAL Anum) <=> _3C Anum Anum", "_3C Anum Anum"
numeral__distrib__23:"num", "fun", "bool", "_3E", "F", "=", "0", "0", "Anum", "F", "_3E 0 Anum", "_3E 0 Anum <=> F"
numeral__distrib__24:"num", "fun", "bool", "_3E", "_3C", "ZERO", "NUMERAL", "=", "0", "0", "Anum", "NUMERAL Anum", "ZERO", "_3C ZERO Anum", "_3E (NUMERAL Anum) 0", "_3E (NUMERAL Anum) 0 <=> _3C ZERO Anum"
numeral__distrib__25:"num", "fun", "bool", "_3E", "_3C", "NUMERAL", "=", "Anum", "NUMERAL Anum", "_3C Anum Anum", "_3E (NUMERAL Anum) (NUMERAL Anum)", "_3E (NUMERAL Anum) (NUMERAL Anum) <=> _3C Anum Anum"
numeral__distrib__26:"num", "fun", "bool", "_3C_3D", "T", "=", "0", "0", "Anum", "T", "_3C_3D 0 Anum", "_3C_3D 0 Anum <=> T"
numeral__distrib__27:"num", "fun", "bool", "_3C_3D", "ZERO", "NUMERAL", "=", "0", "0", "Anum", "NUMERAL Anum", "ZERO", "_3C_3D (NUMERAL Anum) 0", "_3C_3D (NUMERAL Anum) 0 <=> _3C_3D Anum ZERO", "_3C_3D Anum ZERO"
numeral__distrib__28:"num", "fun", "bool", "_3C_3D", "NUMERAL", "=", "Anum", "NUMERAL Anum", "_3C_3D (NUMERAL Anum) (NUMERAL Anum)", "_3C_3D (NUMERAL Anum) (NUMERAL Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
numeral__distrib__29:"num", "fun", "bool", "_3E_3D", "T", "=", "0", "0", "Anum", "T", "_3E_3D Anum 0", "_3E_3D Anum 0 <=> T"
numeral__distrib__30:"num", "fun", "bool", "_3E_3D", "=", "0", "0", "Anum", "_3E_3D 0 Anum", "_3E_3D 0 Anum <=> Anum = 0"
numeral__distrib__31:"num", "fun", "bool", "_3E_3D", "_3C_3D", "NUMERAL", "=", "Anum", "NUMERAL Anum", "_3C_3D Anum Anum", "_3E_3D (NUMERAL Anum) (NUMERAL Anum)", "_3E_3D (NUMERAL Anum) (NUMERAL Anum) <=> _3C_3D Anum Anum"
numeral__distrib__32:"num", "fun", "bool", "ODD", "NUMERAL", "=", "Anum", "NUMERAL Anum", "ODD (NUMERAL Anum)", "ODD (NUMERAL Anum) <=> ODD Anum", "ODD Anum"
numeral__distrib__33:"num", "fun", "bool", "NUMERAL", "EVEN", "=", "Anum", "EVEN (NUMERAL Anum)", "EVEN (NUMERAL Anum) <=> EVEN Anum", "EVEN Anum", "NUMERAL Anum"
numeral__distrib__34:"num", "fun", "bool", "~", "ODD", "0", "0", "ODD 0"
numeral__distrib__e35:"num", "fun", "bool", "EVEN", "0", "0", "EVEN 0"
numeral__iisuc__0:"num", "fun", "bool", "iiSUC", "ZERO", "BIT2", "=", "BIT2 ZERO", "ZERO", "iiSUC ZERO"
numeral__iisuc__1:"num", "fun", "bool", "iiSUC", "SUC", "BIT1", "=", "Anum", "BIT1 (SUC Anum)", "BIT1 Anum", "SUC Anum", "iiSUC (BIT1 Anum)"
numeral__iisuc__e2:"num", "fun", "bool", "iiSUC", "SUC", "BIT2", "=", "Anum", "BIT2 (SUC Anum)", "BIT2 Anum", "SUC Anum", "iiSUC (BIT2 Anum)"
numeral__add__0:"num", "fun", "bool", "iZ", "_2B", "ZERO", "=", "Anum", "ZERO", "_2B ZERO Anum", "iZ (_2B ZERO Anum)"
numeral__add__1:"num", "fun", "bool", "iZ", "_2B", "ZERO", "=", "Anum", "ZERO", "_2B Anum ZERO", "iZ (_2B Anum ZERO)"
numeral__add__2:"num", "fun", "bool", "iZ", "_2B", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 (iZ (_2B Anum Anum))", "_2B (BIT1 Anum) (BIT1 Anum)", "_2B Anum Anum", "iZ (_2B (BIT1 Anum) (BIT1 Anum))", "iZ (_2B Anum Anum)"
numeral__add__3:"num", "fun", "bool", "iZ", "_2B", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 (SUC (_2B Anum Anum))", "BIT1 Anum", "BIT2 Anum", "SUC (_2B Anum Anum)", "_2B (BIT1 Anum) (BIT2 Anum)", "_2B Anum Anum", "iZ (_2B (BIT1 Anum) (BIT2 Anum))"
numeral__add__4:"num", "fun", "bool", "iZ", "_2B", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 (SUC (_2B Anum Anum))", "BIT1 Anum", "BIT2 Anum", "SUC (_2B Anum Anum)", "_2B (BIT2 Anum) (BIT1 Anum)", "_2B Anum Anum", "iZ (_2B (BIT2 Anum) (BIT1 Anum))"
numeral__add__5:"num", "fun", "bool", "iZ", "_2B", "SUC", "BIT2", "=", "Anum", "BIT2 (SUC (_2B Anum Anum))", "BIT2 Anum", "SUC (_2B Anum Anum)", "_2B (BIT2 Anum) (BIT2 Anum)", "_2B Anum Anum", "iZ (_2B (BIT2 Anum) (BIT2 Anum))"
numeral__add__6:"num", "fun", "bool", "_2B", "ZERO", "SUC", "=", "Anum", "SUC (_2B ZERO Anum)", "SUC Anum", "ZERO", "_2B ZERO Anum"
numeral__add__7:"num", "fun", "bool", "_2B", "ZERO", "SUC", "=", "Anum", "SUC (_2B Anum ZERO)", "SUC Anum", "ZERO", "_2B Anum ZERO"
numeral__add__8:"num", "fun", "bool", "_2B", "SUC", "BIT1", "=", "Anum", "BIT1 (SUC (_2B Anum Anum))", "BIT1 Anum", "SUC (_2B (BIT1 Anum) (BIT1 Anum))", "SUC (_2B Anum Anum)", "_2B (BIT1 Anum) (BIT1 Anum)", "_2B Anum Anum"
numeral__add__9:"num", "fun", "bool", "_2B", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 (SUC (_2B Anum Anum))", "BIT2 Anum", "SUC (_2B (BIT1 Anum) (BIT2 Anum))", "SUC (_2B Anum Anum)", "_2B (BIT1 Anum) (BIT2 Anum)", "_2B Anum Anum"
numeral__add__10:"num", "fun", "bool", "_2B", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 (SUC (_2B Anum Anum))", "BIT2 Anum", "SUC (_2B (BIT2 Anum) (BIT1 Anum))", "SUC (_2B Anum Anum)", "_2B (BIT2 Anum) (BIT1 Anum)", "_2B Anum Anum"
numeral__add__11:"num", "fun", "bool", "iiSUC", "_2B", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 (iiSUC (_2B Anum Anum))", "BIT2 Anum", "SUC (_2B (BIT2 Anum) (BIT2 Anum))", "_2B (BIT2 Anum) (BIT2 Anum)", "_2B Anum Anum", "iiSUC (_2B Anum Anum)"
numeral__add__12:"num", "fun", "bool", "iiSUC", "_2B", "ZERO", "=", "Anum", "ZERO", "_2B ZERO Anum", "iiSUC (_2B ZERO Anum)", "iiSUC Anum"
numeral__add__13:"num", "fun", "bool", "iiSUC", "_2B", "ZERO", "=", "Anum", "ZERO", "_2B Anum ZERO", "iiSUC (_2B Anum ZERO)", "iiSUC Anum"
numeral__add__14:"num", "fun", "bool", "iiSUC", "_2B", "SUC", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 (SUC (_2B Anum Anum))", "SUC (_2B Anum Anum)", "_2B (BIT1 Anum) (BIT1 Anum)", "_2B Anum Anum", "iiSUC (_2B (BIT1 Anum) (BIT1 Anum))"
numeral__add__15:"num", "fun", "bool", "iiSUC", "_2B", "BIT2", "BIT1", "=", "Anum", "BIT1 (iiSUC (_2B Anum Anum))", "BIT1 Anum", "BIT2 Anum", "_2B (BIT1 Anum) (BIT2 Anum)", "_2B Anum Anum", "iiSUC (_2B (BIT1 Anum) (BIT2 Anum))", "iiSUC (_2B Anum Anum)"
numeral__add__16:"num", "fun", "bool", "iiSUC", "_2B", "BIT2", "BIT1", "=", "Anum", "BIT1 (iiSUC (_2B Anum Anum))", "BIT1 Anum", "BIT2 Anum", "_2B (BIT2 Anum) (BIT1 Anum)", "_2B Anum Anum", "iiSUC (_2B (BIT2 Anum) (BIT1 Anum))", "iiSUC (_2B Anum Anum)"
numeral__add__e17:"num", "fun", "bool", "iiSUC", "_2B", "BIT2", "=", "Anum", "BIT2 (iiSUC (_2B Anum Anum))", "BIT2 Anum", "_2B (BIT2 Anum) (BIT2 Anum)", "_2B Anum Anum", "iiSUC (_2B (BIT2 Anum) (BIT2 Anum))", "iiSUC (_2B Anum Anum)"
numeral__eq__0:"num", "fun", "bool", "ZERO", "F", "BIT1", "=", "Anum", "BIT1 Anum", "F", "ZERO", "ZERO = BIT1 Anum <=> F"
numeral__eq__1:"num", "fun", "bool", "ZERO", "F", "BIT1", "=", "Anum", "BIT1 Anum", "BIT1 Anum = ZERO <=> F", "F", "ZERO"
numeral__eq__2:"num", "fun", "bool", "ZERO", "F", "BIT2", "=", "Anum", "BIT2 Anum", "F", "ZERO", "ZERO = BIT2 Anum <=> F"
numeral__eq__3:"num", "fun", "bool", "ZERO", "F", "BIT2", "=", "Anum", "BIT2 Anum", "BIT2 Anum = ZERO <=> F", "F", "ZERO"
numeral__eq__4:"num", "fun", "bool", "F", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT1 Anum = BIT2 Anum <=> F", "BIT2 Anum", "F"
numeral__eq__5:"num", "fun", "bool", "F", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "BIT2 Anum = BIT1 Anum <=> F", "F"
numeral__eq__6:"num", "fun", "bool", "BIT1", "=", "Anum", "BIT1 Anum", "BIT1 Anum = BIT1 Anum <=> Anum = Anum"
numeral__eq__e7:"num", "fun", "bool", "BIT2", "=", "Anum", "BIT2 Anum", "BIT2 Anum = BIT2 Anum <=> Anum = Anum"
numeral__lt__0:"num", "fun", "bool", "_3C", "ZERO", "T", "BIT1", "=", "Anum", "BIT1 Anum", "T", "ZERO", "_3C ZERO (BIT1 Anum)", "_3C ZERO (BIT1 Anum) <=> T"
numeral__lt__1:"num", "fun", "bool", "_3C", "ZERO", "T", "BIT2", "=", "Anum", "BIT2 Anum", "T", "ZERO", "_3C ZERO (BIT2 Anum)", "_3C ZERO (BIT2 Anum) <=> T"
numeral__lt__2:"num", "fun", "bool", "_3C", "ZERO", "F", "=", "Anum", "F", "ZERO", "_3C Anum ZERO", "_3C Anum ZERO <=> F"
numeral__lt__3:"num", "fun", "bool", "_3C", "BIT1", "=", "Anum", "BIT1 Anum", "_3C (BIT1 Anum) (BIT1 Anum)", "_3C (BIT1 Anum) (BIT1 Anum) <=> _3C Anum Anum", "_3C Anum Anum"
numeral__lt__4:"num", "fun", "bool", "_3C", "BIT2", "=", "Anum", "BIT2 Anum", "_3C (BIT2 Anum) (BIT2 Anum)", "_3C (BIT2 Anum) (BIT2 Anum) <=> _3C Anum Anum", "_3C Anum Anum"
numeral__lt__5:"num", "fun", "bool", "~", "_3C", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "_3C (BIT1 Anum) (BIT2 Anum)", "_3C (BIT1 Anum) (BIT2 Anum) <=> ~_3C Anum Anum", "_3C Anum Anum"
numeral__lt__e6:"num", "fun", "bool", "_3C", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "_3C (BIT2 Anum) (BIT1 Anum)", "_3C (BIT2 Anum) (BIT1 Anum) <=> _3C Anum Anum", "_3C Anum Anum"
numeral__lte__0:"num", "fun", "bool", "_3C_3D", "ZERO", "T", "=", "Anum", "T", "ZERO", "_3C_3D ZERO Anum", "_3C_3D ZERO Anum <=> T"
numeral__lte__1:"num", "fun", "bool", "_3C_3D", "ZERO", "F", "BIT1", "=", "Anum", "BIT1 Anum", "F", "ZERO", "_3C_3D (BIT1 Anum) ZERO", "_3C_3D (BIT1 Anum) ZERO <=> F"
numeral__lte__2:"num", "fun", "bool", "_3C_3D", "ZERO", "F", "BIT2", "=", "Anum", "BIT2 Anum", "F", "ZERO", "_3C_3D (BIT2 Anum) ZERO", "_3C_3D (BIT2 Anum) ZERO <=> F"
numeral__lte__3:"num", "fun", "bool", "_3C_3D", "BIT1", "=", "Anum", "BIT1 Anum", "_3C_3D (BIT1 Anum) (BIT1 Anum)", "_3C_3D (BIT1 Anum) (BIT1 Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
numeral__lte__4:"num", "fun", "bool", "_3C_3D", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "_3C_3D (BIT1 Anum) (BIT2 Anum)", "_3C_3D (BIT1 Anum) (BIT2 Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
numeral__lte__5:"num", "fun", "bool", "~", "_3C_3D", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "_3C_3D (BIT2 Anum) (BIT1 Anum)", "_3C_3D (BIT2 Anum) (BIT1 Anum) <=> ~_3C_3D Anum Anum", "_3C_3D Anum Anum"
numeral__lte__e6:"num", "fun", "bool", "_3C_3D", "BIT2", "=", "Anum", "BIT2 Anum", "_3C_3D (BIT2 Anum) (BIT2 Anum)", "_3C_3D (BIT2 Anum) (BIT2 Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum"
numeral__pre__0:"num", "fun", "bool", "ZERO", "PRE", "=", "PRE ZERO", "ZERO"
numeral__pre__1:"num", "fun", "bool", "ZERO", "PRE", "BIT1", "=", "BIT1 ZERO", "PRE (BIT1 ZERO)", "ZERO"
numeral__pre__2:"num", "fun", "bool", "PRE", "BIT2", "BIT1", "=", "Anum", "BIT1 (BIT1 Anum)", "BIT1 Anum", "BIT2 (PRE (BIT1 Anum))", "PRE (BIT1 (BIT1 Anum))", "PRE (BIT1 Anum)"
numeral__pre__3:"num", "fun", "bool", "PRE", "BIT2", "BIT1", "=", "Anum", "BIT1 (BIT2 Anum)", "BIT1 Anum", "BIT2 (BIT1 Anum)", "BIT2 Anum", "PRE (BIT1 (BIT2 Anum))"
numeral__pre__e4:"num", "fun", "bool", "PRE", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "PRE (BIT2 Anum)"
bit__initiality:"num", "fun", "bool", "ZERO", "BIT2", "BIT1", "=", "AA", "Anum", "Anum->A (BIT1 Anum)", "Anum->A (BIT2 Anum)", "Anum->A Anum", "Anum->A ZERO", "Anum->A->A Anum (Anum->A Anum)", "BIT1 Anum", "BIT2 Anum", "ZERO"
iBIT__cases__0:"num", "fun", "bool", "iBIT__cases", "ZERO", "=", "AA", "Anum->A", "ZERO", "iBIT__cases ZERO AA Anum->A Anum->A"
iBIT__cases__1:"num", "fun", "bool", "iBIT__cases", "BIT1", "=", "AA", "Anum", "Anum->A", "Anum->A Anum", "BIT1 Anum", "iBIT__cases (BIT1 Anum) AA Anum->A Anum->A"
iBIT__cases__e2:"num", "fun", "bool", "iBIT__cases", "BIT2", "=", "AA", "Anum", "Anum->A", "Anum->A Anum", "BIT2 Anum", "iBIT__cases (BIT2 Anum) AA Anum->A Anum->A"
iDUB0:"num", "fun", "bool", "iDUB", "_2B", "=", "Anum", "_2B Anum Anum", "iDUB Anum"
iSUB__DEF__0:"num", "fun", "bool", "iSUB", "ZERO", "=", "Abool", "Anum", "ZERO", "iSUB Abool ZERO Anum"
iSUB__DEF__1:"num", "fun", "bool", "iSUB", "iDUB", "iBIT__cases", "T", "F", "COND", "BIT1", "=", "Abool", "Anum", "BIT1 (iSUB F Anum Anum)", "BIT1 Anum", "F", "T", "iBIT__cases Anum (BIT1 Anum) (\Anum. iDUB (iSUB T Anum Anum)) (\Anum. BIT1 (iSUB F Anum Anum))", "iBIT__cases Anum (iDUB Anum) (\Anum. BIT1 (iSUB F Anum Anum)) (\Anum. iDUB (iSUB F Anum Anum))", "iDUB (iSUB F Anum Anum)", "iDUB (iSUB T Anum Anum)", "iDUB Anum", "iSUB Abool (BIT1 Anum) Anum", "iSUB F Anum Anum", "iSUB T Anum Anum", "if Abool then iBIT__cases Anum (BIT1 Anum) (\Anum. iDUB (iSUB T Anum Anum)) (\Anum. BIT1 (iSUB F Anum Anum)) else iBIT__cases Anum (iDUB Anum) (\Anum. BIT1 (iSUB F Anum Anum)) (\Anum. iDUB (iSUB F Anum Anum))"
iSUB__DEF__e2:"num", "fun", "bool", "iSUB", "iDUB", "iBIT__cases", "T", "F", "COND", "BIT2", "BIT1", "=", "Abool", "Anum", "BIT1 (iSUB F Anum Anum)", "BIT1 (iSUB T Anum Anum)", "BIT1 Anum", "BIT2 Anum", "F", "T", "iBIT__cases Anum (BIT1 Anum) (\Anum. iDUB (iSUB T Anum Anum)) (\Anum. BIT1 (iSUB F Anum Anum))", "iBIT__cases Anum (BIT2 Anum) (\Anum. BIT1 (iSUB T Anum Anum)) (\Anum. iDUB (iSUB T Anum Anum))", "iDUB (iSUB T Anum Anum)", "iSUB Abool (BIT2 Anum) Anum", "iSUB F Anum Anum", "iSUB T Anum Anum", "if Abool then iBIT__cases Anum (BIT2 Anum) (\Anum. BIT1 (iSUB T Anum Anum)) (\Anum. iDUB (iSUB T Anum Anum)) else iBIT__cases Anum (BIT1 Anum) (\Anum. iDUB (iSUB T Anum Anum)) (\Anum. BIT1 (iSUB F Anum Anum))"
bit__induction:"num", "fun", "bool", "ZERO", "BIT2", "BIT1", "Anum", "Anum->bool (BIT1 Anum)", "Anum->bool (BIT2 Anum)", "Anum->bool Anum", "Anum->bool ZERO", "BIT1 Anum", "BIT2 Anum", "ZERO"
iSUB__THM__0:"num", "fun", "bool", "iSUB", "ZERO", "=", "Abool", "Anum", "ZERO", "iSUB Abool ZERO Anum"
iSUB__THM__1:"num", "fun", "bool", "iSUB", "ZERO", "T", "=", "Anum", "T", "ZERO", "iSUB T Anum ZERO"
iSUB__THM__2:"num", "fun", "bool", "iSUB", "iDUB", "ZERO", "F", "BIT1", "=", "Anum", "BIT1 Anum", "F", "ZERO", "iDUB Anum", "iSUB F (BIT1 Anum) ZERO"
iSUB__THM__3:"num", "fun", "bool", "iSUB", "iDUB", "T", "BIT1", "=", "Anum", "BIT1 Anum", "T", "iDUB (iSUB T Anum Anum)", "iSUB T (BIT1 Anum) (BIT1 Anum)", "iSUB T Anum Anum"
iSUB__THM__4:"num", "fun", "bool", "iSUB", "F", "BIT1", "=", "Anum", "BIT1 (iSUB F Anum Anum)", "BIT1 Anum", "F", "iSUB F (BIT1 Anum) (BIT1 Anum)", "iSUB F Anum Anum"
iSUB__THM__5:"num", "fun", "bool", "iSUB", "T", "F", "BIT2", "BIT1", "=", "Anum", "BIT1 (iSUB F Anum Anum)", "BIT1 Anum", "BIT2 Anum", "F", "T", "iSUB F Anum Anum", "iSUB T (BIT1 Anum) (BIT2 Anum)"
iSUB__THM__6:"num", "fun", "bool", "iSUB", "iDUB", "F", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "F", "iDUB (iSUB F Anum Anum)", "iSUB F (BIT1 Anum) (BIT2 Anum)", "iSUB F Anum Anum"
iSUB__THM__7:"num", "fun", "bool", "iSUB", "ZERO", "F", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "F", "ZERO", "iSUB F (BIT2 Anum) ZERO"
iSUB__THM__8:"num", "fun", "bool", "iSUB", "T", "BIT2", "BIT1", "=", "Anum", "BIT1 (iSUB T Anum Anum)", "BIT1 Anum", "BIT2 Anum", "T", "iSUB T (BIT2 Anum) (BIT1 Anum)", "iSUB T Anum Anum"
iSUB__THM__9:"num", "fun", "bool", "iSUB", "iDUB", "T", "F", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "F", "T", "iDUB (iSUB T Anum Anum)", "iSUB F (BIT2 Anum) (BIT1 Anum)", "iSUB T Anum Anum"
iSUB__THM__10:"num", "fun", "bool", "iSUB", "iDUB", "T", "BIT2", "=", "Anum", "BIT2 Anum", "T", "iDUB (iSUB T Anum Anum)", "iSUB T (BIT2 Anum) (BIT2 Anum)", "iSUB T Anum Anum"
iSUB__THM__e11:"num", "fun", "bool", "iSUB", "F", "BIT2", "BIT1", "=", "Anum", "BIT1 (iSUB F Anum Anum)", "BIT2 Anum", "F", "iSUB F (BIT2 Anum) (BIT2 Anum)", "iSUB F Anum Anum"
numeral__sub:"num", "fun", "bool", "iSUB", "_3C", "_2D", "T", "NUMERAL", "COND", "=", "0", "0", "Anum", "NUMERAL (_2D Anum Anum)", "NUMERAL (iSUB T Anum Anum)", "T", "_2D Anum Anum", "_3C Anum Anum", "iSUB T Anum Anum", "if _3C Anum Anum then NUMERAL (iSUB T Anum Anum) else 0"
iDUB__removal__0:"num", "fun", "bool", "iDUB", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 (iDUB Anum)", "iDUB (BIT1 Anum)", "iDUB Anum"
iDUB__removal__1:"num", "fun", "bool", "iDUB", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 (BIT1 Anum)", "BIT2 Anum", "iDUB (BIT2 Anum)"
iDUB__removal__e2:"num", "fun", "bool", "iDUB", "ZERO", "=", "ZERO", "iDUB ZERO"
numeral__mult__0:"num", "fun", "bool", "_2A", "ZERO", "=", "Anum", "ZERO", "_2A ZERO Anum"
numeral__mult__1:"num", "fun", "bool", "_2A", "ZERO", "=", "Anum", "ZERO", "_2A Anum ZERO"
numeral__mult__2:"num", "fun", "bool", "iZ", "iDUB", "_2B", "_2A", "BIT1", "=", "Anum", "BIT1 Anum", "_2A (BIT1 Anum) Anum", "_2A Anum Anum", "_2B (iDUB (_2A Anum Anum)) Anum", "iDUB (_2A Anum Anum)", "iZ (_2B (iDUB (_2A Anum Anum)) Anum)"
numeral__mult__e3:"num", "fun", "bool", "iZ", "iDUB", "_2B", "_2A", "BIT2", "=", "Anum", "BIT2 Anum", "_2A (BIT2 Anum) Anum", "_2A Anum Anum", "_2B (_2A Anum Anum) Anum", "iDUB (iZ (_2B (_2A Anum Anum) Anum))", "iZ (_2B (_2A Anum Anum) Anum)"
iSQR0:"num", "fun", "bool", "iSQR", "_2A", "=", "Anum", "_2A Anum Anum", "iSQR Anum"
numeral__exp__0:"num", "fun", "bool", "ZERO", "EXP", "BIT1", "=", "Anum", "BIT1 ZERO", "EXP Anum ZERO", "ZERO"
numeral__exp__1:"num", "fun", "bool", "iSQR", "_2A", "EXP", "BIT1", "=", "Anum", "BIT1 Anum", "EXP Anum (BIT1 Anum)", "EXP Anum Anum", "_2A Anum (iSQR (EXP Anum Anum))", "iSQR (EXP Anum Anum)"
numeral__exp__e2:"num", "fun", "bool", "iSQR", "_2A", "EXP", "BIT2", "=", "Anum", "BIT2 Anum", "EXP Anum (BIT2 Anum)", "EXP Anum Anum", "_2A (iSQR Anum) (iSQR (EXP Anum Anum))", "iSQR (EXP Anum Anum)", "iSQR Anum"
numeral__evenodd__0:"num", "fun", "bool", "ZERO", "EVEN", "EVEN ZERO", "ZERO"
numeral__evenodd__1:"num", "fun", "bool", "EVEN", "BIT2", "Anum", "BIT2 Anum", "EVEN (BIT2 Anum)"
numeral__evenodd__2:"num", "fun", "bool", "~", "EVEN", "BIT1", "Anum", "BIT1 Anum", "EVEN (BIT1 Anum)"
numeral__evenodd__3:"num", "fun", "bool", "~", "ZERO", "ODD", "ODD ZERO", "ZERO"
numeral__evenodd__4:"num", "fun", "bool", "~", "ODD", "BIT2", "Anum", "BIT2 Anum", "ODD (BIT2 Anum)"
numeral__evenodd__e5:"num", "fun", "bool", "ODD", "BIT1", "Anum", "BIT1 Anum", "ODD (BIT1 Anum)"
numeral__fact__0:"num", "fun", "bool", "ZERO", "NUMERAL", "FACT", "BIT1", "=", "0", "0", "BIT1 ZERO", "FACT 0", "NUMERAL (BIT1 ZERO)", "ZERO"
numeral__fact__1:"num", "fun", "bool", "_2A", "PRE", "NUMERAL", "FACT", "BIT1", "=", "Anum", "BIT1 Anum", "FACT (NUMERAL (BIT1 Anum))", "FACT (PRE (NUMERAL (BIT1 Anum)))", "NUMERAL (BIT1 Anum)", "PRE (NUMERAL (BIT1 Anum))", "_2A (NUMERAL (BIT1 Anum)) (FACT (PRE (NUMERAL (BIT1 Anum))))"
numeral__fact__e2:"num", "fun", "bool", "_2A", "NUMERAL", "FACT", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "FACT (NUMERAL (BIT1 Anum))", "FACT (NUMERAL (BIT2 Anum))", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)", "_2A (NUMERAL (BIT2 Anum)) (FACT (NUMERAL (BIT1 Anum)))"
numeral__funpow__0:"num", "fun", "bool", "FUNPOW", "=", "0", "0", "AA", "AA->A", "FUNPOW AA->A 0 AA"
numeral__funpow__1:"num", "fun", "bool", "PRE", "NUMERAL", "FUNPOW", "BIT1", "=", "AA", "AA->A", "AA->A AA", "Anum", "BIT1 Anum", "FUNPOW AA->A (NUMERAL (BIT1 Anum)) AA", "FUNPOW AA->A (PRE (NUMERAL (BIT1 Anum))) (AA->A AA)", "NUMERAL (BIT1 Anum)", "PRE (NUMERAL (BIT1 Anum))"
numeral__funpow__e2:"num", "fun", "bool", "NUMERAL", "FUNPOW", "BIT2", "BIT1", "=", "AA", "AA->A", "AA->A AA", "Anum", "BIT1 Anum", "BIT2 Anum", "FUNPOW AA->A (NUMERAL (BIT1 Anum)) (AA->A AA)", "FUNPOW AA->A (NUMERAL (BIT2 Anum)) AA", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)"
numeral__MIN__0:"num", "fun", "bool", "MIN", "=", "0", "0", "Anum", "MIN 0 Anum"
numeral__MIN__1:"num", "fun", "bool", "MIN", "=", "0", "0", "Anum", "MIN Anum 0"
numeral__MIN__e2:"num", "fun", "bool", "_3C", "NUMERAL", "MIN", "COND", "=", "Anum", "MIN (NUMERAL Anum) (NUMERAL Anum)", "NUMERAL (if _3C Anum Anum then Anum else Anum)", "NUMERAL Anum", "_3C Anum Anum", "if _3C Anum Anum then Anum else Anum"
numeral__MAX__0:"num", "fun", "bool", "MAX", "=", "0", "0", "Anum", "MAX 0 Anum"
numeral__MAX__1:"num", "fun", "bool", "MAX", "=", "0", "0", "Anum", "MAX Anum 0"
numeral__MAX__e2:"num", "fun", "bool", "_3C", "NUMERAL", "MAX", "COND", "=", "Anum", "MAX (NUMERAL Anum) (NUMERAL Anum)", "NUMERAL (if _3C Anum Anum then Anum else Anum)", "NUMERAL Anum", "_3C Anum Anum", "if _3C Anum Anum then Anum else Anum"
divmod__POS:"prod", "num", "fun", "bool", "findq", "_3C", "_2D", "_2C", "_2B", "_2A", "ZERO", "NUMERAL", "LET", "DIVMOD", "COND", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "DIVMOD (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))", "DIVMOD (_2C Anum (_2C Anum Anum))", "LET (\Anum. DIVMOD (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))", "NUMERAL (BIT1 ZERO)", "ZERO", "_2A Anum Anum", "_2B Anum Anum", "_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)", "_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum)", "_2C (_2D Anum (_2A Anum Anum)) Anum", "_2C Anum (_2C Anum Anum)", "_2C Anum Anum", "_2D Anum (_2A Anum Anum)", "_3C 0 Anum", "_3C Anum Anum", "findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum))", "if _3C Anum Anum then _2C Anum Anum else LET (\Anum. DIVMOD (_2C (_2B Anum Anum) (_2C (_2D Anum (_2A Anum Anum)) Anum))) (findq (_2C (NUMERAL (BIT1 ZERO)) (_2C Anum Anum)))"
DIVMOD__NUMERAL__CALC__0:"prod", "num", "fun", "bool", "_2C", "ZERO", "FST", "DIVMOD", "DIV", "BIT1", "=", "Anum", "BIT1 Anum", "DIV Anum (BIT1 Anum)", "DIVMOD (_2C ZERO (_2C Anum (BIT1 Anum)))", "FST (DIVMOD (_2C ZERO (_2C Anum (BIT1 Anum))))", "ZERO", "_2C Anum (BIT1 Anum)", "_2C ZERO (_2C Anum (BIT1 Anum))"
DIVMOD__NUMERAL__CALC__1:"prod", "num", "fun", "bool", "_2C", "ZERO", "FST", "DIVMOD", "DIV", "BIT2", "=", "Anum", "BIT2 Anum", "DIV Anum (BIT2 Anum)", "DIVMOD (_2C ZERO (_2C Anum (BIT2 Anum)))", "FST (DIVMOD (_2C ZERO (_2C Anum (BIT2 Anum))))", "ZERO", "_2C Anum (BIT2 Anum)", "_2C ZERO (_2C Anum (BIT2 Anum))"
DIVMOD__NUMERAL__CALC__2:"prod", "num", "fun", "bool", "_2C", "ZERO", "SND", "MOD", "DIVMOD", "BIT1", "=", "Anum", "BIT1 Anum", "DIVMOD (_2C ZERO (_2C Anum (BIT1 Anum)))", "MOD Anum (BIT1 Anum)", "SND (DIVMOD (_2C ZERO (_2C Anum (BIT1 Anum))))", "ZERO", "_2C Anum (BIT1 Anum)", "_2C ZERO (_2C Anum (BIT1 Anum))"
DIVMOD__NUMERAL__CALC__e3:"prod", "num", "fun", "bool", "_2C", "ZERO", "SND", "MOD", "DIVMOD", "BIT2", "=", "Anum", "BIT2 Anum", "DIVMOD (_2C ZERO (_2C Anum (BIT2 Anum)))", "MOD Anum (BIT2 Anum)", "SND (DIVMOD (_2C ZERO (_2C Anum (BIT2 Anum))))", "ZERO", "_2C Anum (BIT2 Anum)", "_2C ZERO (_2C Anum (BIT2 Anum))"
numeral__div2__0:"num", "fun", "bool", "DIV2", "=", "0", "0", "DIV2 0"
numeral__div2__1:"num", "fun", "bool", "NUMERAL", "DIV2", "BIT1", "=", "Anum", "BIT1 Anum", "DIV2 (NUMERAL (BIT1 Anum))", "NUMERAL (BIT1 Anum)", "NUMERAL Anum"
numeral__div2__e2:"num", "fun", "bool", "SUC", "NUMERAL", "DIV2", "BIT2", "=", "Anum", "BIT2 Anum", "DIV2 (NUMERAL (BIT2 Anum))", "NUMERAL (BIT2 Anum)", "NUMERAL (SUC Anum)", "SUC Anum"
texp__help__def__0:"num", "fun", "bool", "texp__help", "BIT2", "=", "0", "0", "Anum", "BIT2 Anum", "texp__help 0 Anum"
texp__help__def__e1:"num", "fun", "bool", "texp__help", "SUC", "BIT1", "=", "Anum", "BIT1 Anum", "SUC Anum", "texp__help (SUC Anum) Anum", "texp__help Anum (BIT1 Anum)"
texp__help__thm:"num", "fun", "bool", "texp__help", "_2B", "_2A", "ZERO", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "Anum", "BIT1 ZERO", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) (_2B Anum (NUMERAL (BIT1 ZERO)))", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (_2B Anum (NUMERAL (BIT1 ZERO))) (EXP (NUMERAL (BIT2 ZERO)) (_2B Anum (NUMERAL (BIT1 ZERO))))", "_2B Anum (NUMERAL (BIT1 ZERO))", "texp__help Anum Anum"
texp__help0:"num", "fun", "bool", "texp__help", "_2B", "ZERO", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) (_2B Anum (NUMERAL (BIT1 ZERO)))", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "texp__help Anum 0"
numeral__texp__help__0:"num", "fun", "bool", "texp__help", "ZERO", "BIT2", "=", "Anum", "BIT2 Anum", "ZERO", "texp__help ZERO Anum"
numeral__texp__help__1:"num", "fun", "bool", "texp__help", "PRE", "BIT1", "=", "Anum", "BIT1 Anum", "PRE (BIT1 Anum)", "texp__help (BIT1 Anum) Anum", "texp__help (PRE (BIT1 Anum)) (BIT1 Anum)"
numeral__texp__help__e2:"num", "fun", "bool", "texp__help", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "texp__help (BIT1 Anum) (BIT1 Anum)", "texp__help (BIT2 Anum) Anum"
TWO__EXP__THM__0:"num", "fun", "bool", "ZERO", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "0", "0", "BIT1 ZERO", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) 0", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO"
TWO__EXP__THM__1:"num", "fun", "bool", "texp__help", "ZERO", "PRE", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) (NUMERAL (BIT1 Anum))", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 ZERO)", "NUMERAL (texp__help (PRE (BIT1 Anum)) ZERO)", "PRE (BIT1 Anum)", "ZERO", "texp__help (PRE (BIT1 Anum)) ZERO"
TWO__EXP__THM__e2:"num", "fun", "bool", "texp__help", "ZERO", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) (NUMERAL (BIT2 Anum))", "NUMERAL (BIT2 Anum)", "NUMERAL (BIT2 ZERO)", "NUMERAL (texp__help (BIT1 Anum) ZERO)", "ZERO", "texp__help (BIT1 Anum) ZERO"
onecount__def__0:"num", "fun", "bool", "onecount", "ZERO", "=", "Anum", "ZERO", "onecount ZERO Anum"
onecount__def__1:"num", "fun", "bool", "onecount", "SUC", "BIT1", "=", "Anum", "BIT1 Anum", "SUC Anum", "onecount (BIT1 Anum) Anum", "onecount Anum (SUC Anum)"
onecount__def__e2:"num", "fun", "bool", "onecount", "ZERO", "BIT2", "=", "Anum", "BIT2 Anum", "ZERO", "onecount (BIT2 Anum) Anum"
exactlog__def__0:"num", "fun", "bool", "exactlog", "ZERO", "=", "ZERO", "exactlog ZERO"
exactlog__def__1:"num", "fun", "bool", "exactlog", "ZERO", "BIT1", "=", "Anum", "BIT1 Anum", "ZERO", "exactlog (BIT1 Anum)"
exactlog__def__e2:"num", "fun", "bool", "onecount", "exactlog", "ZERO", "LET", "COND", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "LET (\Anum. if Anum = ZERO then ZERO else BIT1 Anum) (onecount Anum ZERO)", "ZERO", "exactlog (BIT2 Anum)", "if Anum = ZERO then ZERO else BIT1 Anum", "onecount Anum ZERO"
onecount__characterisation:"num", "fun", "bool", "onecount", "_3C", "_2D", "ZERO", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) (_2D (onecount Anum Anum) Anum)", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2D (EXP (NUMERAL (BIT2 ZERO)) (_2D (onecount Anum Anum) Anum)) (NUMERAL (BIT1 ZERO))", "_2D (onecount Anum Anum) Anum", "_3C 0 (onecount Anum Anum)", "_3C 0 Anum", "onecount Anum Anum"
exactlog__characterisation:"num", "fun", "bool", "exactlog", "_2B", "ZERO", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT1 ZERO", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) (_2B Anum (NUMERAL (BIT1 ZERO)))", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "exactlog Anum"
internal__mult__def:"num", "fun", "bool", "internal__mult", "_2A", "=", "_2A", "internal__mult"
DIV2__BIT1:"num", "fun", "bool", "DIV2", "BIT1", "=", "Anum", "BIT1 Anum", "DIV2 (BIT1 Anum)"
enumeral__mult__0:"num", "fun", "bool", "_2A", "ZERO", "=", "Anum", "ZERO", "_2A ZERO Anum"
enumeral__mult__1:"num", "fun", "bool", "_2A", "ZERO", "=", "Anum", "ZERO", "_2A Anum ZERO"
enumeral__mult__2:"num", "fun", "bool", "internal__mult", "_2A", "BIT1", "=", "Anum", "BIT1 Anum", "_2A (BIT1 Anum) (BIT1 Anum)", "internal__mult (BIT1 Anum) (BIT1 Anum)"
enumeral__mult__3:"num", "fun", "bool", "texp__help", "internal__mult", "exactlog", "_2A", "PRE", "ODD", "LET", "DIV2", "COND", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "DIV2 Anum", "LET (\Anum. if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT1 Anum)) else internal__mult (BIT1 Anum) (BIT2 Anum)) (exactlog (BIT2 Anum))", "ODD Anum", "PRE (BIT1 Anum)", "_2A (BIT1 Anum) (BIT2 Anum)", "exactlog (BIT2 Anum)", "if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT1 Anum)) else internal__mult (BIT1 Anum) (BIT2 Anum)", "internal__mult (BIT1 Anum) (BIT2 Anum)", "texp__help (DIV2 Anum) (PRE (BIT1 Anum))"
enumeral__mult__4:"num", "fun", "bool", "texp__help", "internal__mult", "exactlog", "_2A", "PRE", "ODD", "LET", "DIV2", "COND", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "DIV2 Anum", "LET (\Anum. if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT1 Anum)) else internal__mult (BIT2 Anum) (BIT1 Anum)) (exactlog (BIT2 Anum))", "ODD Anum", "PRE (BIT1 Anum)", "_2A (BIT2 Anum) (BIT1 Anum)", "exactlog (BIT2 Anum)", "if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT1 Anum)) else internal__mult (BIT2 Anum) (BIT1 Anum)", "internal__mult (BIT2 Anum) (BIT1 Anum)", "texp__help (DIV2 Anum) (PRE (BIT1 Anum))"
enumeral__mult__e5:"num", "fun", "bool", "texp__help", "internal__mult", "exactlog", "_2A", "PRE", "ODD", "LET", "DIV2", "COND", "BIT2", "=", "Anum", "BIT2 Anum", "DIV2 Anum", "LET (\Anum. LET (\Anum. if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT2 Anum)) else if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT2 Anum)) else internal__mult (BIT2 Anum) (BIT2 Anum)) (exactlog (BIT2 Anum))) (exactlog (BIT2 Anum))", "LET (\Anum. if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT2 Anum)) else if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT2 Anum)) else internal__mult (BIT2 Anum) (BIT2 Anum)) (exactlog (BIT2 Anum))", "ODD Anum", "PRE (BIT2 Anum)", "_2A (BIT2 Anum) (BIT2 Anum)", "exactlog (BIT2 Anum)", "if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT2 Anum)) else if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT2 Anum)) else internal__mult (BIT2 Anum) (BIT2 Anum)", "if ODD Anum then texp__help (DIV2 Anum) (PRE (BIT2 Anum)) else internal__mult (BIT2 Anum) (BIT2 Anum)", "internal__mult (BIT2 Anum) (BIT2 Anum)", "texp__help (DIV2 Anum) (PRE (BIT2 Anum))"
internal__mult__characterisation__0:"num", "fun", "bool", "internal__mult", "ZERO", "=", "Anum", "ZERO", "internal__mult ZERO Anum"
internal__mult__characterisation__1:"num", "fun", "bool", "internal__mult", "ZERO", "=", "Anum", "ZERO", "internal__mult Anum ZERO"
internal__mult__characterisation__2:"num", "fun", "bool", "internal__mult", "iZ", "iDUB", "_2B", "BIT1", "=", "Anum", "BIT1 Anum", "_2B (iDUB (internal__mult Anum Anum)) Anum", "iDUB (internal__mult Anum Anum)", "iZ (_2B (iDUB (internal__mult Anum Anum)) Anum)", "internal__mult (BIT1 Anum) Anum", "internal__mult Anum Anum"
internal__mult__characterisation__e3:"num", "fun", "bool", "internal__mult", "iZ", "iDUB", "_2B", "BIT2", "=", "Anum", "BIT2 Anum", "_2B (internal__mult Anum Anum) Anum", "iDUB (iZ (_2B (internal__mult Anum Anum) Anum))", "iZ (_2B (internal__mult Anum Anum) Anum)", "internal__mult (BIT2 Anum) Anum", "internal__mult Anum Anum"
bool__size__def:"num", "fun", "bool", "bool__size", "=", "0", "0", "Abool", "bool__size Abool"
pair__size__def:"prod", "num", "fun", "bool", "pair__size", "_2B", "UNCURRY", "=", "AA", "AA->num", "AA->num AA", "AB", "AB->num", "AB->num AB", "UNCURRY (\AA AB. _2B (AA->num AA) (AB->num AB))", "_2B (AA->num AA) (AB->num AB)", "pair__size AA->num AB->num"
one__size__def:"one", "num", "fun", "bool", "one__size", "=", "0", "0", "Aone", "one__size Aone"
sum__size__def__0:"sum", "num", "fun", "bool", "sum__size", "INL", "=", "AA->num", "AB", "AB->num", "AB->num AB", "INL AB", "sum__size AB->num AA->num (INL AB)"
sum__size__def__e1:"sum", "num", "fun", "bool", "sum__size", "INR", "=", "AA->num", "AB", "AB->num", "AB->num AB", "INR AB", "sum__size AA->num AB->num (INR AB)"
option__size__def__0:"option", "num", "fun", "bool", "option__size", "NONE", "=", "0", "0", "AA->num", "NONE", "option__size AA->num NONE"
option__size__def__e1:"option", "num", "fun", "bool", "option__size", "SUC", "SOME", "=", "AA", "AA->num", "AA->num AA", "SOME AA", "SUC (AA->num AA)", "option__size AA->num (SOME AA)"
tri__def__0:"num", "fun", "bool", "tri", "=", "0", "0", "tri 0"
tri__def__e1:"num", "fun", "bool", "tri", "_2B", "SUC", "=", "Anum", "SUC Anum", "_2B (SUC Anum) (tri Anum)", "tri (SUC Anum)", "tri Anum"
tri__def__compute__0:"num", "fun", "bool", "tri", "=", "0", "0", "tri 0"
tri__def__compute__1:"num", "fun", "bool", "tri", "_2D", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 Anum", "BIT1 ZERO", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B (NUMERAL (BIT1 Anum)) (tri (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))))", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))", "tri (NUMERAL (BIT1 Anum))", "tri (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO)))"
tri__def__compute__e2:"num", "fun", "bool", "tri", "_2B", "NUMERAL", "BIT2", "BIT1", "=", "Anum", "BIT1 Anum", "BIT2 Anum", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)", "_2B (NUMERAL (BIT2 Anum)) (tri (NUMERAL (BIT1 Anum)))", "tri (NUMERAL (BIT1 Anum))", "tri (NUMERAL (BIT2 Anum))"
twotri__formula:"num", "fun", "bool", "tri", "_2B", "_2A", "ZERO", "NUMERAL", "BIT2", "BIT1", "=", "Anum", "BIT1 ZERO", "BIT2 ZERO", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) (tri Anum)", "_2A Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_2B Anum (NUMERAL (BIT1 ZERO))", "tri Anum"
tri__formula:"num", "fun", "bool", "tri", "_2B", "_2A", "ZERO", "NUMERAL", "DIV", "BIT2", "BIT1", "=", "Anum", "BIT1 ZERO", "BIT2 ZERO", "DIV (_2A Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (NUMERAL (BIT2 ZERO))", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_2B Anum (NUMERAL (BIT1 ZERO))", "tri Anum"
tri__eq__0__0:"num", "fun", "bool", "tri", "=", "0", "0", "Anum", "tri Anum", "tri Anum = 0 <=> Anum = 0"
tri__eq__0__e1:"num", "fun", "bool", "tri", "=", "0", "0", "0 = tri Anum <=> Anum = 0", "Anum", "tri Anum"
tri__LT__I:"num", "fun", "bool", "tri", "_3C", "Anum", "_3C (tri Anum) (tri Anum)", "_3C Anum Anum", "tri Anum"
tri__LT:"num", "fun", "bool", "tri", "_3C", "=", "Anum", "_3C (tri Anum) (tri Anum)", "_3C (tri Anum) (tri Anum) <=> _3C Anum Anum", "_3C Anum Anum", "tri Anum"
tri__11:"num", "fun", "bool", "tri", "=", "Anum", "tri Anum", "tri Anum = tri Anum <=> Anum = Anum"
tri__LE:"num", "fun", "bool", "tri", "_3C_3D", "=", "Anum", "_3C_3D (tri Anum) (tri Anum)", "_3C_3D (tri Anum) (tri Anum) <=> _3C_3D Anum Anum", "_3C_3D Anum Anum", "tri Anum"
invtri0__tupled__primitive__def:"prod", "num", "fun", "bool", "~", "pair__CASE", "invtri0__tupled", "_40", "_3C", "_2D", "_2C", "_2B", "ZERO", "WFREC", "WF", "NUMERAL", "I", "COND", "BIT1", "=", "Anum", "Anum#num", "Anum#num->num#num (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO))))", "Anum#num->num#num->bool", "Anum#num->num#num->bool (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2C Anum Anum)", "BIT1 ZERO", "I (if _3C Anum (_2B Anum (NUMERAL (BIT1 ZERO))) then _2C Anum Anum else Anum#num->num#num (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))))", "NUMERAL (BIT1 ZERO)", "WF Anum#num->num#num->bool", "WFREC (_40 (\Anum#num->num#num->bool. WF Anum#num->num#num->bool /\ (!Anum Anum. ~_3C Anum (_2B Anum (NUMERAL (BIT1 ZERO))) ==> Anum#num->num#num->bool (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2C Anum Anum)))) (\Anum#num->num#num Anum#num. pair__CASE Anum#num (\Anum Anum. I (if _3C Anum (_2B Anum (NUMERAL (BIT1 ZERO))) then _2C Anum Anum else Anum#num->num#num (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))))))", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))", "_2C Anum Anum", "_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_3C Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_40 (\Anum#num->num#num->bool. WF Anum#num->num#num->bool /\ (!Anum Anum. ~_3C Anum (_2B Anum (NUMERAL (BIT1 ZERO))) ==> Anum#num->num#num->bool (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2C Anum Anum)))", "if _3C Anum (_2B Anum (NUMERAL (BIT1 ZERO))) then _2C Anum Anum else Anum#num->num#num (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO))))", "invtri0__tupled", "pair__CASE Anum#num (\Anum Anum. I (if _3C Anum (_2B Anum (NUMERAL (BIT1 ZERO))) then _2C Anum Anum else Anum#num->num#num (_2C (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO))))))"
invtri0__curried__def:"prod", "num", "fun", "bool", "invtri0__tupled", "invtri0", "_2C", "=", "Anum", "_2C Anum Anum", "invtri0 Anum Anum", "invtri0__tupled (_2C Anum Anum)"
invtri0__ind:"num", "fun", "bool", "~", "_3C", "_2D", "_2B", "ZERO", "NUMERAL", "BIT1", "Anum", "Anum->num->bool (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))", "Anum->num->bool Anum Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_3C Anum (_2B Anum (NUMERAL (BIT1 ZERO)))"
invtri0__def:"prod", "num", "fun", "bool", "invtri0", "_3C", "_2D", "_2C", "_2B", "ZERO", "NUMERAL", "COND", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "_2C Anum Anum", "_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "_3C Anum (_2B Anum (NUMERAL (BIT1 ZERO)))", "if _3C Anum (_2B Anum (NUMERAL (BIT1 ZERO))) then _2C Anum Anum else invtri0 (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))", "invtri0 (_2D Anum (_2B Anum (NUMERAL (BIT1 ZERO)))) (_2B Anum (NUMERAL (BIT1 ZERO)))", "invtri0 Anum Anum"
invtri__def:"prod", "num", "fun", "bool", "invtri0", "invtri", "SND", "=", "0", "0", "Anum", "SND (invtri0 Anum 0)", "invtri Anum", "invtri0 Anum 0"
invtri0__thm:"prod", "num", "fun", "bool", "tri", "invtri0", "_2B", "SND", "FST", "=", "Anum", "FST (invtri0 Anum Anum)", "SND (invtri0 Anum Anum)", "_2B (tri (SND (invtri0 Anum Anum))) (FST (invtri0 Anum Anum))", "_2B Anum (tri Anum)", "invtri0 Anum Anum", "tri (SND (invtri0 Anum Anum))", "tri Anum"
SND__invtri0:"prod", "num", "fun", "bool", "invtri0", "_3C", "SUC", "SND", "FST", "Anum", "FST (invtri0 Anum Anum)", "SND (invtri0 Anum Anum)", "SUC (SND (invtri0 Anum Anum))", "_3C (FST (invtri0 Anum Anum)) (SUC (SND (invtri0 Anum Anum)))", "invtri0 Anum Anum"
invtri__lower:"num", "fun", "bool", "tri", "invtri", "_3C_3D", "Anum", "_3C_3D (tri (invtri Anum)) Anum", "invtri Anum", "tri (invtri Anum)"
invtri__upper:"num", "fun", "bool", "tri", "invtri", "_3C", "_2B", "ZERO", "NUMERAL", "BIT1", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B (invtri Anum) (NUMERAL (BIT1 ZERO))", "_3C Anum (tri (_2B (invtri Anum) (NUMERAL (BIT1 ZERO))))", "invtri Anum", "tri (_2B (invtri Anum) (NUMERAL (BIT1 ZERO)))"
invtri__linverse:"num", "fun", "bool", "tri", "invtri", "=", "Anum", "invtri (tri Anum)", "tri Anum"
invtri__unique:"num", "fun", "bool", "tri", "invtri", "_3C_3D", "_3C", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "_3C Anum (tri (_2B Anum (NUMERAL (BIT1 ZERO))))", "_3C_3D (tri Anum) Anum", "invtri Anum", "tri (_2B Anum (NUMERAL (BIT1 ZERO)))", "tri Anum"
invtri__linverse__r:"num", "fun", "bool", "tri", "invtri", "_3C_3D", "_2B", "=", "Anum", "_2B (tri Anum) Anum", "_3C_3D Anum Anum", "invtri (_2B (tri Anum) Anum)", "tri Anum"
tri__le:"num", "fun", "bool", "tri", "_3C_3D", "Anum", "_3C_3D Anum (tri Anum)", "tri Anum"
invtri__le:"num", "fun", "bool", "invtri", "_3C_3D", "Anum", "_3C_3D (invtri Anum) Anum", "invtri Anum"
npair__def:"num", "fun", "bool", "tri", "npair", "_2B", "=", "Anum", "_2B (tri (_2B Anum Anum)) Anum", "_2B Anum Anum", "npair Anum Anum", "tri (_2B Anum Anum)"
nfst__def:"num", "fun", "bool", "tri", "nfst", "invtri", "_2D", "_2B", "=", "Anum", "_2B (tri (invtri Anum)) (invtri Anum)", "_2D (_2B (tri (invtri Anum)) (invtri Anum)) Anum", "invtri Anum", "nfst Anum", "tri (invtri Anum)"
nsnd__def:"num", "fun", "bool", "tri", "nsnd", "invtri", "_2D", "=", "Anum", "_2D Anum (tri (invtri Anum))", "invtri Anum", "nsnd Anum", "tri (invtri Anum)"
nfst__npair:"num", "fun", "bool", "npair", "nfst", "=", "Anum", "nfst (npair Anum Anum)", "npair Anum Anum"
nsnd__npair:"num", "fun", "bool", "nsnd", "npair", "=", "Anum", "npair Anum Anum", "nsnd (npair Anum Anum)"
npair__cases:"num", "fun", "bool", "npair", "=", "Anum", "npair Anum Anum"
npair0:"num", "fun", "bool", "nsnd", "npair", "nfst", "=", "Anum", "nfst Anum", "npair (nfst Anum) (nsnd Anum)", "nsnd Anum"
npair__11:"num", "fun", "bool", "npair", "=", "Anum", "npair Anum Anum", "npair Anum Anum = npair Anum Anum <=> Anum = Anum /\ Anum = Anum"
nfst__le:"num", "fun", "bool", "nfst", "_3C_3D", "Anum", "_3C_3D (nfst Anum) Anum", "nfst Anum"
nsnd__le:"num", "fun", "bool", "nsnd", "_3C_3D", "Anum", "_3C_3D (nsnd Anum) Anum", "nsnd Anum"
ncons__def:"num", "fun", "bool", "npair", "ncons", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B (npair Anum Anum) (NUMERAL (BIT1 ZERO))", "ncons Anum Anum", "npair Anum Anum"
ncons__11:"num", "fun", "bool", "ncons", "=", "Anum", "ncons Anum Anum", "ncons Anum Anum = ncons Anum Anum <=> Anum = Anum /\ Anum = Anum"
ncons__not__nnil:"num", "fun", "bool", "~", "ncons", "=", "0", "0", "Anum", "ncons Anum Anum"
nlistrec__tupled__primitive__def:"prod", "num", "fun", "bool", "~", "pair__CASE", "nsnd", "nlistrec__tupled", "nfst", "_40", "_2D", "_2C", "ZERO", "WFREC", "WF", "NUMERAL", "I", "COND", "BIT1", "=", "0", "0", "A(num->num->A->A)#num", "AA", "AA#(num->num->A->A)#num", "AA#(num->num->A->A)#num->A (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO))))))", "AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool", "AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))) (_2C AA (_2C Anum->num->A->A Anum))", "Anum", "Anum->num->A->A", "Anum->num->A->A (nfst (_2D Anum (NUMERAL (BIT1 ZERO)))) (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))) (AA#(num->num->A->A)#num->A (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))))", "BIT1 ZERO", "I (if Anum = 0 then AA else Anum->num->A->A (nfst (_2D Anum (NUMERAL (BIT1 ZERO)))) (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))) (AA#(num->num->A->A)#num->A (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO))))))))", "NUMERAL (BIT1 ZERO)", "WF AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool", "WFREC (_40 (\AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool. WF AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool /\ (!Anum->num->A->A AA Anum. ~(Anum = 0) ==> AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))) (_2C AA (_2C Anum->num->A->A Anum))))) (\AA#(num->num->A->A)#num->A AA#(num->num->A->A)#num. pair__CASE AA#(num->num->A->A)#num (\AA A(num->num->A->A)#num. pair__CASE A(num->num->A->A)#num (\Anum->num->A->A Anum. I (if Anum = 0 then AA else Anum->num->A->A (nfst (_2D Anum (NUMERAL (BIT1 ZERO)))) (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))) (AA#(num->num->A->A)#num->A (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))))))))", "ZERO", "_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))", "_2C AA (_2C Anum->num->A->A Anum)", "_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO))))", "_2C Anum->num->A->A Anum", "_2D Anum (NUMERAL (BIT1 ZERO))", "_40 (\AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool. WF AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool /\ (!Anum->num->A->A AA Anum. ~(Anum = 0) ==> AA#(num->num->A->A)#num->A#(num->num->A->A)#num->bool (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))) (_2C AA (_2C Anum->num->A->A Anum))))", "if Anum = 0 then AA else Anum->num->A->A (nfst (_2D Anum (NUMERAL (BIT1 ZERO)))) (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))) (AA#(num->num->A->A)#num->A (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))))", "nfst (_2D Anum (NUMERAL (BIT1 ZERO)))", "nlistrec__tupled", "nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))", "pair__CASE A(num->num->A->A)#num (\Anum->num->A->A Anum. I (if Anum = 0 then AA else Anum->num->A->A (nfst (_2D Anum (NUMERAL (BIT1 ZERO)))) (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))) (AA#(num->num->A->A)#num->A (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))))))))", "pair__CASE AA#(num->num->A->A)#num (\AA A(num->num->A->A)#num. pair__CASE A(num->num->A->A)#num (\Anum->num->A->A Anum. I (if Anum = 0 then AA else Anum->num->A->A (nfst (_2D Anum (NUMERAL (BIT1 ZERO)))) (nsnd (_2D Anum (NUMERAL (BIT1 ZERO)))) (AA#(num->num->A->A)#num->A (_2C AA (_2C Anum->num->A->A (nsnd (_2D Anum (NUMERAL (BIT1 ZERO))))))))))"
nlistrec__curried__def:"prod", "num", "fun", "bool", "nlistrec__tupled", "nlistrec", "_2C", "=", "AA", "Anum", "Anum->num->A->A", "_2C AA (_2C Anum->num->A->A Anum)", "_2C Anum->num->A->A Anum", "nlistrec AA Anum->num->A->A Anum", "nlistrec__tupled (_2C AA (_2C Anum->num->A->A Anum))"
nlistrec__thm__0:"num", "fun", "bool", "nlistrec", "=", "0", "0", "AA", "Anum->num->A->A", "nlistrec AA Anum->num->A->A 0"
nlistrec__thm__e1:"num", "fun", "bool", "nlistrec", "ncons", "=", "AA", "Anum", "Anum->num->A->A", "Anum->num->A->A Anum Anum (nlistrec AA Anum->num->A->A Anum)", "ncons Anum Anum", "nlistrec AA Anum->num->A->A (ncons Anum Anum)", "nlistrec AA Anum->num->A->A Anum"
nlist__ind:"num", "fun", "bool", "ncons", "0", "0", "Anum", "Anum->bool (ncons Anum Anum)", "Anum->bool 0", "Anum->bool Anum", "ncons Anum Anum"
nlen__def:"num", "fun", "bool", "nlistrec", "nlen", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "0", "0", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "nlen", "nlistrec 0 (\Anum Anum Anum. _2B Anum (NUMERAL (BIT1 ZERO)))"
nlen__thm__0:"num", "fun", "bool", "nlen", "=", "0", "0", "nlen 0"
nlen__thm__e1:"num", "fun", "bool", "nlen", "ncons", "_2B", "ZERO", "NUMERAL", "BIT1", "=", "Anum", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B (nlen Anum) (NUMERAL (BIT1 ZERO))", "ncons Anum Anum", "nlen (ncons Anum Anum)", "nlen Anum"
nmap__def:"num", "fun", "bool", "nmap", "nlistrec", "ncons", "=", "0", "0", "Anum", "Anum->num", "Anum->num Anum", "ncons (Anum->num Anum) Anum", "nlistrec 0 (\Anum Anum Anum. ncons (Anum->num Anum) Anum)", "nmap Anum->num"
nmap__thm__0:"num", "fun", "bool", "nmap", "=", "0", "0", "Anum->num", "nmap Anum->num 0"
nmap__thm__e1:"num", "fun", "bool", "nmap", "ncons", "=", "Anum", "Anum->num", "Anum->num Anum", "ncons (Anum->num Anum) (nmap Anum->num Anum)", "ncons Anum Anum", "nmap Anum->num (ncons Anum Anum)", "nmap Anum->num Anum"
nfoldl__def:"num", "fun", "bool", "nlistrec", "nfoldl", "=", "AA", "AA->A (Anum->A->A Anum AA)", "Anum", "Anum->A->A", "Anum->A->A Anum AA", "nfoldl Anum->A->A AA Anum", "nlistrec (\AA. AA) (\Anum Anum AA->A AA. AA->A (Anum->A->A Anum AA)) Anum AA"
nfoldl__thm__0:"num", "fun", "bool", "nfoldl", "=", "0", "0", "AA", "Anum->A->A", "nfoldl Anum->A->A AA 0"
nfoldl__thm__e1:"num", "fun", "bool", "nfoldl", "ncons", "=", "AA", "Anum", "Anum->A->A", "Anum->A->A Anum AA", "ncons Anum Anum", "nfoldl Anum->A->A (Anum->A->A Anum AA) Anum", "nfoldl Anum->A->A AA (ncons Anum Anum)"
napp__def:"num", "fun", "bool", "nlistrec", "ncons", "napp", "=", "Anum", "napp Anum Anum", "ncons Anum Anum", "nlistrec Anum (\Anum Anum Anum. ncons Anum Anum) Anum"
napp__thm__0:"num", "fun", "bool", "napp", "=", "0", "0", "Anum", "napp 0 Anum"
napp__thm__e1:"num", "fun", "bool", "ncons", "napp", "=", "Anum", "napp (ncons Anum Anum) Anum", "napp Anum Anum", "ncons Anum (napp Anum Anum)", "ncons Anum Anum"
nlist__cases:"num", "fun", "bool", "ncons", "=", "0", "0", "Anum", "ncons Anum Anum"
SPECIFICATION:"fun", "bool", "IN", "=", "AA", "AA->bool", "AA->bool AA", "IN AA AA->bool", "IN AA AA->bool <=> AA->bool AA"
IN__ABS:"fun", "bool", "IN", "=", "AA", "AA->bool AA", "IN AA (\AA. AA->bool AA)", "IN AA (\AA. AA->bool AA) <=> AA->bool AA"
ABS__applied:"bool", "T", "T"
EXTENSION:"fun", "bool", "IN", "=", "AA", "AA->bool", "AA->bool = AA->bool <=> (!AA. IN AA AA->bool <=> IN AA AA->bool)", "IN AA AA->bool", "IN AA AA->bool <=> IN AA AA->bool"
NOT__EQUAL__SETS:"fun", "bool", "~", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "IN AA AA->bool <=> ~IN AA AA->bool", "~(AA->bool = AA->bool) <=> (?AA. IN AA AA->bool <=> ~IN AA AA->bool)"
NUM__SET__WOP:"num", "fun", "bool", "_3C_3D", "IN", "=", "(?Anum. IN Anum Anum->bool) <=> (?Anum. IN Anum Anum->bool /\ (!Anum. IN Anum Anum->bool ==> _3C_3D Anum Anum))", "Anum", "Anum->bool", "IN Anum Anum->bool", "_3C_3D Anum Anum"
GSPECIFICATION:"prod", "fun", "bool", "_2C", "T", "IN", "GSPEC", "=", "AA", "AB", "AB->A#bool", "AB->A#bool AB", "GSPEC AB->A#bool", "IN AA (GSPEC AB->A#bool)", "IN AA (GSPEC AB->A#bool) <=> (?AB. _2C AA T = AB->A#bool AB)", "T", "_2C AA T"
GSPECIFICATION__applied:"prod", "fun", "bool", "_2C", "T", "GSPEC", "=", "AA", "AB", "AB->A#bool", "AB->A#bool AB", "GSPEC AB->A#bool AA", "GSPEC AB->A#bool AA <=> (?AB. _2C AA T = AB->A#bool AB)", "T", "_2C AA T"
SET__MINIMUM:"num", "fun", "bool", "_3C_3D", "IN", "=", "(?AA. IN AA AA->bool) <=> (?AA. IN AA AA->bool /\ (!AA. IN AA AA->bool ==> _3C_3D (AA->num AA) (AA->num AA)))", "AA", "AA->bool", "AA->num AA", "IN AA AA->bool", "_3C_3D (AA->num AA) (AA->num AA)"
EMPTY__DEF:"fun", "bool", "F", "EMPTY", "=", "F", "{}"
NOT__IN__EMPTY:"fun", "bool", "~", "IN", "EMPTY", "AA", "IN AA {}", "{}"
MEMBER__NOT__EMPTY:"fun", "bool", "~", "IN", "EMPTY", "=", "(?AA. IN AA AA->bool) <=> ~(AA->bool = {})", "AA", "AA->bool", "IN AA AA->bool", "{}"
EMPTY__applied:"fun", "bool", "F", "EMPTY", "=", "AA", "F", "{} AA", "{} AA <=> F"
UNIV__DEF:"fun", "bool", "UNIV", "T", "=", "(:A)", "T"
IN__UNIV:"fun", "bool", "UNIV", "IN", "(:A)", "AA", "IN AA (:A)"
UNIV__NOT__EMPTY:"fun", "bool", "~", "UNIV", "EMPTY", "=", "(:A)", "{}"
EMPTY__NOT__UNIV:"fun", "bool", "~", "UNIV", "EMPTY", "=", "(:A)", "{}"
EQ__UNIV:"fun", "bool", "UNIV", "IN", "=", "(!AA. IN AA AA->bool) <=> AA->bool = (:A)", "(:A)", "AA", "AA->bool", "IN AA AA->bool"
SUBSET__DEF:"fun", "bool", "SUBSET", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool <=> (!AA. IN AA AA->bool ==> IN AA AA->bool)"
SUBSET__TRANS:"fun", "bool", "SUBSET", "AA->bool", "SUBSET AA->bool AA->bool"
SUBSET__REFL:"fun", "bool", "SUBSET", "AA->bool", "SUBSET AA->bool AA->bool"
SUBSET__ANTISYM:"fun", "bool", "SUBSET", "=", "AA->bool", "SUBSET AA->bool AA->bool"
EMPTY__SUBSET:"fun", "bool", "SUBSET", "EMPTY", "AA->bool", "SUBSET {} AA->bool", "{}"
SUBSET__EMPTY:"fun", "bool", "SUBSET", "EMPTY", "=", "AA->bool", "SUBSET AA->bool {}", "SUBSET AA->bool {} <=> AA->bool = {}", "{}"
SUBSET__UNIV:"fun", "bool", "UNIV", "SUBSET", "(:A)", "AA->bool", "SUBSET AA->bool (:A)"
UNIV__SUBSET:"fun", "bool", "UNIV", "SUBSET", "=", "(:A)", "AA->bool", "SUBSET (:A) AA->bool", "SUBSET (:A) AA->bool <=> AA->bool = (:A)"
PSUBSET__DEF:"fun", "bool", "~", "SUBSET", "PSUBSET", "=", "AA->bool", "PSUBSET AA->bool AA->bool", "PSUBSET AA->bool AA->bool <=> SUBSET AA->bool AA->bool /\ ~(AA->bool = AA->bool)", "SUBSET AA->bool AA->bool"
PSUBSET__TRANS:"fun", "bool", "PSUBSET", "AA->bool", "PSUBSET AA->bool AA->bool"
PSUBSET__IRREFL:"fun", "bool", "~", "PSUBSET", "AA->bool", "PSUBSET AA->bool AA->bool"
NOT__PSUBSET__EMPTY:"fun", "bool", "~", "PSUBSET", "EMPTY", "AA->bool", "PSUBSET AA->bool {}", "{}"
NOT__UNIV__PSUBSET:"fun", "bool", "~", "UNIV", "PSUBSET", "(:A)", "AA->bool", "PSUBSET (:A) AA->bool"
PSUBSET__UNIV:"fun", "bool", "~", "UNIV", "PSUBSET", "IN", "=", "(:A)", "AA", "AA->bool", "IN AA AA->bool", "PSUBSET AA->bool (:A)", "PSUBSET AA->bool (:A) <=> (?AA. ~IN AA AA->bool)"
UNION__DEF:"prod", "fun", "bool", "_2C", "UNION", "IN", "GSPEC", "=", "AA", "AA->bool", "GSPEC (\AA. _2C AA (IN AA AA->bool \/ IN AA AA->bool))", "IN AA AA->bool", "UNION AA->bool AA->bool", "_2C AA (IN AA AA->bool \/ IN AA AA->bool)"
IN__UNION:"fun", "bool", "UNION", "IN", "=", "AA", "AA->bool", "IN AA (UNION AA->bool AA->bool)", "IN AA (UNION AA->bool AA->bool) <=> IN AA AA->bool \/ IN AA AA->bool", "IN AA AA->bool", "UNION AA->bool AA->bool"
UNION__applied:"fun", "bool", "UNION", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "UNION AA->bool AA->bool AA", "UNION AA->bool AA->bool AA <=> IN AA AA->bool \/ IN AA AA->bool"
UNION__ASSOC:"fun", "bool", "UNION", "=", "AA->bool", "UNION (UNION AA->bool AA->bool) AA->bool", "UNION AA->bool (UNION AA->bool AA->bool)", "UNION AA->bool AA->bool"
UNION__IDEMPOT:"fun", "bool", "UNION", "=", "AA->bool", "UNION AA->bool AA->bool"
UNION__COMM:"fun", "bool", "UNION", "=", "AA->bool", "UNION AA->bool AA->bool"
SUBSET__UNION__0:"fun", "bool", "UNION", "SUBSET", "AA->bool", "SUBSET AA->bool (UNION AA->bool AA->bool)", "UNION AA->bool AA->bool"
SUBSET__UNION__e1:"fun", "bool", "UNION", "SUBSET", "AA->bool", "SUBSET AA->bool (UNION AA->bool AA->bool)", "UNION AA->bool AA->bool"
UNION__SUBSET:"fun", "bool", "UNION", "SUBSET", "=", "AA->bool", "SUBSET (UNION AA->bool AA->bool) AA->bool", "SUBSET (UNION AA->bool AA->bool) AA->bool <=> SUBSET AA->bool AA->bool /\ SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool", "UNION AA->bool AA->bool"
SUBSET__UNION__ABSORPTION:"fun", "bool", "UNION", "SUBSET", "=", "AA->bool", "SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool <=> UNION AA->bool AA->bool = AA->bool", "UNION AA->bool AA->bool"
UNION__EMPTY__0:"fun", "bool", "UNION", "EMPTY", "=", "AA->bool", "UNION {} AA->bool", "{}"
UNION__EMPTY__e1:"fun", "bool", "UNION", "EMPTY", "=", "AA->bool", "UNION AA->bool {}", "{}"
UNION__UNIV__0:"fun", "bool", "UNIV", "UNION", "=", "(:A)", "AA->bool", "UNION (:A) AA->bool"
UNION__UNIV__e1:"fun", "bool", "UNIV", "UNION", "=", "(:A)", "AA->bool", "UNION AA->bool (:A)"
EMPTY__UNION:"fun", "bool", "UNION", "EMPTY", "=", "AA->bool", "UNION AA->bool AA->bool", "UNION AA->bool AA->bool = {} <=> AA->bool = {} /\ AA->bool = {}", "{}"
INTER__DEF:"prod", "fun", "bool", "_2C", "INTER", "IN", "GSPEC", "=", "AA", "AA->bool", "GSPEC (\AA. _2C AA (IN AA AA->bool /\ IN AA AA->bool))", "IN AA AA->bool", "INTER AA->bool AA->bool", "_2C AA (IN AA AA->bool /\ IN AA AA->bool)"
IN__INTER:"fun", "bool", "INTER", "IN", "=", "AA", "AA->bool", "IN AA (INTER AA->bool AA->bool)", "IN AA (INTER AA->bool AA->bool) <=> IN AA AA->bool /\ IN AA AA->bool", "IN AA AA->bool", "INTER AA->bool AA->bool"
INTER__applied:"fun", "bool", "INTER", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "INTER AA->bool AA->bool AA", "INTER AA->bool AA->bool AA <=> IN AA AA->bool /\ IN AA AA->bool"
INTER__ASSOC:"fun", "bool", "INTER", "=", "AA->bool", "INTER (INTER AA->bool AA->bool) AA->bool", "INTER AA->bool (INTER AA->bool AA->bool)", "INTER AA->bool AA->bool"
INTER__IDEMPOT:"fun", "bool", "INTER", "=", "AA->bool", "INTER AA->bool AA->bool"
INTER__COMM:"fun", "bool", "INTER", "=", "AA->bool", "INTER AA->bool AA->bool"
INTER__SUBSET__0:"fun", "bool", "SUBSET", "INTER", "AA->bool", "INTER AA->bool AA->bool", "SUBSET (INTER AA->bool AA->bool) AA->bool"
INTER__SUBSET__e1:"fun", "bool", "SUBSET", "INTER", "AA->bool", "INTER AA->bool AA->bool", "SUBSET (INTER AA->bool AA->bool) AA->bool"
SUBSET__INTER:"fun", "bool", "SUBSET", "INTER", "=", "AA->bool", "INTER AA->bool AA->bool", "SUBSET AA->bool (INTER AA->bool AA->bool)", "SUBSET AA->bool (INTER AA->bool AA->bool) <=> SUBSET AA->bool AA->bool /\ SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
SUBSET__INTER__ABSORPTION:"fun", "bool", "SUBSET", "INTER", "=", "AA->bool", "INTER AA->bool AA->bool", "SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool <=> INTER AA->bool AA->bool = AA->bool"
INTER__EMPTY__0:"fun", "bool", "INTER", "EMPTY", "=", "AA->bool", "INTER {} AA->bool", "{}"
INTER__EMPTY__e1:"fun", "bool", "INTER", "EMPTY", "=", "AA->bool", "INTER AA->bool {}", "{}"
INTER__UNIV__0:"fun", "bool", "UNIV", "INTER", "=", "(:A)", "AA->bool", "INTER (:A) AA->bool"
INTER__UNIV__e1:"fun", "bool", "UNIV", "INTER", "=", "(:A)", "AA->bool", "INTER AA->bool (:A)"
UNION__OVER__INTER:"fun", "bool", "UNION", "INTER", "=", "AA->bool", "INTER AA->bool (UNION AA->bool AA->bool)", "INTER AA->bool AA->bool", "UNION (INTER AA->bool AA->bool) (INTER AA->bool AA->bool)", "UNION AA->bool AA->bool"
INTER__OVER__UNION:"fun", "bool", "UNION", "INTER", "=", "AA->bool", "INTER (UNION AA->bool AA->bool) (UNION AA->bool AA->bool)", "INTER AA->bool AA->bool", "UNION AA->bool (INTER AA->bool AA->bool)", "UNION AA->bool AA->bool"
DISJOINT__DEF:"fun", "bool", "INTER", "EMPTY", "DISJOINT", "=", "AA->bool", "DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool <=> INTER AA->bool AA->bool = {}", "INTER AA->bool AA->bool", "{}"
IN__DISJOINT:"fun", "bool", "~", "IN", "DISJOINT", "=", "AA", "AA->bool", "DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool <=> ~(?AA. IN AA AA->bool /\ IN AA AA->bool)", "IN AA AA->bool"
DISJOINT__SYM:"fun", "bool", "DISJOINT", "=", "AA->bool", "DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool <=> DISJOINT AA->bool AA->bool"
DISJOINT__EMPTY__0:"fun", "bool", "EMPTY", "DISJOINT", "AA->bool", "DISJOINT {} AA->bool", "{}"
DISJOINT__EMPTY__e1:"fun", "bool", "EMPTY", "DISJOINT", "AA->bool", "DISJOINT AA->bool {}", "{}"
DISJOINT__EMPTY__REFL:"fun", "bool", "EMPTY", "DISJOINT", "=", "AA->bool", "AA->bool = {} <=> DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool", "{}"
DISJOINT__EMPTY__REFL__RWT:"fun", "bool", "EMPTY", "DISJOINT", "=", "AA->bool", "DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool <=> AA->bool = {}", "{}"
DISJOINT__UNION:"fun", "bool", "UNION", "DISJOINT", "=", "AA->bool", "DISJOINT (UNION AA->bool AA->bool) AA->bool", "DISJOINT (UNION AA->bool AA->bool) AA->bool <=> DISJOINT AA->bool AA->bool /\ DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool", "UNION AA->bool AA->bool"
DISJOINT__UNION__BOTH__0:"fun", "bool", "UNION", "DISJOINT", "=", "AA->bool", "DISJOINT (UNION AA->bool AA->bool) AA->bool", "DISJOINT (UNION AA->bool AA->bool) AA->bool <=> DISJOINT AA->bool AA->bool /\ DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool", "UNION AA->bool AA->bool"
DISJOINT__UNION__BOTH__e1:"fun", "bool", "UNION", "DISJOINT", "=", "AA->bool", "DISJOINT AA->bool (UNION AA->bool AA->bool)", "DISJOINT AA->bool (UNION AA->bool AA->bool) <=> DISJOINT AA->bool AA->bool /\ DISJOINT AA->bool AA->bool", "DISJOINT AA->bool AA->bool", "UNION AA->bool AA->bool"
DISJOINT__SUBSET:"fun", "bool", "SUBSET", "DISJOINT", "AA->bool", "DISJOINT AA->bool AA->bool", "SUBSET AA->bool AA->bool"
DIFF__DEF:"prod", "fun", "bool", "~", "_2C", "IN", "GSPEC", "DIFF", "=", "AA", "AA->bool", "DIFF AA->bool AA->bool", "GSPEC (\AA. _2C AA (IN AA AA->bool /\ ~IN AA AA->bool))", "IN AA AA->bool", "_2C AA (IN AA AA->bool /\ ~IN AA AA->bool)"
IN__DIFF:"fun", "bool", "~", "IN", "DIFF", "=", "AA", "AA->bool", "DIFF AA->bool AA->bool", "IN AA (DIFF AA->bool AA->bool)", "IN AA (DIFF AA->bool AA->bool) <=> IN AA AA->bool /\ ~IN AA AA->bool", "IN AA AA->bool"
DIFF__applied:"fun", "bool", "~", "IN", "DIFF", "=", "AA", "AA->bool", "DIFF AA->bool AA->bool AA", "DIFF AA->bool AA->bool AA <=> IN AA AA->bool /\ ~IN AA AA->bool", "IN AA AA->bool"
DIFF__EMPTY:"fun", "bool", "EMPTY", "DIFF", "=", "AA->bool", "DIFF AA->bool {}", "{}"
EMPTY__DIFF:"fun", "bool", "EMPTY", "DIFF", "=", "AA->bool", "DIFF {} AA->bool", "{}"
DIFF__UNIV:"fun", "bool", "UNIV", "EMPTY", "DIFF", "=", "(:A)", "AA->bool", "DIFF AA->bool (:A)", "{}"
DIFF__DIFF:"fun", "bool", "DIFF", "=", "AA->bool", "DIFF (DIFF AA->bool AA->bool) AA->bool", "DIFF AA->bool AA->bool"
DIFF__EQ__EMPTY:"fun", "bool", "EMPTY", "DIFF", "=", "AA->bool", "DIFF AA->bool AA->bool", "{}"
DIFF__SUBSET:"fun", "bool", "SUBSET", "DIFF", "AA->bool", "DIFF AA->bool AA->bool", "SUBSET (DIFF AA->bool AA->bool) AA->bool"
UNION__DIFF:"fun", "bool", "UNION", "SUBSET", "DIFF", "=", "AA->bool", "DIFF AA->bool AA->bool", "SUBSET AA->bool AA->bool", "UNION (DIFF AA->bool AA->bool) AA->bool", "UNION AA->bool (DIFF AA->bool AA->bool)"
DIFF__UNION:"fun", "bool", "UNION", "DIFF", "=", "AA->bool", "DIFF (DIFF AA->bool AA->bool) AA->bool", "DIFF AA->bool (UNION AA->bool AA->bool)", "DIFF AA->bool AA->bool", "UNION AA->bool AA->bool"
DIFF__COMM:"fun", "bool", "DIFF", "=", "AA->bool", "DIFF (DIFF AA->bool AA->bool) AA->bool", "DIFF AA->bool AA->bool"
DIFF__SAME__UNION__0:"fun", "bool", "UNION", "DIFF", "=", "AA->bool", "DIFF (UNION AA->bool AA->bool) AA->bool", "DIFF AA->bool AA->bool", "UNION AA->bool AA->bool"
DIFF__SAME__UNION__e1:"fun", "bool", "UNION", "DIFF", "=", "AA->bool", "DIFF (UNION AA->bool AA->bool) AA->bool", "DIFF AA->bool AA->bool", "UNION AA->bool AA->bool"
INSERT__DEF:"prod", "fun", "bool", "_2C", "INSERT", "IN", "GSPEC", "=", "AA", "AA->bool", "GSPEC (\AA. _2C AA (AA = AA \/ IN AA AA->bool))", "IN AA AA->bool", "INSERT AA AA->bool", "_2C AA (AA = AA \/ IN AA AA->bool)"
IN__INSERT:"fun", "bool", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA (INSERT AA AA->bool)", "IN AA (INSERT AA AA->bool) <=> AA = AA \/ IN AA AA->bool", "IN AA AA->bool", "INSERT AA AA->bool"
INSERT__applied:"fun", "bool", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA AA->bool AA", "INSERT AA AA->bool AA <=> AA = AA \/ IN AA AA->bool"
COMPONENT:"fun", "bool", "INSERT", "IN", "AA", "AA->bool", "IN AA (INSERT AA AA->bool)", "INSERT AA AA->bool"
SET__CASES:"fun", "bool", "~", "INSERT", "IN", "EMPTY", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA AA->bool", "{}"
DECOMPOSITION:"fun", "bool", "~", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "IN AA AA->bool <=> (?AA->bool. AA->bool = INSERT AA AA->bool /\ ~IN AA AA->bool)", "INSERT AA AA->bool"
ABSORPTION:"fun", "bool", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "IN AA AA->bool <=> INSERT AA AA->bool = AA->bool", "INSERT AA AA->bool"
ABSORPTION__RWT:"fun", "bool", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA AA->bool"
INSERT__INSERT:"fun", "bool", "INSERT", "=", "AA", "AA->bool", "INSERT AA (INSERT AA AA->bool)", "INSERT AA AA->bool"
INSERT__COMM:"fun", "bool", "INSERT", "=", "AA", "AA->bool", "INSERT AA (INSERT AA AA->bool)", "INSERT AA AA->bool"
INSERT__UNIV:"fun", "bool", "UNIV", "INSERT", "=", "(:A)", "AA", "INSERT AA (:A)"
NOT__INSERT__EMPTY:"fun", "bool", "~", "INSERT", "EMPTY", "=", "AA", "AA->bool", "INSERT AA AA->bool", "{}"
NOT__EMPTY__INSERT:"fun", "bool", "~", "INSERT", "EMPTY", "=", "AA", "AA->bool", "INSERT AA AA->bool", "{}"
INSERT__UNION:"fun", "bool", "UNION", "INSERT", "IN", "COND", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA (UNION AA->bool AA->bool)", "INSERT AA AA->bool", "UNION (INSERT AA AA->bool) AA->bool", "UNION AA->bool AA->bool", "if IN AA AA->bool then UNION AA->bool AA->bool else INSERT AA (UNION AA->bool AA->bool)"
INSERT__UNION__EQ:"fun", "bool", "UNION", "INSERT", "=", "AA", "AA->bool", "INSERT AA (UNION AA->bool AA->bool)", "INSERT AA AA->bool", "UNION (INSERT AA AA->bool) AA->bool", "UNION AA->bool AA->bool"
INSERT__INTER:"fun", "bool", "INTER", "INSERT", "IN", "COND", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA (INTER AA->bool AA->bool)", "INSERT AA AA->bool", "INTER (INSERT AA AA->bool) AA->bool", "INTER AA->bool AA->bool", "if IN AA AA->bool then INSERT AA (INTER AA->bool AA->bool) else INTER AA->bool AA->bool"
DISJOINT__INSERT:"fun", "bool", "~", "INSERT", "IN", "DISJOINT", "=", "AA", "AA->bool", "DISJOINT (INSERT AA AA->bool) AA->bool", "DISJOINT (INSERT AA AA->bool) AA->bool <=> DISJOINT AA->bool AA->bool /\ ~IN AA AA->bool", "DISJOINT AA->bool AA->bool", "IN AA AA->bool", "INSERT AA AA->bool"
DISJOINT__INSERT_27:"fun", "bool", "~", "INSERT", "IN", "DISJOINT", "=", "AA", "AA->bool", "DISJOINT AA->bool (INSERT AA AA->bool)", "DISJOINT AA->bool (INSERT AA AA->bool) <=> DISJOINT AA->bool AA->bool /\ ~IN AA AA->bool", "DISJOINT AA->bool AA->bool", "IN AA AA->bool", "INSERT AA AA->bool"
INSERT__SUBSET:"fun", "bool", "SUBSET", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA AA->bool", "SUBSET (INSERT AA AA->bool) AA->bool", "SUBSET (INSERT AA AA->bool) AA->bool <=> IN AA AA->bool /\ SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
SUBSET__INSERT:"fun", "bool", "~", "SUBSET", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA AA->bool", "SUBSET AA->bool (INSERT AA AA->bool)", "SUBSET AA->bool (INSERT AA AA->bool) <=> SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
INSERT__DIFF:"fun", "bool", "INSERT", "IN", "DIFF", "COND", "=", "AA", "AA->bool", "DIFF (INSERT AA AA->bool) AA->bool", "DIFF AA->bool AA->bool", "IN AA AA->bool", "INSERT AA (DIFF AA->bool AA->bool)", "INSERT AA AA->bool", "if IN AA AA->bool then DIFF AA->bool AA->bool else INSERT AA (DIFF AA->bool AA->bool)"
UNIV__BOOL:"fun", "bool", "UNIV", "T", "INSERT", "F", "EMPTY", "=", "(:bool)", "F", "T", "{F}", "{T, F}", "{}"
DELETE__DEF:"fun", "bool", "INSERT", "EMPTY", "DIFF", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "DIFF AA->bool {AA}", "{AA}", "{}"
IN__DELETE:"fun", "bool", "~", "IN", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "IN AA (DELETE AA->bool AA)", "IN AA (DELETE AA->bool AA) <=> IN AA AA->bool /\ ~(AA = AA)", "IN AA AA->bool"
DELETE__applied:"fun", "bool", "~", "IN", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA AA", "DELETE AA->bool AA AA <=> IN AA AA->bool /\ ~(AA = AA)", "IN AA AA->bool"
DELETE__NON__ELEMENT:"fun", "bool", "~", "IN", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "IN AA AA->bool", "~IN AA AA->bool <=> DELETE AA->bool AA = AA->bool"
DELETE__NON__ELEMENT__RWT:"fun", "bool", "~", "IN", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "IN AA AA->bool"
IN__DELETE__EQ:"fun", "bool", "IN", "DELETE", "=", "(IN AA AA->bool <=> IN AA AA->bool) <=> IN AA (DELETE AA->bool AA) <=> IN AA (DELETE AA->bool AA)", "AA", "AA->bool", "DELETE AA->bool AA", "IN AA (DELETE AA->bool AA)", "IN AA (DELETE AA->bool AA) <=> IN AA (DELETE AA->bool AA)", "IN AA AA->bool", "IN AA AA->bool <=> IN AA AA->bool"
EMPTY__DELETE:"fun", "bool", "EMPTY", "DELETE", "=", "AA", "DELETE {} AA", "{}"
DELETE__DELETE:"fun", "bool", "DELETE", "=", "AA", "AA->bool", "DELETE (DELETE AA->bool AA) AA", "DELETE AA->bool AA"
DELETE__COMM:"fun", "bool", "DELETE", "=", "AA", "AA->bool", "DELETE (DELETE AA->bool AA) AA", "DELETE AA->bool AA"
DELETE__SUBSET:"fun", "bool", "SUBSET", "DELETE", "AA", "AA->bool", "DELETE AA->bool AA", "SUBSET (DELETE AA->bool AA) AA->bool"
SUBSET__DELETE:"fun", "bool", "~", "SUBSET", "IN", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "IN AA AA->bool", "SUBSET AA->bool (DELETE AA->bool AA)", "SUBSET AA->bool (DELETE AA->bool AA) <=> ~IN AA AA->bool /\ SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
SUBSET__INSERT__DELETE:"fun", "bool", "SUBSET", "INSERT", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "INSERT AA AA->bool", "SUBSET (DELETE AA->bool AA) AA->bool", "SUBSET AA->bool (INSERT AA AA->bool)", "SUBSET AA->bool (INSERT AA AA->bool) <=> SUBSET (DELETE AA->bool AA) AA->bool"
DIFF__INSERT:"fun", "bool", "INSERT", "DIFF", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "DIFF (DELETE AA->bool AA) AA->bool", "DIFF AA->bool (INSERT AA AA->bool)", "INSERT AA AA->bool"
PSUBSET__INSERT__SUBSET:"fun", "bool", "~", "SUBSET", "PSUBSET", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "INSERT AA AA->bool", "PSUBSET AA->bool AA->bool", "PSUBSET AA->bool AA->bool <=> (?AA. ~IN AA AA->bool /\ SUBSET (INSERT AA AA->bool) AA->bool)", "SUBSET (INSERT AA AA->bool) AA->bool"
PSUBSET__MEMBER:"fun", "bool", "~", "SUBSET", "PSUBSET", "IN", "=", "AA", "AA->bool", "IN AA AA->bool", "PSUBSET AA->bool AA->bool", "PSUBSET AA->bool AA->bool <=> SUBSET AA->bool AA->bool /\ (?AA. IN AA AA->bool /\ ~IN AA AA->bool)", "SUBSET AA->bool AA->bool"
DELETE__INSERT:"fun", "bool", "INSERT", "DELETE", "COND", "=", "AA", "AA->bool", "DELETE (INSERT AA AA->bool) AA", "DELETE AA->bool AA", "INSERT AA (DELETE AA->bool AA)", "INSERT AA AA->bool", "if AA = AA then DELETE AA->bool AA else INSERT AA (DELETE AA->bool AA)"
INSERT__DELETE:"fun", "bool", "INSERT", "IN", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "IN AA AA->bool", "INSERT AA (DELETE AA->bool AA)"
DELETE__INTER:"fun", "bool", "INTER", "DELETE", "=", "AA", "AA->bool", "DELETE (INTER AA->bool AA->bool) AA", "DELETE AA->bool AA", "INTER (DELETE AA->bool AA) AA->bool", "INTER AA->bool AA->bool"
DISJOINT__DELETE__SYM:"fun", "bool", "DISJOINT", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "DISJOINT (DELETE AA->bool AA) AA->bool", "DISJOINT (DELETE AA->bool AA) AA->bool <=> DISJOINT (DELETE AA->bool AA) AA->bool"
CHOICE__DEF:"fun", "bool", "~", "IN", "EMPTY", "CHOICE", "=", "AA->bool", "CHOICE AA->bool", "IN (CHOICE AA->bool) AA->bool", "{}"
REST__DEF:"fun", "bool", "REST", "DELETE", "CHOICE", "=", "AA->bool", "CHOICE AA->bool", "DELETE AA->bool (CHOICE AA->bool)", "REST AA->bool"
CHOICE__NOT__IN__REST:"fun", "bool", "~", "REST", "IN", "CHOICE", "AA->bool", "CHOICE AA->bool", "IN (CHOICE AA->bool) (REST AA->bool)", "REST AA->bool"
CHOICE__INSERT__REST:"fun", "bool", "~", "REST", "INSERT", "EMPTY", "CHOICE", "=", "AA->bool", "CHOICE AA->bool", "INSERT (CHOICE AA->bool) (REST AA->bool)", "REST AA->bool", "{}"
REST__SUBSET:"fun", "bool", "SUBSET", "REST", "AA->bool", "REST AA->bool", "SUBSET (REST AA->bool) AA->bool"
REST__PSUBSET:"fun", "bool", "~", "REST", "PSUBSET", "EMPTY", "=", "AA->bool", "PSUBSET (REST AA->bool) AA->bool", "REST AA->bool", "{}"
SING__DEF:"fun", "bool", "SING", "INSERT", "EMPTY", "=", "AA", "AA->bool", "SING AA->bool", "SING AA->bool <=> (?AA. AA->bool = {AA})", "{AA}", "{}"
SING0:"fun", "bool", "SING", "INSERT", "EMPTY", "AA", "SING {AA}", "{AA}", "{}"
SING__EMPTY:"fun", "bool", "SING", "F", "EMPTY", "=", "F", "SING {}", "SING {} <=> F", "{}"
SING__INSERT:"fun", "bool", "SING", "INSERT", "EMPTY", "=", "AA", "AA->bool", "INSERT AA AA->bool", "SING (INSERT AA AA->bool)", "SING (INSERT AA AA->bool) <=> AA->bool = {} \/ AA->bool = {AA}", "{AA}", "{}"
SING__UNION:"fun", "bool", "UNION", "SING", "EMPTY", "=", "AA->bool", "SING (UNION AA->bool AA->bool)", "SING (UNION AA->bool AA->bool) <=> SING AA->bool /\ AA->bool = {} \/ SING AA->bool /\ AA->bool = {} \/ SING AA->bool /\ SING AA->bool /\ AA->bool = AA->bool", "SING AA->bool", "UNION AA->bool AA->bool", "{}"
IN__SING:"fun", "bool", "INSERT", "IN", "EMPTY", "=", "AA", "IN AA {AA}", "IN AA {AA} <=> AA = AA", "{AA}", "{}"
SING__applied:"fun", "bool", "INSERT", "EMPTY", "=", "AA", "{AA} AA", "{AA} AA <=> AA = AA", "{}"
NOT__SING__EMPTY:"fun", "bool", "~", "INSERT", "EMPTY", "=", "AA", "{AA}", "{}"
NOT__EMPTY__SING:"fun", "bool", "~", "INSERT", "EMPTY", "=", "AA", "{AA}", "{}"
EQUAL__SING:"fun", "bool", "INSERT", "EMPTY", "=", "AA", "{AA}", "{AA} = {AA} <=> AA = AA", "{}"
DISJOINT__SING__EMPTY:"fun", "bool", "INSERT", "EMPTY", "DISJOINT", "AA", "DISJOINT {AA} {}", "{AA}", "{}"
INSERT__SING__UNION:"fun", "bool", "UNION", "INSERT", "EMPTY", "=", "AA", "AA->bool", "INSERT AA AA->bool", "UNION {AA} AA->bool", "{AA}", "{}"
SING__DELETE:"fun", "bool", "INSERT", "EMPTY", "DELETE", "=", "AA", "DELETE {AA} AA", "{AA}", "{}"
DELETE__EQ__SING:"fun", "bool", "INSERT", "IN", "EMPTY", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "DELETE AA->bool AA = {} <=> AA->bool = {AA}", "IN AA AA->bool", "{AA}", "{}"
CHOICE__SING:"fun", "bool", "INSERT", "EMPTY", "CHOICE", "=", "AA", "CHOICE {AA}", "{AA}", "{}"
REST__SING:"fun", "bool", "REST", "INSERT", "EMPTY", "=", "AA", "REST {AA}", "{AA}", "{}"
SING__IFF__EMPTY__REST:"fun", "bool", "~", "SING", "REST", "EMPTY", "=", "AA->bool", "REST AA->bool", "SING AA->bool", "SING AA->bool <=> ~(AA->bool = {}) /\ REST AA->bool = {}", "{}"
IMAGE__DEF:"prod", "fun", "bool", "_2C", "IN", "IMAGE", "GSPEC", "=", "AB", "AB->A", "AB->A AB", "AB->bool", "GSPEC (\AB. _2C (AB->A AB) (IN AB AB->bool))", "IMAGE AB->A AB->bool", "IN AB AB->bool", "_2C (AB->A AB) (IN AB AB->bool)"
IN__IMAGE:"fun", "bool", "IN", "IMAGE", "=", "AA", "AB", "AB->A", "AB->A AB", "AB->bool", "IMAGE AB->A AB->bool", "IN AA (IMAGE AB->A AB->bool)", "IN AA (IMAGE AB->A AB->bool) <=> (?AB. AA = AB->A AB /\ IN AB AB->bool)", "IN AB AB->bool"
IMAGE__applied:"fun", "bool", "IN", "IMAGE", "=", "AA", "AB", "AB->A", "AB->A AB", "AB->bool", "IMAGE AB->A AB->bool AA", "IMAGE AB->A AB->bool AA <=> (?AB. AA = AB->A AB /\ IN AB AB->bool)", "IN AB AB->bool"
IMAGE__IN:"fun", "bool", "IN", "IMAGE", "AB", "AB->A", "AB->A AB", "AB->bool", "IMAGE AB->A AB->bool", "IN (AB->A AB) (IMAGE AB->A AB->bool)", "IN AB AB->bool"
IMAGE__EMPTY:"fun", "bool", "IMAGE", "EMPTY", "=", "AA->B", "IMAGE AA->B {}", "{}"
IMAGE__ID:"fun", "bool", "IMAGE", "=", "AA", "AA->bool", "IMAGE (\AA. AA) AA->bool"
IMAGE__COMPOSE:"fun", "bool", "o", "IMAGE", "=", "AB->A", "AC->B", "AC->bool", "IMAGE (o AB->A AC->B) AC->bool", "IMAGE AB->A (IMAGE AC->B AC->bool)", "IMAGE AC->B AC->bool", "o AB->A AC->B"
IMAGE__INSERT:"fun", "bool", "INSERT", "IMAGE", "=", "AB", "AB->A", "AB->A AB", "AB->bool", "IMAGE AB->A (INSERT AB AB->bool)", "IMAGE AB->A AB->bool", "INSERT (AB->A AB) (IMAGE AB->A AB->bool)", "INSERT AB AB->bool"
IMAGE__EQ__EMPTY:"fun", "bool", "IMAGE", "EMPTY", "=", "AB->A", "AB->bool", "IMAGE AB->A AB->bool", "IMAGE AB->A AB->bool = {} <=> AB->bool = {}", "{}"
IMAGE__DELETE:"fun", "bool", "~", "IN", "IMAGE", "DELETE", "=", "AB", "AB->A", "AB->bool", "DELETE AB->bool AB", "IMAGE AB->A (DELETE AB->bool AB)", "IMAGE AB->A AB->bool", "IN AB AB->bool"
IMAGE__UNION:"fun", "bool", "UNION", "IMAGE", "=", "AB->A", "AB->bool", "IMAGE AB->A (UNION AB->bool AB->bool)", "IMAGE AB->A AB->bool", "UNION (IMAGE AB->A AB->bool) (IMAGE AB->A AB->bool)", "UNION AB->bool AB->bool"
IMAGE__SUBSET:"fun", "bool", "SUBSET", "IMAGE", "AB->A", "AB->bool", "IMAGE AB->A AB->bool", "SUBSET (IMAGE AB->A AB->bool) (IMAGE AB->A AB->bool)", "SUBSET AB->bool AB->bool"
IMAGE__INTER:"fun", "bool", "SUBSET", "INTER", "IMAGE", "AB->A", "AB->bool", "IMAGE AB->A (INTER AB->bool AB->bool)", "IMAGE AB->A AB->bool", "INTER (IMAGE AB->A AB->bool) (IMAGE AB->A AB->bool)", "INTER AB->bool AB->bool", "SUBSET (IMAGE AB->A (INTER AB->bool AB->bool)) (INTER (IMAGE AB->A AB->bool) (IMAGE AB->A AB->bool))"
IMAGE__11:"fun", "bool", "IMAGE", "=", "AB", "AB->A", "AB->A AB", "AB->A AB = AB->A AB <=> AB = AB", "AB->bool", "IMAGE AB->A AB->bool", "IMAGE AB->A AB->bool = IMAGE AB->A AB->bool <=> AB->bool = AB->bool"
IMAGE__CONG:"fun", "bool", "IN", "IMAGE", "=", "AB", "AB->A", "AB->A AB", "AB->bool", "IMAGE AB->A AB->bool", "IN AB AB->bool"
INJ__DEF:"fun", "bool", "INJ", "IN", "=", "AA->bool", "AB", "AB->A", "AB->A AB", "AB->bool", "IN (AB->A AB) AA->bool", "IN AB AB->bool", "INJ AB->A AB->bool AA->bool", "INJ AB->A AB->bool AA->bool <=> (!AB. IN AB AB->bool ==> IN (AB->A AB) AA->bool) /\ (!AB AB. IN AB AB->bool /\ IN AB AB->bool ==> AB->A AB = AB->A AB ==> AB = AB)"
INJ__IFF:"fun", "bool", "INJ", "IN", "=", "AA->bool", "AB", "AB->A", "AB->A AB", "AB->A AB = AB->A AB <=> AB = AB", "AB->bool", "IN (AB->A AB) AA->bool", "IN AB AB->bool", "INJ AB->A AB->bool AA->bool", "INJ AB->A AB->bool AA->bool <=> (!AB. IN AB AB->bool ==> IN (AB->A AB) AA->bool) /\ (!AB AB. IN AB AB->bool /\ IN AB AB->bool ==> (AB->A AB = AB->A AB <=> AB = AB))"
INJ__ID:"fun", "bool", "INJ", "AA", "AA->bool", "INJ (\AA. AA) AA->bool AA->bool"
INJ__COMPOSE:"fun", "bool", "o", "INJ", "AA->C", "AA->bool", "AB->A", "AB->bool", "AC->bool", "INJ (o AA->C AB->A) AB->bool AC->bool", "INJ AA->C AA->bool AC->bool", "INJ AB->A AB->bool AA->bool", "o AA->C AB->A"
INJ__EMPTY__0:"fun", "bool", "INJ", "EMPTY", "AA->B", "AB->bool", "INJ AA->B {} AB->bool", "{}"
INJ__EMPTY__e1:"fun", "bool", "INJ", "EMPTY", "=", "AB->A", "AB->bool", "INJ AB->A AB->bool {}", "INJ AB->A AB->bool {} <=> AB->bool = {}", "{}"
INJ__DELETE:"fun", "bool", "INJ", "IN", "DELETE", "AA->bool", "AB", "AB->A", "AB->A AB", "AB->bool", "DELETE AA->bool (AB->A AB)", "DELETE AB->bool AB", "IN AB AB->bool", "INJ AB->A (DELETE AB->bool AB) (DELETE AA->bool (AB->A AB))", "INJ AB->A AB->bool AA->bool"
INJ__INSERT:"fun", "bool", "INSERT", "INJ", "IN", "=", "AA->bool", "AB", "AB->A", "AB->A AB", "AB->bool", "IN (AB->A AB) AA->bool", "IN AB AB->bool", "INJ AB->A (INSERT AB AB->bool) AA->bool", "INJ AB->A (INSERT AB AB->bool) AA->bool <=> INJ AB->A AB->bool AA->bool /\ IN (AB->A AB) AA->bool /\ (!AB. IN AB AB->bool /\ AB->A AB = AB->A AB ==> AB = AB)", "INJ AB->A AB->bool AA->bool", "INSERT AB AB->bool"
INJ__SUBSET:"fun", "bool", "SUBSET", "INJ", "AA->B", "AA->bool", "AB->bool", "INJ AA->B AA->bool AB->bool", "SUBSET AA->bool AA->bool", "SUBSET AB->bool AB->bool"
SURJ__DEF:"fun", "bool", "SURJ", "IN", "=", "AA", "AA->B", "AA->B AA", "AA->bool", "AB", "AB->bool", "IN (AA->B AA) AB->bool", "IN AA AA->bool", "IN AB AB->bool", "SURJ AA->B AA->bool AB->bool", "SURJ AA->B AA->bool AB->bool <=> (!AA. IN AA AA->bool ==> IN (AA->B AA) AB->bool) /\ (!AB. IN AB AB->bool ==> (?AA. IN AA AA->bool /\ AA->B AA = AB))"
SURJ__ID:"fun", "bool", "SURJ", "AA", "AA->bool", "SURJ (\AA. AA) AA->bool AA->bool"
SURJ__COMPOSE:"fun", "bool", "o", "SURJ", "AA->C", "AA->bool", "AB->A", "AB->bool", "AC->bool", "SURJ (o AA->C AB->A) AB->bool AC->bool", "SURJ AA->C AA->bool AC->bool", "SURJ AB->A AB->bool AA->bool", "o AA->C AB->A"
SURJ__EMPTY__0:"fun", "bool", "SURJ", "EMPTY", "=", "AA->B", "AB->bool", "SURJ AA->B {} AB->bool", "SURJ AA->B {} AB->bool <=> AB->bool = {}", "{}"
SURJ__EMPTY__e1:"fun", "bool", "SURJ", "EMPTY", "=", "AB->A", "AB->bool", "SURJ AB->A AB->bool {}", "SURJ AB->A AB->bool {} <=> AB->bool = {}", "{}"
IMAGE__SURJ:"fun", "bool", "SURJ", "IMAGE", "=", "AA->B", "AA->bool", "AB->bool", "IMAGE AA->B AA->bool", "SURJ AA->B AA->bool AB->bool", "SURJ AA->B AA->bool AB->bool <=> IMAGE AA->B AA->bool = AB->bool"
SURJ__IMAGE:"fun", "bool", "SURJ", "IMAGE", "AB->A", "AB->bool", "IMAGE AB->A AB->bool", "SURJ AB->A AB->bool (IMAGE AB->A AB->bool)"
SURJ__INJ__INV:"fun", "bool", "SURJ", "INJ", "IN", "=", "AA->B", "AA->B (AB->A AB)", "AA->bool", "AB", "AB->A", "AB->A AB", "AB->bool", "IN AB AB->bool", "INJ AB->A AB->bool AA->bool", "SURJ AA->B AA->bool AB->bool"
BIJ__DEF:"fun", "bool", "SURJ", "INJ", "BIJ", "=", "AA->B", "AA->bool", "AB->bool", "BIJ AA->B AA->bool AB->bool", "BIJ AA->B AA->bool AB->bool <=> INJ AA->B AA->bool AB->bool /\ SURJ AA->B AA->bool AB->bool", "INJ AA->B AA->bool AB->bool", "SURJ AA->B AA->bool AB->bool"
BIJ__ID:"fun", "bool", "BIJ", "AA", "AA->bool", "BIJ (\AA. AA) AA->bool AA->bool"
BIJ__EMPTY__0:"fun", "bool", "EMPTY", "BIJ", "=", "AA->B", "AB->bool", "BIJ AA->B {} AB->bool", "BIJ AA->B {} AB->bool <=> AB->bool = {}", "{}"
BIJ__EMPTY__e1:"fun", "bool", "EMPTY", "BIJ", "=", "AB->A", "AB->bool", "BIJ AB->A AB->bool {}", "BIJ AB->A AB->bool {} <=> AB->bool = {}", "{}"
BIJ__COMPOSE:"fun", "bool", "o", "BIJ", "AA->C", "AA->bool", "AB->A", "AB->bool", "AC->bool", "BIJ (o AA->C AB->A) AB->bool AC->bool", "BIJ AA->C AA->bool AC->bool", "BIJ AB->A AB->bool AA->bool", "o AA->C AB->A"
BIJ__DELETE:"fun", "bool", "IN", "DELETE", "BIJ", "AA->bool", "AB", "AB->A", "AB->A AB", "AB->bool", "BIJ AB->A (DELETE AB->bool AB) (DELETE AA->bool (AB->A AB))", "BIJ AB->A AB->bool AA->bool", "DELETE AA->bool (AB->A AB)", "DELETE AB->bool AB", "IN AB AB->bool"
LINV__DEF:"fun", "bool", "LINV", "INJ", "IN", "=", "AA->bool", "AB", "AB->A", "AB->A AB", "AB->bool", "IN AB AB->bool", "INJ AB->A AB->bool AA->bool", "LINV AB->A AB->bool (AB->A AB)"
BIJ__LINV__INV:"fun", "bool", "LINV", "IN", "BIJ", "=", "AA->B", "AA->B (LINV AA->B AA->bool AB)", "AA->bool", "AB", "AB->bool", "BIJ AA->B AA->bool AB->bool", "IN AB AB->bool", "LINV AA->B AA->bool AB"
BIJ__LINV__BIJ:"fun", "bool", "LINV", "BIJ", "AA->bool", "AB->A", "AB->bool", "BIJ (LINV AB->A AB->bool) AA->bool AB->bool", "BIJ AB->A AB->bool AA->bool", "LINV AB->A AB->bool"
BIJ__IFF__INV:"fun", "bool", "IN", "BIJ", "=", "AA", "AA->B", "AA->B (AB->A AB)", "AA->B AA", "AA->bool", "AB", "AB->A (AA->B AA)", "AB->A AB", "AB->bool", "BIJ AA->B AA->bool AB->bool", "BIJ AA->B AA->bool AB->bool <=> (!AA. IN AA AA->bool ==> IN (AA->B AA) AB->bool) /\ (?AB->A. (!AB. IN AB AB->bool ==> IN (AB->A AB) AA->bool) /\ (!AA. IN AA AA->bool ==> AB->A (AA->B AA) = AA) /\ (!AB. IN AB AB->bool ==> AA->B (AB->A AB) = AB))", "IN (AA->B AA) AB->bool", "IN (AB->A AB) AA->bool", "IN AA AA->bool", "IN AB AB->bool"
BIJ__INSERT:"fun", "bool", "~", "INSERT", "IN", "DELETE", "BIJ", "=", "AA", "AA->B", "AA->B AA", "AA->bool", "AB->bool", "BIJ AA->B (INSERT AA AA->bool) AB->bool", "BIJ AA->B (INSERT AA AA->bool) AB->bool <=> ~IN AA AA->bool /\ IN (AA->B AA) AB->bool /\ BIJ AA->B AA->bool (DELETE AB->bool (AA->B AA)) \/ IN AA AA->bool /\ BIJ AA->B AA->bool AB->bool", "BIJ AA->B AA->bool (DELETE AB->bool (AA->B AA))", "BIJ AA->B AA->bool AB->bool", "DELETE AB->bool (AA->B AA)", "IN (AA->B AA) AB->bool", "IN AA AA->bool", "INSERT AA AA->bool"
RINV__DEF:"fun", "bool", "SURJ", "RINV", "IN", "=", "AA->B", "AA->B (RINV AA->B AA->bool AB)", "AA->bool", "AB", "AB->bool", "IN AB AB->bool", "RINV AA->B AA->bool AB", "SURJ AA->B AA->bool AB->bool"
FINITE__DEF:"fun", "bool", "INSERT", "FINITE", "EMPTY", "=", "A(A->bool)->bool (INSERT AA AA->bool)", "A(A->bool)->bool AA->bool", "A(A->bool)->bool {}", "AA", "AA->bool", "FINITE AA->bool", "FINITE AA->bool <=> (!A(A->bool)->bool. A(A->bool)->bool {} /\ (!AA->bool. A(A->bool)->bool AA->bool ==> (!AA. A(A->bool)->bool (INSERT AA AA->bool))) ==> A(A->bool)->bool AA->bool)", "INSERT AA AA->bool", "{}"
FINITE__EMPTY:"fun", "bool", "FINITE", "EMPTY", "FINITE {}", "{}"
FINITE__INDUCT:"fun", "bool", "~", "INSERT", "IN", "FINITE", "EMPTY", "A(A->bool)->bool (INSERT AA AA->bool)", "A(A->bool)->bool AA->bool", "A(A->bool)->bool {}", "AA", "AA->bool", "FINITE AA->bool", "IN AA AA->bool", "INSERT AA AA->bool", "{}"
FINITE__INSERT:"fun", "bool", "INSERT", "FINITE", "=", "AA", "AA->bool", "FINITE (INSERT AA AA->bool)", "FINITE (INSERT AA AA->bool) <=> FINITE AA->bool", "FINITE AA->bool", "INSERT AA AA->bool"
FINITE__DELETE:"fun", "bool", "FINITE", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "FINITE (DELETE AA->bool AA)", "FINITE (DELETE AA->bool AA) <=> FINITE AA->bool", "FINITE AA->bool"
FINITE__REST:"fun", "bool", "REST", "FINITE", "AA->bool", "FINITE (REST AA->bool)", "FINITE AA->bool", "REST AA->bool"
FINITE__UNION:"fun", "bool", "UNION", "FINITE", "=", "AA->bool", "FINITE (UNION AA->bool AA->bool)", "FINITE (UNION AA->bool AA->bool) <=> FINITE AA->bool /\ FINITE AA->bool", "FINITE AA->bool", "UNION AA->bool AA->bool"
INTER__FINITE:"fun", "bool", "INTER", "FINITE", "AA->bool", "FINITE (INTER AA->bool AA->bool)", "FINITE AA->bool", "INTER AA->bool AA->bool"
SUBSET__FINITE:"fun", "bool", "SUBSET", "FINITE", "AA->bool", "FINITE AA->bool", "SUBSET AA->bool AA->bool"
SUBSET__FINITE__I:"fun", "bool", "SUBSET", "FINITE", "AA->bool", "FINITE AA->bool", "SUBSET AA->bool AA->bool"
PSUBSET__FINITE:"fun", "bool", "PSUBSET", "FINITE", "AA->bool", "FINITE AA->bool", "PSUBSET AA->bool AA->bool"
FINITE__DIFF:"fun", "bool", "FINITE", "DIFF", "AA->bool", "DIFF AA->bool AA->bool", "FINITE (DIFF AA->bool AA->bool)", "FINITE AA->bool"
FINITE__DIFF__down:"fun", "bool", "FINITE", "DIFF", "AA->bool", "DIFF AA->bool AA->bool", "FINITE (DIFF AA->bool AA->bool)", "FINITE AA->bool"
FINITE__SING:"fun", "bool", "INSERT", "FINITE", "EMPTY", "AA", "FINITE {AA}", "{AA}", "{}"
SING__FINITE:"fun", "bool", "SING", "FINITE", "AA->bool", "FINITE AA->bool", "SING AA->bool"
IMAGE__FINITE:"fun", "bool", "IMAGE", "FINITE", "AB->A", "AB->bool", "FINITE (IMAGE AB->A AB->bool)", "FINITE AB->bool", "IMAGE AB->A AB->bool"
FINITELY__INJECTIVE__IMAGE__FINITE:"prod", "fun", "bool", "_2C", "IMAGE", "GSPEC", "FINITE", "=", "AA", "AB", "AB->A", "AB->A AB", "AB->bool", "FINITE (GSPEC (\AB. _2C AB (AA = AB->A AB)))", "FINITE (IMAGE AB->A AB->bool)", "FINITE (IMAGE AB->A AB->bool) <=> FINITE AB->bool", "FINITE AB->bool", "GSPEC (\AB. _2C AB (AA = AB->A AB))", "IMAGE AB->A AB->bool", "_2C AB (AA = AB->A AB)"
INJECTIVE__IMAGE__FINITE:"fun", "bool", "IMAGE", "FINITE", "=", "AB", "AB->A", "AB->A AB", "AB->A AB = AB->A AB <=> AB = AB", "AB->bool", "FINITE (IMAGE AB->A AB->bool)", "FINITE (IMAGE AB->A AB->bool) <=> FINITE AB->bool", "FINITE AB->bool", "IMAGE AB->A AB->bool"
FINITE__INJ:"fun", "bool", "INJ", "FINITE", "AA->bool", "AB->A", "AB->bool", "FINITE AA->bool", "FINITE AB->bool", "INJ AB->A AB->bool AA->bool"
REL__RESTRICT__DEF:"fun", "bool", "REL__RESTRICT", "IN", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool", "IN AA AA->bool", "REL__RESTRICT AA->A->bool AA->bool AA AA", "REL__RESTRICT AA->A->bool AA->bool AA AA <=> IN AA AA->bool /\ IN AA AA->bool /\ AA->A->bool AA AA"
REL__RESTRICT__EMPTY:"fun", "bool", "REL__RESTRICT", "EMPTY__REL", "EMPTY", "=", "AA->A->bool", "EMPTY__REL", "REL__RESTRICT AA->A->bool {}", "{}"
REL__RESTRICT__SUBSET:"fun", "bool", "SUBSET", "RSUBSET", "REL__RESTRICT", "AA->A->bool", "AA->bool", "REL__RESTRICT AA->A->bool AA->bool", "RSUBSET (REL__RESTRICT AA->A->bool AA->bool) (REL__RESTRICT AA->A->bool AA->bool)", "SUBSET AA->bool AA->bool"
CARD__DEF__0:"num", "fun", "bool", "EMPTY", "CARD", "=", "0", "0", "CARD {}", "{}"
CARD__DEF__e1:"num", "fun", "bool", "SUC", "INSERT", "IN", "FINITE", "COND", "CARD", "=", "AA", "AA->bool", "CARD (INSERT AA AA->bool)", "CARD AA->bool", "FINITE AA->bool", "IN AA AA->bool", "INSERT AA AA->bool", "SUC (CARD AA->bool)", "if IN AA AA->bool then CARD AA->bool else SUC (CARD AA->bool)"
CARD__EMPTY:"num", "fun", "bool", "EMPTY", "CARD", "=", "0", "0", "CARD {}", "{}"
CARD__INSERT:"num", "fun", "bool", "SUC", "INSERT", "IN", "FINITE", "COND", "CARD", "=", "AA", "AA->bool", "CARD (INSERT AA AA->bool)", "CARD AA->bool", "FINITE AA->bool", "IN AA AA->bool", "INSERT AA AA->bool", "SUC (CARD AA->bool)", "if IN AA AA->bool then CARD AA->bool else SUC (CARD AA->bool)"
CARD__EQ__0:"num", "fun", "bool", "FINITE", "EMPTY", "CARD", "=", "0", "0", "AA->bool", "CARD AA->bool", "CARD AA->bool = 0 <=> AA->bool = {}", "FINITE AA->bool", "{}"
CARD__DELETE:"num", "fun", "bool", "_2D", "ZERO", "NUMERAL", "IN", "FINITE", "DELETE", "COND", "CARD", "BIT1", "=", "AA", "AA->bool", "BIT1 ZERO", "CARD (DELETE AA->bool AA)", "CARD AA->bool", "DELETE AA->bool AA", "FINITE AA->bool", "IN AA AA->bool", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D (CARD AA->bool) (NUMERAL (BIT1 ZERO))", "if IN AA AA->bool then _2D (CARD AA->bool) (NUMERAL (BIT1 ZERO)) else CARD AA->bool"
CARD__INTER__LESS__EQ:"num", "fun", "bool", "_3C_3D", "INTER", "FINITE", "CARD", "AA->bool", "CARD (INTER AA->bool AA->bool)", "CARD AA->bool", "FINITE AA->bool", "INTER AA->bool AA->bool", "_3C_3D (CARD (INTER AA->bool AA->bool)) (CARD AA->bool)"
CARD__UNION:"num", "fun", "bool", "_2B", "UNION", "INTER", "FINITE", "CARD", "=", "AA->bool", "CARD (INTER AA->bool AA->bool)", "CARD (UNION AA->bool AA->bool)", "CARD AA->bool", "FINITE AA->bool", "INTER AA->bool AA->bool", "UNION AA->bool AA->bool", "_2B (CARD (UNION AA->bool AA->bool)) (CARD (INTER AA->bool AA->bool))", "_2B (CARD AA->bool) (CARD AA->bool)"
CARD__UNION__EQN:"num", "fun", "bool", "_2D", "_2B", "UNION", "INTER", "FINITE", "CARD", "=", "AA->bool", "CARD (INTER AA->bool AA->bool)", "CARD (UNION AA->bool AA->bool)", "CARD AA->bool", "FINITE AA->bool", "INTER AA->bool AA->bool", "UNION AA->bool AA->bool", "_2B (CARD AA->bool) (CARD AA->bool)", "_2D (_2B (CARD AA->bool) (CARD AA->bool)) (CARD (INTER AA->bool AA->bool))"
CARD__SUBSET:"num", "fun", "bool", "_3C_3D", "SUBSET", "FINITE", "CARD", "AA->bool", "CARD AA->bool", "FINITE AA->bool", "SUBSET AA->bool AA->bool", "_3C_3D (CARD AA->bool) (CARD AA->bool)"
CARD__PSUBSET:"num", "fun", "bool", "_3C", "PSUBSET", "FINITE", "CARD", "AA->bool", "CARD AA->bool", "FINITE AA->bool", "PSUBSET AA->bool AA->bool", "_3C (CARD AA->bool) (CARD AA->bool)"
SUBSET__EQ__CARD:"num", "fun", "bool", "SUBSET", "FINITE", "CARD", "=", "AA->bool", "CARD AA->bool", "FINITE AA->bool", "SUBSET AA->bool AA->bool"
CARD__SING:"num", "fun", "bool", "ZERO", "NUMERAL", "INSERT", "EMPTY", "CARD", "BIT1", "=", "AA", "BIT1 ZERO", "CARD {AA}", "NUMERAL (BIT1 ZERO)", "ZERO", "{AA}", "{}"
SING__IFF__CARD1:"num", "fun", "bool", "ZERO", "SING", "NUMERAL", "FINITE", "CARD", "BIT1", "=", "AA->bool", "BIT1 ZERO", "CARD AA->bool", "FINITE AA->bool", "NUMERAL (BIT1 ZERO)", "SING AA->bool", "SING AA->bool <=> CARD AA->bool = NUMERAL (BIT1 ZERO) /\ FINITE AA->bool", "ZERO"
CARD__DIFF:"num", "fun", "bool", "_2D", "INTER", "FINITE", "DIFF", "CARD", "=", "AA->bool", "CARD (DIFF AA->bool AA->bool)", "CARD (INTER AA->bool AA->bool)", "CARD AA->bool", "DIFF AA->bool AA->bool", "FINITE AA->bool", "INTER AA->bool AA->bool", "_2D (CARD AA->bool) (CARD (INTER AA->bool AA->bool))"
CARD__DIFF__EQN:"num", "fun", "bool", "_2D", "INTER", "FINITE", "DIFF", "CARD", "=", "AA->bool", "CARD (DIFF AA->bool AA->bool)", "CARD (INTER AA->bool AA->bool)", "CARD AA->bool", "DIFF AA->bool AA->bool", "FINITE AA->bool", "INTER AA->bool AA->bool", "_2D (CARD AA->bool) (CARD (INTER AA->bool AA->bool))"
LESS__CARD__DIFF:"num", "fun", "bool", "_3C", "FINITE", "DIFF", "CARD", "0", "0", "AA->bool", "CARD (DIFF AA->bool AA->bool)", "CARD AA->bool", "DIFF AA->bool AA->bool", "FINITE AA->bool", "_3C (CARD AA->bool) (CARD AA->bool)", "_3C 0 (CARD (DIFF AA->bool AA->bool))"
BIJ__FINITE:"fun", "bool", "FINITE", "BIJ", "AA->B", "AA->bool", "AB->bool", "BIJ AA->B AA->bool AB->bool", "FINITE AA->bool", "FINITE AB->bool"
FINITE__BIJ__CARD__EQ:"num", "fun", "bool", "FINITE", "CARD", "BIJ", "=", "AA->B", "AA->bool", "AB->bool", "BIJ AA->B AA->bool AB->bool", "CARD AA->bool", "CARD AB->bool", "FINITE AA->bool", "FINITE AB->bool"
CARD__INJ__IMAGE:"num", "fun", "bool", "IMAGE", "FINITE", "CARD", "=", "AB", "AB->A", "AB->A AB", "AB->A AB = AB->A AB <=> AB = AB", "AB->bool", "CARD (IMAGE AB->A AB->bool)", "CARD AB->bool", "FINITE AB->bool", "IMAGE AB->A AB->bool"
FINITE__COMPLETE__INDUCTION:"fun", "bool", "PSUBSET", "FINITE", "A(A->bool)->bool AA->bool", "AA->bool", "FINITE AA->bool", "PSUBSET AA->bool AA->bool"
INJ__CARD:"num", "fun", "bool", "_3C_3D", "INJ", "FINITE", "CARD", "AA->B", "AA->bool", "AB->bool", "CARD AA->bool", "CARD AB->bool", "FINITE AB->bool", "INJ AA->B AA->bool AB->bool", "_3C_3D (CARD AA->bool) (CARD AB->bool)"
PHP:"num", "fun", "bool", "~", "_3C", "INJ", "FINITE", "CARD", "AA->B", "AA->bool", "AB->bool", "CARD AA->bool", "CARD AB->bool", "FINITE AB->bool", "INJ AA->B AA->bool AB->bool", "_3C (CARD AB->bool) (CARD AA->bool)"
INFINITE__DEF:"bool", "T", "T"
NOT__IN__FINITE:"fun", "bool", "~", "UNIV", "IN", "FINITE", "=", "(:A)", "AA", "AA->bool", "FINITE (:A)", "FINITE AA->bool", "IN AA AA->bool", "~FINITE (:A) <=> (!AA->bool. FINITE AA->bool ==> (?AA. ~IN AA AA->bool))"
INFINITE__INHAB:"fun", "bool", "~", "IN", "FINITE", "AA", "AA->bool", "FINITE AA->bool", "IN AA AA->bool"
IMAGE__11__INFINITE:"fun", "bool", "~", "IMAGE", "FINITE", "=", "AB", "AB->A", "AB->A AB", "AB->bool", "FINITE (IMAGE AB->A AB->bool)", "FINITE AB->bool", "IMAGE AB->A AB->bool"
INFINITE__SUBSET:"fun", "bool", "~", "SUBSET", "FINITE", "AA->bool", "FINITE AA->bool", "SUBSET AA->bool AA->bool"
IN__INFINITE__NOT__FINITE:"fun", "bool", "~", "IN", "FINITE", "AA", "AA->bool", "FINITE AA->bool", "IN AA AA->bool"
INFINITE__UNIV:"fun", "bool", "~", "UNIV", "FINITE", "=", "(:A)", "AA", "AA->A AA", "FINITE (:A)", "~FINITE (:A) <=> (?AA->A. (!AA AA. AA->A AA = AA->A AA ==> AA = AA) /\ (?AA. !AA. ~(AA->A AA = AA)))"
INFINITE__NUM__UNIV:"num", "fun", "bool", "~", "UNIV", "FINITE", "(:num)", "FINITE (:num)"
FINITE__PSUBSET__INFINITE:"fun", "bool", "~", "SUBSET", "PSUBSET", "FINITE", "=", "AA->bool", "FINITE AA->bool", "PSUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool", "~FINITE AA->bool <=> (!AA->bool. FINITE AA->bool ==> SUBSET AA->bool AA->bool ==> PSUBSET AA->bool AA->bool)"
FINITE__PSUBSET__UNIV:"fun", "bool", "~", "UNIV", "PSUBSET", "FINITE", "=", "(:A)", "AA->bool", "FINITE (:A)", "FINITE AA->bool", "PSUBSET AA->bool (:A)", "~FINITE (:A) <=> (!AA->bool. FINITE AA->bool ==> PSUBSET AA->bool (:A))"
INFINITE__DIFF__FINITE:"fun", "bool", "~", "FINITE", "EMPTY", "DIFF", "=", "AA->bool", "DIFF AA->bool AA->bool", "FINITE AA->bool", "{}"
FINITE__ISO__NUM:"prod", "num", "fun", "bool", "_3C", "_2C", "GSPEC", "FINITE", "CARD", "=", "AA->bool", "Anum", "Anum->A Anum", "CARD AA->bool", "FINITE AA->bool", "GSPEC (\Anum. _2C (Anum->A Anum) (_3C Anum (CARD AA->bool)))", "_2C (Anum->A Anum) (_3C Anum (CARD AA->bool))", "_3C Anum (CARD AA->bool)"
FINITE__WEAK__ENUMERATE:"num", "fun", "bool", "_3C", "IN", "FINITE", "=", "AA", "AA->bool", "Anum", "Anum->A Anum", "FINITE AA->bool", "FINITE AA->bool <=> (?Anum->A Anum. !AA. IN AA AA->bool <=> (?Anum. _3C Anum Anum /\ AA = Anum->A Anum))", "IN AA AA->bool", "IN AA AA->bool <=> (?Anum. _3C Anum Anum /\ AA = Anum->A Anum)", "_3C Anum Anum"
FINITE__WF__noloops:"fun", "bool", "irreflexive", "WF", "TC", "REL__RESTRICT", "FINITE", "=", "AA->A->bool", "AA->bool", "FINITE AA->bool", "REL__RESTRICT AA->A->bool AA->bool", "TC (REL__RESTRICT AA->A->bool AA->bool)", "WF (REL__RESTRICT AA->A->bool AA->bool)", "WF (REL__RESTRICT AA->A->bool AA->bool) <=> irreflexive (TC (REL__RESTRICT AA->A->bool AA->bool))", "irreflexive (TC (REL__RESTRICT AA->A->bool AA->bool))"
FINITE__StrongOrder__WF:"fun", "bool", "WF", "StrongOrder", "REL__RESTRICT", "FINITE", "AA->A->bool", "AA->bool", "FINITE AA->bool", "REL__RESTRICT AA->A->bool AA->bool", "StrongOrder (REL__RESTRICT AA->A->bool AA->bool)", "WF (REL__RESTRICT AA->A->bool AA->bool)"
BIGUNION0:"prod", "fun", "bool", "_2C", "IN", "GSPEC", "BIGUNION", "=", "A(A->bool)->bool", "AA", "AA->bool", "BIGUNION A(A->bool)->bool", "GSPEC (\AA. _2C AA (?AA->bool. IN AA->bool A(A->bool)->bool /\ IN AA AA->bool))", "IN AA AA->bool", "IN AA->bool A(A->bool)->bool", "_2C AA (?AA->bool. IN AA->bool A(A->bool)->bool /\ IN AA AA->bool)"
IN__BIGUNION:"fun", "bool", "IN", "BIGUNION", "=", "A(A->bool)->bool", "AA", "AA->bool", "BIGUNION A(A->bool)->bool", "IN AA (BIGUNION A(A->bool)->bool)", "IN AA (BIGUNION A(A->bool)->bool) <=> (?AA->bool. IN AA AA->bool /\ IN AA->bool A(A->bool)->bool)", "IN AA AA->bool", "IN AA->bool A(A->bool)->bool"
BIGUNION__applied:"fun", "bool", "IN", "BIGUNION", "=", "A(A->bool)->bool", "AA", "AA->bool", "BIGUNION A(A->bool)->bool AA", "BIGUNION A(A->bool)->bool AA <=> (?AA->bool. IN AA AA->bool /\ IN AA->bool A(A->bool)->bool)", "IN AA AA->bool", "IN AA->bool A(A->bool)->bool"
BIGUNION__EMPTY:"fun", "bool", "EMPTY", "BIGUNION", "=", "BIGUNION {}", "{}"
BIGUNION__EQ__EMPTY__0:"fun", "bool", "INSERT", "EMPTY", "BIGUNION", "=", "A(A->bool)->bool", "BIGUNION A(A->bool)->bool", "BIGUNION A(A->bool)->bool = {} <=> A(A->bool)->bool = {} \/ A(A->bool)->bool = {{}}", "{{}}", "{}"
BIGUNION__EQ__EMPTY__e1:"fun", "bool", "INSERT", "EMPTY", "BIGUNION", "=", "A(A->bool)->bool", "BIGUNION A(A->bool)->bool", "{{}}", "{}", "{} = BIGUNION A(A->bool)->bool <=> A(A->bool)->bool = {} \/ A(A->bool)->bool = {{}}"
BIGUNION__SING:"fun", "bool", "INSERT", "EMPTY", "BIGUNION", "=", "AA->bool", "BIGUNION {AA->bool}", "{AA->bool}", "{}"
BIGUNION__UNION:"fun", "bool", "UNION", "BIGUNION", "=", "A(A->bool)->bool", "BIGUNION (UNION A(A->bool)->bool A(A->bool)->bool)", "BIGUNION A(A->bool)->bool", "UNION (BIGUNION A(A->bool)->bool) (BIGUNION A(A->bool)->bool)", "UNION A(A->bool)->bool A(A->bool)->bool"
DISJOINT__BIGUNION__0:"fun", "bool", "IN", "DISJOINT", "BIGUNION", "=", "A(A->bool)->bool", "AA->bool", "BIGUNION A(A->bool)->bool", "DISJOINT (BIGUNION A(A->bool)->bool) AA->bool", "DISJOINT (BIGUNION A(A->bool)->bool) AA->bool <=> (!AA->bool. IN AA->bool A(A->bool)->bool ==> DISJOINT AA->bool AA->bool)", "DISJOINT AA->bool AA->bool", "IN AA->bool A(A->bool)->bool"
DISJOINT__BIGUNION__e1:"fun", "bool", "IN", "DISJOINT", "BIGUNION", "=", "A(A->bool)->bool", "AA->bool", "BIGUNION A(A->bool)->bool", "DISJOINT AA->bool (BIGUNION A(A->bool)->bool)", "DISJOINT AA->bool (BIGUNION A(A->bool)->bool) <=> (!AA->bool. IN AA->bool A(A->bool)->bool ==> DISJOINT AA->bool AA->bool)", "DISJOINT AA->bool AA->bool", "IN AA->bool A(A->bool)->bool"
BIGUNION__INSERT:"fun", "bool", "UNION", "INSERT", "BIGUNION", "=", "A(A->bool)->bool", "AA->bool", "BIGUNION (INSERT AA->bool A(A->bool)->bool)", "BIGUNION A(A->bool)->bool", "INSERT AA->bool A(A->bool)->bool", "UNION AA->bool (BIGUNION A(A->bool)->bool)"
BIGUNION__SUBSET:"fun", "bool", "SUBSET", "IN", "BIGUNION", "=", "A(A->bool)->bool", "AA->bool", "BIGUNION A(A->bool)->bool", "IN AA->bool A(A->bool)->bool", "SUBSET (BIGUNION A(A->bool)->bool) AA->bool", "SUBSET (BIGUNION A(A->bool)->bool) AA->bool <=> (!AA->bool. IN AA->bool A(A->bool)->bool ==> SUBSET AA->bool AA->bool)", "SUBSET AA->bool AA->bool"
FINITE__BIGUNION:"fun", "bool", "IN", "FINITE", "BIGUNION", "A(A->bool)->bool", "AA->bool", "BIGUNION A(A->bool)->bool", "FINITE (BIGUNION A(A->bool)->bool)", "FINITE A(A->bool)->bool", "FINITE AA->bool", "IN AA->bool A(A->bool)->bool"
FINITE__BIGUNION__EQ:"fun", "bool", "IN", "FINITE", "BIGUNION", "=", "A(A->bool)->bool", "AA->bool", "BIGUNION A(A->bool)->bool", "FINITE (BIGUNION A(A->bool)->bool)", "FINITE (BIGUNION A(A->bool)->bool) <=> FINITE A(A->bool)->bool /\ (!AA->bool. IN AA->bool A(A->bool)->bool ==> FINITE AA->bool)", "FINITE A(A->bool)->bool", "FINITE AA->bool", "IN AA->bool A(A->bool)->bool"
SUBSET__BIGUNION__I:"fun", "bool", "SUBSET", "IN", "BIGUNION", "A(A->bool)->bool", "AA->bool", "BIGUNION A(A->bool)->bool", "IN AA->bool A(A->bool)->bool", "SUBSET AA->bool (BIGUNION A(A->bool)->bool)"
CARD__BIGUNION__SAME__SIZED__SETS:"num", "fun", "bool", "~", "_2A", "IN", "FINITE", "DISJOINT", "CARD", "BIGUNION", "=", "A(A->bool)->bool", "AA->bool", "Anum", "BIGUNION A(A->bool)->bool", "CARD (BIGUNION A(A->bool)->bool)", "CARD A(A->bool)->bool", "CARD AA->bool", "DISJOINT AA->bool AA->bool", "FINITE A(A->bool)->bool", "FINITE AA->bool", "IN AA->bool A(A->bool)->bool", "_2A (CARD A(A->bool)->bool) Anum"
BIGINTER0:"prod", "fun", "bool", "_2C", "IN", "GSPEC", "BIGINTER", "=", "A(A->bool)->bool", "AA", "AA->bool", "BIGINTER A(A->bool)->bool", "GSPEC (\AA. _2C AA (!AA->bool. IN AA->bool A(A->bool)->bool ==> IN AA AA->bool))", "IN AA AA->bool", "IN AA->bool A(A->bool)->bool", "_2C AA (!AA->bool. IN AA->bool A(A->bool)->bool ==> IN AA AA->bool)"
IN__BIGINTER:"fun", "bool", "IN", "BIGINTER", "=", "A(A->bool)->bool", "AA", "AA->bool", "BIGINTER A(A->bool)->bool", "IN AA (BIGINTER A(A->bool)->bool)", "IN AA (BIGINTER A(A->bool)->bool) <=> (!AA->bool. IN AA->bool A(A->bool)->bool ==> IN AA AA->bool)", "IN AA AA->bool", "IN AA->bool A(A->bool)->bool"
BIGINTER__applied:"fun", "bool", "IN", "BIGINTER", "=", "A(A->bool)->bool", "AA", "AA->bool", "BIGINTER A(A->bool)->bool AA", "BIGINTER A(A->bool)->bool AA <=> (!AA->bool. IN AA->bool A(A->bool)->bool ==> IN AA AA->bool)", "IN AA AA->bool", "IN AA->bool A(A->bool)->bool"
BIGINTER__INSERT:"fun", "bool", "INTER", "INSERT", "BIGINTER", "=", "A(A->bool)->bool", "AA->bool", "BIGINTER (INSERT AA->bool A(A->bool)->bool)", "BIGINTER A(A->bool)->bool", "INSERT AA->bool A(A->bool)->bool", "INTER AA->bool (BIGINTER A(A->bool)->bool)"
BIGINTER__EMPTY:"fun", "bool", "UNIV", "EMPTY", "BIGINTER", "=", "(:A)", "BIGINTER {}", "{}"
BIGINTER__INTER:"fun", "bool", "INTER", "INSERT", "EMPTY", "BIGINTER", "=", "AA->bool", "BIGINTER {AA->bool, AA->bool}", "INTER AA->bool AA->bool", "{AA->bool, AA->bool}", "{AA->bool}", "{}"
BIGINTER__SING:"fun", "bool", "INSERT", "EMPTY", "BIGINTER", "=", "AA->bool", "BIGINTER {AA->bool}", "{AA->bool}", "{}"
SUBSET__BIGINTER:"fun", "bool", "SUBSET", "IN", "BIGINTER", "=", "A(A->bool)->bool", "AA->bool", "BIGINTER A(A->bool)->bool", "IN AA->bool A(A->bool)->bool", "SUBSET AA->bool (BIGINTER A(A->bool)->bool)", "SUBSET AA->bool (BIGINTER A(A->bool)->bool) <=> (!AA->bool. IN AA->bool A(A->bool)->bool ==> SUBSET AA->bool AA->bool)", "SUBSET AA->bool AA->bool"
DISJOINT__BIGINTER:"fun", "bool", "IN", "DISJOINT", "BIGINTER", "A(A->bool)->bool", "AA->bool", "BIGINTER A(A->bool)->bool", "DISJOINT (BIGINTER A(A->bool)->bool) AA->bool", "DISJOINT AA->bool (BIGINTER A(A->bool)->bool)", "DISJOINT AA->bool AA->bool", "IN AA->bool A(A->bool)->bool"
BIGINTER__UNION:"fun", "bool", "UNION", "INTER", "BIGINTER", "=", "A(A->bool)->bool", "BIGINTER (UNION A(A->bool)->bool A(A->bool)->bool)", "BIGINTER A(A->bool)->bool", "INTER (BIGINTER A(A->bool)->bool) (BIGINTER A(A->bool)->bool)", "UNION A(A->bool)->bool A(A->bool)->bool"
CROSS__DEF:"prod", "fun", "bool", "_2C", "SND", "IN", "GSPEC", "FST", "CROSS", "=", "AA#B", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "FST AA#B", "GSPEC (\AA#B. _2C AA#B (IN (FST AA#B) AA->bool /\ IN (SND AA#B) AB->bool))", "IN (FST AA#B) AA->bool", "IN (SND AA#B) AB->bool", "SND AA#B", "_2C AA#B (IN (FST AA#B) AA->bool /\ IN (SND AA#B) AB->bool)"
IN__CROSS:"prod", "fun", "bool", "SND", "IN", "FST", "CROSS", "=", "AA#B", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "FST AA#B", "IN (FST AA#B) AA->bool", "IN (SND AA#B) AB->bool", "IN AA#B (CROSS AA->bool AB->bool)", "IN AA#B (CROSS AA->bool AB->bool) <=> IN (FST AA#B) AA->bool /\ IN (SND AA#B) AB->bool", "SND AA#B"
CROSS__applied:"prod", "fun", "bool", "SND", "IN", "FST", "CROSS", "=", "AA#B", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool AA#B", "CROSS AA->bool AB->bool AA#B <=> IN (FST AA#B) AA->bool /\ IN (SND AA#B) AB->bool", "FST AA#B", "IN (FST AA#B) AA->bool", "IN (SND AA#B) AB->bool", "SND AA#B"
CROSS__EMPTY__0:"prod", "fun", "bool", "EMPTY", "CROSS", "=", "AA->bool", "CROSS AA->bool {}", "{}"
CROSS__EMPTY__e1:"prod", "fun", "bool", "EMPTY", "CROSS", "=", "AB->bool", "CROSS {} AB->bool", "{}"
CROSS__EMPTY__EQN:"prod", "fun", "bool", "EMPTY", "CROSS", "=", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "CROSS AA->bool AB->bool = {} <=> AA->bool = {} \/ AB->bool = {}", "{}"
CROSS__INSERT__LEFT:"prod", "fun", "bool", "UNION", "INSERT", "EMPTY", "CROSS", "=", "AA", "AA->bool", "AB->bool", "CROSS (INSERT AA AA->bool) AB->bool", "CROSS AA->bool AB->bool", "CROSS {AA} AB->bool", "INSERT AA AA->bool", "UNION (CROSS {AA} AB->bool) (CROSS AA->bool AB->bool)", "{AA}", "{}"
CROSS__INSERT__RIGHT:"prod", "fun", "bool", "UNION", "INSERT", "EMPTY", "CROSS", "=", "AA->bool", "AB", "AB->bool", "CROSS AA->bool (INSERT AB AB->bool)", "CROSS AA->bool AB->bool", "CROSS AA->bool {AB}", "INSERT AB AB->bool", "UNION (CROSS AA->bool {AB}) (CROSS AA->bool AB->bool)", "{AB}", "{}"
FINITE__CROSS:"prod", "fun", "bool", "FINITE", "CROSS", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "FINITE (CROSS AA->bool AB->bool)", "FINITE AA->bool", "FINITE AB->bool"
CROSS__SINGS:"prod", "fun", "bool", "_2C", "INSERT", "EMPTY", "CROSS", "=", "AA", "AB", "CROSS {AA} {AB}", "_2C AA AB", "{AA}", "{AB}", "{_2C AA AB}", "{}"
CARD__SING__CROSS:"prod", "num", "fun", "bool", "INSERT", "FINITE", "EMPTY", "CROSS", "CARD", "=", "AA", "AB->bool", "CARD (CROSS {AA} AB->bool)", "CARD AB->bool", "CROSS {AA} AB->bool", "FINITE AB->bool", "{AA}", "{}"
CARD__CROSS:"prod", "num", "fun", "bool", "_2A", "FINITE", "CROSS", "CARD", "=", "AA->bool", "AB->bool", "CARD (CROSS AA->bool AB->bool)", "CARD AA->bool", "CARD AB->bool", "CROSS AA->bool AB->bool", "FINITE AA->bool", "FINITE AB->bool", "_2A (CARD AA->bool) (CARD AB->bool)"
CROSS__SUBSET:"prod", "fun", "bool", "SUBSET", "EMPTY", "CROSS", "=", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "SUBSET (CROSS AA->bool AB->bool) (CROSS AA->bool AB->bool)", "SUBSET (CROSS AA->bool AB->bool) (CROSS AA->bool AB->bool) <=> AA->bool = {} \/ AB->bool = {} \/ SUBSET AA->bool AA->bool /\ SUBSET AB->bool AB->bool", "SUBSET AA->bool AA->bool", "SUBSET AB->bool AB->bool", "{}"
FINITE__CROSS__EQ:"prod", "fun", "bool", "FINITE", "EMPTY", "CROSS", "=", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "FINITE (CROSS AA->bool AB->bool)", "FINITE (CROSS AA->bool AB->bool) <=> AA->bool = {} \/ AB->bool = {} \/ FINITE AA->bool /\ FINITE AB->bool", "FINITE AA->bool", "FINITE AB->bool", "{}"
CROSS__UNIV:"prod", "fun", "bool", "UNIV", "CROSS", "=", "(:A#B)", "(:A)", "(:B)", "CROSS (:A) (:B)"
INFINITE__PAIR__UNIV:"prod", "fun", "bool", "UNIV", "FINITE", "=", "(:A#B)", "(:A)", "(:B)", "FINITE (:A#B)", "FINITE (:A#B) <=> FINITE (:A) /\ FINITE (:B)", "FINITE (:A)", "FINITE (:B)"
SUM__UNIV:"sum", "fun", "bool", "UNIV", "UNION", "INR", "INL", "IMAGE", "=", "(:A)", "(:A+B)", "(:B)", "IMAGE INL (:A)", "IMAGE INR (:B)", "INL", "INR", "UNION (IMAGE INL (:A)) (IMAGE INR (:B))"
INJ__INL:"sum", "fun", "bool", "INL", "INJ", "IN", "AA", "AA+B->bool", "AA->bool", "IN (INL AA) AA+B->bool", "IN AA AA->bool", "INJ INL AA->bool AA+B->bool", "INL", "INL AA"
INJ__INR:"sum", "fun", "bool", "INR", "INJ", "IN", "AA+B->bool", "AB", "AB->bool", "IN (INR AB) AA+B->bool", "IN AB AB->bool", "INJ INR AB->bool AA+B->bool", "INR", "INR AB"
COMPL__DEF:"fun", "bool", "UNIV", "DIFF", "COMPL", "=", "(:A)", "AA->bool", "COMPL AA->bool", "DIFF (:A) AA->bool"
IN__COMPL:"fun", "bool", "~", "IN", "COMPL", "=", "AA", "AA->bool", "COMPL AA->bool", "IN AA (COMPL AA->bool)", "IN AA (COMPL AA->bool) <=> ~IN AA AA->bool", "IN AA AA->bool"
COMPL__applied:"fun", "bool", "~", "IN", "COMPL", "=", "AA", "AA->bool", "COMPL AA->bool AA", "COMPL AA->bool AA <=> ~IN AA AA->bool", "IN AA AA->bool"
COMPL__COMPL:"fun", "bool", "COMPL", "=", "AA->bool", "COMPL (COMPL AA->bool)", "COMPL AA->bool"
COMPL__CLAUSES__0:"fun", "bool", "INTER", "EMPTY", "COMPL", "=", "AA->bool", "COMPL AA->bool", "INTER (COMPL AA->bool) AA->bool", "{}"
COMPL__CLAUSES__e1:"fun", "bool", "UNIV", "UNION", "COMPL", "=", "(:A)", "AA->bool", "COMPL AA->bool", "UNION (COMPL AA->bool) AA->bool"
COMPL__SPLITS:"fun", "bool", "UNION", "INTER", "COMPL", "=", "AA->bool", "COMPL AA->bool", "INTER (COMPL AA->bool) AA->bool", "INTER AA->bool AA->bool", "UNION (INTER AA->bool AA->bool) (INTER (COMPL AA->bool) AA->bool)"
INTER__UNION__COMPL:"fun", "bool", "UNION", "INTER", "COMPL", "=", "AA->bool", "COMPL (UNION (COMPL AA->bool) (COMPL AA->bool))", "COMPL AA->bool", "INTER AA->bool AA->bool", "UNION (COMPL AA->bool) (COMPL AA->bool)"
COMPL__EMPTY:"fun", "bool", "UNIV", "EMPTY", "COMPL", "=", "(:A)", "COMPL {}", "{}"
COMPL__INTER__0:"fun", "bool", "INTER", "EMPTY", "COMPL", "=", "AA->bool", "COMPL AA->bool", "INTER AA->bool (COMPL AA->bool)", "{}"
COMPL__INTER__e1:"fun", "bool", "INTER", "EMPTY", "COMPL", "=", "AA->bool", "COMPL AA->bool", "INTER (COMPL AA->bool) AA->bool", "{}"
COMPL__UNION:"fun", "bool", "UNION", "INTER", "COMPL", "=", "AA->bool", "COMPL (UNION AA->bool AA->bool)", "COMPL AA->bool", "INTER (COMPL AA->bool) (COMPL AA->bool)", "UNION AA->bool AA->bool"
count__def:"prod", "num", "fun", "bool", "count", "_3C", "_2C", "GSPEC", "=", "Anum", "GSPEC (\Anum. _2C Anum (_3C Anum Anum))", "_2C Anum (_3C Anum Anum)", "_3C Anum Anum", "count Anum"
IN__COUNT:"num", "fun", "bool", "count", "_3C", "IN", "=", "Anum", "IN Anum (count Anum)", "IN Anum (count Anum) <=> _3C Anum Anum", "_3C Anum Anum", "count Anum"
COUNT__applied:"num", "fun", "bool", "count", "_3C", "=", "Anum", "_3C Anum Anum", "count Anum Anum", "count Anum Anum <=> _3C Anum Anum"
COUNT__ZERO:"num", "fun", "bool", "count", "EMPTY", "=", "0", "0", "count 0", "{}"
COUNT__SUC:"num", "fun", "bool", "count", "SUC", "INSERT", "=", "Anum", "INSERT Anum (count Anum)", "SUC Anum", "count (SUC Anum)", "count Anum"
FINITE__COUNT:"num", "fun", "bool", "count", "FINITE", "Anum", "FINITE (count Anum)", "count Anum"
CARD__COUNT:"num", "fun", "bool", "count", "CARD", "=", "Anum", "CARD (count Anum)", "count Anum"
COUNT__11:"num", "fun", "bool", "count", "=", "Anum", "count Anum", "count Anum = count Anum <=> Anum = Anum"
ITSET__tupled__primitive__def:"prod", "fun", "bool", "~", "pair__CASE", "_40", "_2C", "WFREC", "WF", "REST", "ITSET__tupled", "I", "FINITE", "EMPTY", "COND", "CHOICE", "ARB", "=", "A(A->bool)#B", "A(A->bool)#B->(A->bool)#B->bool", "A(A->bool)#B->(A->bool)#B->bool (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)) (_2C AA->bool AB)", "A(A->bool)#B->B (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB))", "AA->B->B", "AA->B->B (CHOICE AA->bool) AB", "AA->bool", "AB", "ARB", "CHOICE AA->bool", "FINITE AA->bool", "I (if FINITE AA->bool then if AA->bool = {} then AB else A(A->bool)#B->B (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)) else ARB)", "ITSET__tupled AA->B->B", "REST AA->bool", "WF A(A->bool)#B->(A->bool)#B->bool", "WFREC (_40 (\A(A->bool)#B->(A->bool)#B->bool. WF A(A->bool)#B->(A->bool)#B->bool /\ (!AB AA->bool. FINITE AA->bool /\ ~(AA->bool = {}) ==> A(A->bool)#B->(A->bool)#B->bool (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)) (_2C AA->bool AB)))) (\A(A->bool)#B->B A(A->bool)#B. pair__CASE A(A->bool)#B (\AA->bool AB. I (if FINITE AA->bool then if AA->bool = {} then AB else A(A->bool)#B->B (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)) else ARB)))", "_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)", "_2C AA->bool AB", "_40 (\A(A->bool)#B->(A->bool)#B->bool. WF A(A->bool)#B->(A->bool)#B->bool /\ (!AB AA->bool. FINITE AA->bool /\ ~(AA->bool = {}) ==> A(A->bool)#B->(A->bool)#B->bool (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)) (_2C AA->bool AB)))", "if AA->bool = {} then AB else A(A->bool)#B->B (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB))", "if FINITE AA->bool then if AA->bool = {} then AB else A(A->bool)#B->B (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)) else ARB", "pair__CASE A(A->bool)#B (\AA->bool AB. I (if FINITE AA->bool then if AA->bool = {} then AB else A(A->bool)#B->B (_2C (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)) else ARB))", "{}"
ITSET__curried__def:"prod", "fun", "bool", "_2C", "ITSET__tupled", "ITSET", "=", "AA->B->B", "AA->bool", "AB", "ITSET AA->B->B AA->bool AB", "ITSET__tupled AA->B->B (_2C AA->bool AB)", "_2C AA->bool AB"
ITSET__ind:"fun", "bool", "~", "REST", "FINITE", "EMPTY", "CHOICE", "=", "A(A->bool)->B->bool (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)", "A(A->bool)->B->bool AA->bool AB", "AA->B->B (CHOICE AA->bool) AB", "AA->bool", "AB", "CHOICE AA->bool", "FINITE AA->bool", "REST AA->bool", "{}"
ITSET__def:"fun", "bool", "REST", "ITSET", "FINITE", "EMPTY", "COND", "CHOICE", "ARB", "=", "AA->B->B", "AA->B->B (CHOICE AA->bool) AB", "AA->bool", "AB", "ARB", "CHOICE AA->bool", "FINITE AA->bool", "ITSET AA->B->B (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)", "ITSET AA->B->B AA->bool AB", "REST AA->bool", "if AA->bool = {} then AB else ITSET AA->B->B (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)", "if FINITE AA->bool then if AA->bool = {} then AB else ITSET AA->B->B (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB) else ARB", "{}"
ITSET__IND:"fun", "bool", "~", "REST", "FINITE", "EMPTY", "CHOICE", "=", "A(A->bool)->B->bool (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)", "A(A->bool)->B->bool AA->bool AB", "AA->B->B (CHOICE AA->bool) AB", "AA->bool", "AB", "CHOICE AA->bool", "FINITE AA->bool", "REST AA->bool", "{}"
ITSET__THM:"fun", "bool", "REST", "ITSET", "FINITE", "EMPTY", "COND", "CHOICE", "=", "AA->B->B", "AA->B->B (CHOICE AA->bool) AB", "AA->bool", "AB", "CHOICE AA->bool", "FINITE AA->bool", "ITSET AA->B->B (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)", "ITSET AA->B->B AA->bool AB", "REST AA->bool", "if AA->bool = {} then AB else ITSET AA->B->B (REST AA->bool) (AA->B->B (CHOICE AA->bool) AB)", "{}"
ITSET__EMPTY:"fun", "bool", "ITSET", "EMPTY", "=", "AA->B->B", "AB", "ITSET AA->B->B {} AB", "{}"
ITSET__INSERT:"fun", "bool", "REST", "ITSET", "INSERT", "FINITE", "CHOICE", "=", "AA", "AA->B->B", "AA->B->B (CHOICE (INSERT AA AA->bool)) AB", "AA->bool", "AB", "CHOICE (INSERT AA AA->bool)", "FINITE AA->bool", "INSERT AA AA->bool", "ITSET AA->B->B (INSERT AA AA->bool) AB", "ITSET AA->B->B (REST (INSERT AA AA->bool)) (AA->B->B (CHOICE (INSERT AA AA->bool)) AB)", "REST (INSERT AA AA->bool)"
COMMUTING__ITSET__INSERT:"fun", "bool", "ITSET", "INSERT", "FINITE", "DELETE", "=", "AA", "AA->B->B", "AA->B->B AA (AA->B->B AA AB)", "AA->B->B AA AB", "AA->bool", "AB", "DELETE AA->bool AA", "FINITE AA->bool", "INSERT AA AA->bool", "ITSET AA->B->B (DELETE AA->bool AA) (AA->B->B AA AB)", "ITSET AA->B->B (INSERT AA AA->bool) AB"
COMMUTING__ITSET__RECURSES:"fun", "bool", "ITSET", "INSERT", "FINITE", "DELETE", "=", "AA", "AA->B->B", "AA->B->B AA (AA->B->B AA AB)", "AA->B->B AA (ITSET AA->B->B (DELETE AA->bool AA) AB)", "AA->B->B AA AB", "AA->bool", "AB", "DELETE AA->bool AA", "FINITE AA->bool", "INSERT AA AA->bool", "ITSET AA->B->B (DELETE AA->bool AA) AB", "ITSET AA->B->B (INSERT AA AA->bool) AB"
SUM__IMAGE__DEF:"num", "fun", "bool", "_2B", "SUM__IMAGE", "ITSET", "=", "0", "0", "AA", "AA->bool", "AA->num", "AA->num AA", "Anum", "ITSET (\AA Anum. _2B (AA->num AA) Anum) AA->bool 0", "SUM__IMAGE AA->num AA->bool", "_2B (AA->num AA) Anum"
SUM__IMAGE__THM__0:"num", "fun", "bool", "SUM__IMAGE", "EMPTY", "=", "0", "0", "AA->num", "SUM__IMAGE AA->num {}", "{}"
SUM__IMAGE__THM__e1:"num", "fun", "bool", "_2B", "SUM__IMAGE", "INSERT", "FINITE", "DELETE", "=", "AA", "AA->bool", "AA->num", "AA->num AA", "DELETE AA->bool AA", "FINITE AA->bool", "INSERT AA AA->bool", "SUM__IMAGE AA->num (DELETE AA->bool AA)", "SUM__IMAGE AA->num (INSERT AA AA->bool)", "_2B (AA->num AA) (SUM__IMAGE AA->num (DELETE AA->bool AA))"
SUM__IMAGE__SING:"num", "fun", "bool", "SUM__IMAGE", "INSERT", "EMPTY", "=", "AA", "AA->num", "AA->num AA", "SUM__IMAGE AA->num {AA}", "{AA}", "{}"
SUM__IMAGE__SUBSET__LE:"num", "fun", "bool", "_3C_3D", "SUM__IMAGE", "SUBSET", "FINITE", "AA->bool", "AA->num", "FINITE AA->bool", "SUBSET AA->bool AA->bool", "SUM__IMAGE AA->num AA->bool", "_3C_3D (SUM__IMAGE AA->num AA->bool) (SUM__IMAGE AA->num AA->bool)"
SUM__IMAGE__IN__LE:"num", "fun", "bool", "_3C_3D", "SUM__IMAGE", "IN", "FINITE", "AA", "AA->bool", "AA->num", "AA->num AA", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool", "_3C_3D (AA->num AA) (SUM__IMAGE AA->num AA->bool)"
SUM__IMAGE__DELETE:"num", "fun", "bool", "_2D", "SUM__IMAGE", "IN", "FINITE", "DELETE", "COND", "=", "AA", "AA->bool", "AA->num", "AA->num AA", "DELETE AA->bool AA", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num (DELETE AA->bool AA)", "SUM__IMAGE AA->num AA->bool", "_2D (SUM__IMAGE AA->num AA->bool) (AA->num AA)", "if IN AA AA->bool then _2D (SUM__IMAGE AA->num AA->bool) (AA->num AA) else SUM__IMAGE AA->num AA->bool"
SUM__IMAGE__UNION:"num", "fun", "bool", "_2D", "_2B", "UNION", "SUM__IMAGE", "INTER", "FINITE", "=", "AA->bool", "AA->num", "FINITE AA->bool", "INTER AA->bool AA->bool", "SUM__IMAGE AA->num (INTER AA->bool AA->bool)", "SUM__IMAGE AA->num (UNION AA->bool AA->bool)", "SUM__IMAGE AA->num AA->bool", "UNION AA->bool AA->bool", "_2B (SUM__IMAGE AA->num AA->bool) (SUM__IMAGE AA->num AA->bool)", "_2D (_2B (SUM__IMAGE AA->num AA->bool) (SUM__IMAGE AA->num AA->bool)) (SUM__IMAGE AA->num (INTER AA->bool AA->bool))"
SUM__IMAGE__lower__bound:"num", "fun", "bool", "_3C_3D", "_2A", "SUM__IMAGE", "IN", "FINITE", "CARD", "AA", "AA->bool", "AA->num", "AA->num AA", "Anum", "CARD AA->bool", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool", "_2A (CARD AA->bool) Anum", "_3C_3D (_2A (CARD AA->bool) Anum) (SUM__IMAGE AA->num AA->bool)", "_3C_3D Anum (AA->num AA)"
SUM__IMAGE__upper__bound:"num", "fun", "bool", "_3C_3D", "_2A", "SUM__IMAGE", "IN", "FINITE", "CARD", "AA", "AA->bool", "AA->num", "AA->num AA", "Anum", "CARD AA->bool", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool", "_2A (CARD AA->bool) Anum", "_3C_3D (AA->num AA) Anum", "_3C_3D (SUM__IMAGE AA->num AA->bool) (_2A (CARD AA->bool) Anum)"
SUM__SAME__IMAGE:"num", "fun", "bool", "_2A", "SUM__IMAGE", "IN", "FINITE", "CARD", "=", "AA", "AA->bool", "AA->num", "AA->num AA", "CARD AA->bool", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool", "_2A (CARD AA->bool) (AA->num AA)"
SUM__IMAGE__CONG:"num", "fun", "bool", "SUM__IMAGE", "IN", "=", "AA", "AA->bool", "AA->num", "AA->num AA", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool"
SUM__IMAGE__ZERO:"num", "fun", "bool", "SUM__IMAGE", "IN", "FINITE", "=", "0", "0", "AA", "AA->bool", "AA->num", "AA->num AA", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool", "SUM__IMAGE AA->num AA->bool = 0 <=> (!AA. IN AA AA->bool ==> AA->num AA = 0)"
ABS__DIFF__SUM__IMAGE:"num", "fun", "bool", "_3C_3D", "SUM__IMAGE", "FINITE", "ABS__DIFF", "AA", "AA->bool", "AA->num", "AA->num AA", "ABS__DIFF (AA->num AA) (AA->num AA)", "ABS__DIFF (SUM__IMAGE AA->num AA->bool) (SUM__IMAGE AA->num AA->bool)", "FINITE AA->bool", "SUM__IMAGE (\AA. ABS__DIFF (AA->num AA) (AA->num AA)) AA->bool", "SUM__IMAGE AA->num AA->bool", "_3C_3D (ABS__DIFF (SUM__IMAGE AA->num AA->bool) (SUM__IMAGE AA->num AA->bool)) (SUM__IMAGE (\AA. ABS__DIFF (AA->num AA) (AA->num AA)) AA->bool)"
SUM__IMAGE__MONO__LESS__EQ:"num", "fun", "bool", "_3C_3D", "SUM__IMAGE", "IN", "FINITE", "AA", "AA->bool", "AA->num", "AA->num AA", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool", "_3C_3D (AA->num AA) (AA->num AA)", "_3C_3D (SUM__IMAGE AA->num AA->bool) (SUM__IMAGE AA->num AA->bool)"
SUM__IMAGE__MONO__LESS:"num", "fun", "bool", "_3C_3D", "_3C", "SUM__IMAGE", "IN", "FINITE", "AA", "AA->bool", "AA->num", "AA->num AA", "FINITE AA->bool", "IN AA AA->bool", "SUM__IMAGE AA->num AA->bool", "_3C (AA->num AA) (AA->num AA)", "_3C (SUM__IMAGE AA->num AA->bool) (SUM__IMAGE AA->num AA->bool)", "_3C_3D (AA->num AA) (AA->num AA)"
SUM__SET__DEF:"num", "fun", "bool", "SUM__SET", "SUM__IMAGE", "I", "=", "I", "SUM__IMAGE I", "SUM__SET"
SUM__SET__THM__0:"num", "fun", "bool", "SUM__SET", "EMPTY", "=", "0", "0", "SUM__SET {}", "{}"
SUM__SET__THM__e1:"num", "fun", "bool", "_2B", "SUM__SET", "INSERT", "FINITE", "DELETE", "=", "Anum", "Anum->bool", "DELETE Anum->bool Anum", "FINITE Anum->bool", "INSERT Anum Anum->bool", "SUM__SET (DELETE Anum->bool Anum)", "SUM__SET (INSERT Anum Anum->bool)", "_2B Anum (SUM__SET (DELETE Anum->bool Anum))"
SUM__SET__EMPTY:"num", "fun", "bool", "SUM__SET", "EMPTY", "=", "0", "0", "SUM__SET {}", "{}"
SUM__SET__SING:"num", "fun", "bool", "SUM__SET", "INSERT", "EMPTY", "=", "Anum", "SUM__SET {Anum}", "{Anum}", "{}"
SUM__SET__SUBSET__LE:"num", "fun", "bool", "_3C_3D", "SUM__SET", "SUBSET", "FINITE", "Anum->bool", "FINITE Anum->bool", "SUBSET Anum->bool Anum->bool", "SUM__SET Anum->bool", "_3C_3D (SUM__SET Anum->bool) (SUM__SET Anum->bool)"
SUM__SET__IN__LE:"num", "fun", "bool", "_3C_3D", "SUM__SET", "IN", "FINITE", "Anum", "Anum->bool", "FINITE Anum->bool", "IN Anum Anum->bool", "SUM__SET Anum->bool", "_3C_3D Anum (SUM__SET Anum->bool)"
SUM__SET__DELETE:"num", "fun", "bool", "_2D", "SUM__SET", "IN", "FINITE", "DELETE", "COND", "=", "Anum", "Anum->bool", "DELETE Anum->bool Anum", "FINITE Anum->bool", "IN Anum Anum->bool", "SUM__SET (DELETE Anum->bool Anum)", "SUM__SET Anum->bool", "_2D (SUM__SET Anum->bool) Anum", "if IN Anum Anum->bool then _2D (SUM__SET Anum->bool) Anum else SUM__SET Anum->bool"
SUM__SET__UNION:"num", "fun", "bool", "_2D", "_2B", "UNION", "SUM__SET", "INTER", "FINITE", "=", "Anum->bool", "FINITE Anum->bool", "INTER Anum->bool Anum->bool", "SUM__SET (INTER Anum->bool Anum->bool)", "SUM__SET (UNION Anum->bool Anum->bool)", "SUM__SET Anum->bool", "UNION Anum->bool Anum->bool", "_2B (SUM__SET Anum->bool) (SUM__SET Anum->bool)", "_2D (_2B (SUM__SET Anum->bool) (SUM__SET Anum->bool)) (SUM__SET (INTER Anum->bool Anum->bool))"
PROD__IMAGE__DEF:"num", "fun", "bool", "_2A", "ZERO", "PROD__IMAGE", "NUMERAL", "ITSET", "BIT1", "=", "AA", "AA->bool", "AA->num", "AA->num AA", "Anum", "BIT1 ZERO", "ITSET (\AA Anum. _2A (AA->num AA) Anum) AA->bool (NUMERAL (BIT1 ZERO))", "NUMERAL (BIT1 ZERO)", "PROD__IMAGE AA->num AA->bool", "ZERO", "_2A (AA->num AA) Anum"
PROD__IMAGE__THM__0:"num", "fun", "bool", "ZERO", "PROD__IMAGE", "NUMERAL", "EMPTY", "BIT1", "=", "AA->num", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "PROD__IMAGE AA->num {}", "ZERO", "{}"
PROD__IMAGE__THM__e1:"num", "fun", "bool", "_2A", "PROD__IMAGE", "INSERT", "FINITE", "DELETE", "=", "AA", "AA->bool", "AA->num", "AA->num AA", "DELETE AA->bool AA", "FINITE AA->bool", "INSERT AA AA->bool", "PROD__IMAGE AA->num (DELETE AA->bool AA)", "PROD__IMAGE AA->num (INSERT AA AA->bool)", "_2A (AA->num AA) (PROD__IMAGE AA->num (DELETE AA->bool AA))"
PROD__SET__DEF:"num", "fun", "bool", "PROD__SET", "PROD__IMAGE", "I", "=", "I", "PROD__IMAGE I", "PROD__SET"
PROD__SET__THM__0:"num", "fun", "bool", "ZERO", "PROD__SET", "NUMERAL", "EMPTY", "BIT1", "=", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "PROD__SET {}", "ZERO", "{}"
PROD__SET__THM__e1:"num", "fun", "bool", "_2A", "PROD__SET", "INSERT", "FINITE", "DELETE", "=", "Anum", "Anum->bool", "DELETE Anum->bool Anum", "FINITE Anum->bool", "INSERT Anum Anum->bool", "PROD__SET (DELETE Anum->bool Anum)", "PROD__SET (INSERT Anum Anum->bool)", "_2A Anum (PROD__SET (DELETE Anum->bool Anum))"
PROD__SET__EMPTY:"num", "fun", "bool", "ZERO", "PROD__SET", "NUMERAL", "EMPTY", "BIT1", "=", "BIT1 ZERO", "NUMERAL (BIT1 ZERO)", "PROD__SET {}", "ZERO", "{}"
PROD__SET__IMAGE__REDUCTION:"num", "fun", "bool", "~", "_2A", "PROD__SET", "INSERT", "IN", "IMAGE", "FINITE", "=", "AA", "AA->bool", "AA->num", "AA->num AA", "FINITE (IMAGE AA->num AA->bool)", "IMAGE AA->num (INSERT AA AA->bool)", "IMAGE AA->num AA->bool", "IN (AA->num AA) (IMAGE AA->num AA->bool)", "INSERT AA AA->bool", "PROD__SET (IMAGE AA->num (INSERT AA AA->bool))", "PROD__SET (IMAGE AA->num AA->bool)", "_2A (AA->num AA) (PROD__SET (IMAGE AA->num AA->bool))"
MAX__SET__DEF:"num", "fun", "bool", "~", "_3C_3D", "MAX__SET", "IN", "FINITE", "EMPTY", "=", "0", "0", "Anum", "Anum->bool", "FINITE Anum->bool", "IN (MAX__SET Anum->bool) Anum->bool", "IN Anum Anum->bool", "MAX__SET Anum->bool", "_3C_3D Anum (MAX__SET Anum->bool)", "{}"
MAX__SET__THM__0:"num", "fun", "bool", "MAX__SET", "EMPTY", "=", "0", "0", "MAX__SET {}", "{}"
MAX__SET__THM__e1:"num", "fun", "bool", "MAX__SET", "MAX", "INSERT", "FINITE", "=", "Anum", "Anum->bool", "FINITE Anum->bool", "INSERT Anum Anum->bool", "MAX Anum (MAX__SET Anum->bool)", "MAX__SET (INSERT Anum Anum->bool)", "MAX__SET Anum->bool"
MAX__SET__REWRITES__0:"num", "fun", "bool", "MAX__SET", "EMPTY", "=", "0", "0", "MAX__SET {}", "{}"
MAX__SET__REWRITES__e1:"num", "fun", "bool", "MAX__SET", "INSERT", "EMPTY", "=", "Anum", "MAX__SET {Anum}", "{Anum}", "{}"
MAX__SET__ELIM:"num", "fun", "bool", "_3C_3D", "MAX__SET", "IN", "FINITE", "EMPTY", "=", "0", "0", "Anum", "Anum->bool", "Anum->bool (MAX__SET Anum->bool)", "Anum->bool 0", "Anum->bool Anum", "FINITE Anum->bool", "IN Anum Anum->bool", "MAX__SET Anum->bool", "_3C_3D Anum Anum", "{}"
MIN__SET__DEF:"num", "fun", "bool", "MIN__SET", "LEAST", "=", "LEAST", "MIN__SET"
MIN__SET__ELIM:"num", "fun", "bool", "~", "_3C_3D", "MIN__SET", "IN", "EMPTY", "=", "Anum", "Anum->bool", "Anum->bool (MIN__SET Anum->bool)", "Anum->bool Anum", "IN Anum Anum->bool", "MIN__SET Anum->bool", "_3C_3D Anum Anum", "{}"
MIN__SET__THM__0:"num", "fun", "bool", "MIN__SET", "INSERT", "EMPTY", "=", "Anum", "MIN__SET {Anum}", "{Anum}", "{}"
MIN__SET__THM__e1:"num", "fun", "bool", "MIN__SET", "MIN", "INSERT", "=", "Anum", "Anum->bool", "INSERT Anum (INSERT Anum Anum->bool)", "INSERT Anum Anum->bool", "MIN Anum (MIN__SET (INSERT Anum Anum->bool))", "MIN__SET (INSERT Anum (INSERT Anum Anum->bool))", "MIN__SET (INSERT Anum Anum->bool)"
MIN__SET__LEM:"num", "fun", "bool", "~", "_3C_3D", "MIN__SET", "IN", "EMPTY", "=", "Anum", "Anum->bool", "IN (MIN__SET Anum->bool) Anum->bool", "IN Anum Anum->bool", "MIN__SET Anum->bool", "_3C_3D (MIN__SET Anum->bool) Anum", "{}"
SUBSET__MIN__SET:"num", "fun", "bool", "~", "_3C_3D", "SUBSET", "MIN__SET", "EMPTY", "=", "Anum->bool", "MIN__SET Anum->bool", "SUBSET Anum->bool Anum->bool", "_3C_3D (MIN__SET Anum->bool) (MIN__SET Anum->bool)", "{}"
SUBSET__MAX__SET:"num", "fun", "bool", "_3C_3D", "SUBSET", "MAX__SET", "FINITE", "Anum->bool", "FINITE Anum->bool", "MAX__SET Anum->bool", "SUBSET Anum->bool Anum->bool", "_3C_3D (MAX__SET Anum->bool) (MAX__SET Anum->bool)"
MIN__SET__LEQ__MAX__SET:"num", "fun", "bool", "~", "_3C_3D", "MIN__SET", "MAX__SET", "FINITE", "EMPTY", "=", "Anum->bool", "FINITE Anum->bool", "MAX__SET Anum->bool", "MIN__SET Anum->bool", "_3C_3D (MIN__SET Anum->bool) (MAX__SET Anum->bool)", "{}"
MIN__SET__UNION:"num", "fun", "bool", "~", "UNION", "MIN__SET", "MIN", "FINITE", "EMPTY", "=", "Anum->bool", "FINITE Anum->bool", "MIN (MIN__SET Anum->bool) (MIN__SET Anum->bool)", "MIN__SET (UNION Anum->bool Anum->bool)", "MIN__SET Anum->bool", "UNION Anum->bool Anum->bool", "{}"
MAX__SET__UNION:"num", "fun", "bool", "UNION", "MAX__SET", "MAX", "FINITE", "=", "Anum->bool", "FINITE Anum->bool", "MAX (MAX__SET Anum->bool) (MAX__SET Anum->bool)", "MAX__SET (UNION Anum->bool Anum->bool)", "MAX__SET Anum->bool", "UNION Anum->bool Anum->bool"
POW__DEF:"prod", "fun", "bool", "_2C", "SUBSET", "POW", "GSPEC", "=", "AA->bool", "GSPEC (\AA->bool. _2C AA->bool (SUBSET AA->bool AA->bool))", "POW AA->bool", "SUBSET AA->bool AA->bool", "_2C AA->bool (SUBSET AA->bool AA->bool)"
IN__POW:"fun", "bool", "SUBSET", "POW", "IN", "=", "AA->bool", "IN AA->bool (POW AA->bool)", "IN AA->bool (POW AA->bool) <=> SUBSET AA->bool AA->bool", "POW AA->bool", "SUBSET AA->bool AA->bool"
UNIV__FUN__TO__BOOL:"fun", "bool", "UNIV", "POW", "=", "(:A)", "(:A->bool)", "POW (:A)"
SUBSET__POW:"fun", "bool", "SUBSET", "POW", "AA->bool", "POW AA->bool", "SUBSET (POW AA->bool) (POW AA->bool)", "SUBSET AA->bool AA->bool"
SUBSET__INSERT__RIGHT:"fun", "bool", "SUBSET", "INSERT", "AA", "AA->bool", "INSERT AA AA->bool", "SUBSET AA->bool (INSERT AA AA->bool)", "SUBSET AA->bool AA->bool"
SUBSET__DELETE__BOTH:"fun", "bool", "SUBSET", "DELETE", "AA", "AA->bool", "DELETE AA->bool AA", "SUBSET (DELETE AA->bool AA) (DELETE AA->bool AA)", "SUBSET AA->bool AA->bool"
POW__EMPTY:"fun", "bool", "~", "POW", "EMPTY", "=", "AA->bool", "POW AA->bool", "{}"
POW__INSERT:"fun", "bool", "UNION", "POW", "INSERT", "IMAGE", "=", "AA", "AA->bool", "IMAGE (INSERT AA) (POW AA->bool)", "INSERT AA", "INSERT AA AA->bool", "POW (INSERT AA AA->bool)", "POW AA->bool", "UNION (IMAGE (INSERT AA) (POW AA->bool)) (POW AA->bool)"
POW__EQNS__0:"fun", "bool", "POW", "INSERT", "EMPTY", "=", "POW {}", "{{}}", "{}"
POW__EQNS__e1:"fun", "bool", "UNION", "POW", "LET", "INSERT", "IMAGE", "=", "A(A->bool)->bool", "AA", "AA->bool", "IMAGE (INSERT AA) A(A->bool)->bool", "INSERT AA", "INSERT AA AA->bool", "LET (\A(A->bool)->bool. UNION (IMAGE (INSERT AA) A(A->bool)->bool) A(A->bool)->bool) (POW AA->bool)", "POW (INSERT AA AA->bool)", "POW AA->bool", "UNION (IMAGE (INSERT AA) A(A->bool)->bool) A(A->bool)->bool"
FINITE__POW:"fun", "bool", "POW", "FINITE", "AA->bool", "FINITE (POW AA->bool)", "FINITE AA->bool", "POW AA->bool"
CARD__POW:"num", "fun", "bool", "ZERO", "POW", "NUMERAL", "FINITE", "EXP", "CARD", "BIT2", "=", "AA->bool", "BIT2 ZERO", "CARD (POW AA->bool)", "CARD AA->bool", "EXP (NUMERAL (BIT2 ZERO)) (CARD AA->bool)", "FINITE AA->bool", "NUMERAL (BIT2 ZERO)", "POW AA->bool", "ZERO"
GSPEC__ETA:"prod", "fun", "bool", "_2C", "GSPEC", "=", "AA", "AA->bool", "AA->bool AA", "GSPEC (\AA. _2C AA (AA->bool AA))", "_2C AA (AA->bool AA)"
GSPEC__F:"prod", "fun", "bool", "_2C", "GSPEC", "F", "EMPTY", "=", "AA", "F", "GSPEC (\AA. _2C AA F)", "_2C AA F", "{}"
GSPEC__T:"prod", "fun", "bool", "_2C", "UNIV", "T", "GSPEC", "=", "(:A)", "AA", "GSPEC (\AA. _2C AA T)", "T", "_2C AA T"
GSPEC__ID:"prod", "fun", "bool", "_2C", "IN", "GSPEC", "=", "AA", "AA->bool", "GSPEC (\AA. _2C AA (IN AA AA->bool))", "IN AA AA->bool", "_2C AA (IN AA AA->bool)"
GSPEC__EQ:"prod", "fun", "bool", "_2C", "INSERT", "GSPEC", "EMPTY", "=", "AA", "GSPEC (\AA. _2C AA (AA = AA))", "_2C AA (AA = AA)", "{AA}", "{}"
GSPEC__EQ2:"prod", "fun", "bool", "_2C", "INSERT", "GSPEC", "EMPTY", "=", "AA", "GSPEC (\AA. _2C AA (AA = AA))", "_2C AA (AA = AA)", "{AA}", "{}"
GSPEC__F__COND:"prod", "fun", "bool", "~", "SND", "GSPEC", "EMPTY", "=", "AA", "AA->B#bool", "AA->B#bool AA", "GSPEC AA->B#bool", "SND (AA->B#bool AA)", "{}"
GSPEC__AND:"prod", "fun", "bool", "_2C", "INTER", "GSPEC", "=", "AA", "AA->bool AA", "GSPEC (\AA. _2C AA (AA->bool AA /\ AA->bool AA))", "GSPEC (\AA. _2C AA (AA->bool AA))", "INTER (GSPEC (\AA. _2C AA (AA->bool AA))) (GSPEC (\AA. _2C AA (AA->bool AA)))", "_2C AA (AA->bool AA /\ AA->bool AA)", "_2C AA (AA->bool AA)"
GSPEC__OR:"prod", "fun", "bool", "_2C", "UNION", "GSPEC", "=", "AA", "AA->bool AA", "GSPEC (\AA. _2C AA (AA->bool AA \/ AA->bool AA))", "GSPEC (\AA. _2C AA (AA->bool AA))", "UNION (GSPEC (\AA. _2C AA (AA->bool AA))) (GSPEC (\AA. _2C AA (AA->bool AA)))", "_2C AA (AA->bool AA \/ AA->bool AA)", "_2C AA (AA->bool AA)"
equiv__on__def:"fun", "bool", "equiv__on", "IN", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->A->bool AA AA <=> AA->A->bool AA AA", "AA->bool", "IN AA AA->bool", "equiv__on AA->A->bool AA->bool", "equiv__on AA->A->bool AA->bool <=> (!AA. IN AA AA->bool ==> AA->A->bool AA AA) /\ (!AA AA. IN AA AA->bool /\ IN AA AA->bool ==> (AA->A->bool AA AA <=> AA->A->bool AA AA)) /\ (!AA AA AA. IN AA AA->bool /\ IN AA AA->bool /\ IN AA AA->bool /\ AA->A->bool AA AA /\ AA->A->bool AA AA ==> AA->A->bool AA AA)"
partition__def:"prod", "fun", "bool", "partition", "_2C", "IN", "GSPEC", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool", "GSPEC (\AA->bool. _2C AA->bool (?AA. IN AA AA->bool /\ AA->bool = GSPEC (\AA. _2C AA (IN AA AA->bool /\ AA->A->bool AA AA))))", "GSPEC (\AA. _2C AA (IN AA AA->bool /\ AA->A->bool AA AA))", "IN AA AA->bool", "_2C AA (IN AA AA->bool /\ AA->A->bool AA AA)", "_2C AA->bool (?AA. IN AA AA->bool /\ AA->bool = GSPEC (\AA. _2C AA (IN AA AA->bool /\ AA->A->bool AA AA)))", "partition AA->A->bool AA->bool"
BIGUNION__partition:"fun", "bool", "partition", "equiv__on", "BIGUNION", "=", "AA->A->bool", "AA->bool", "BIGUNION (partition AA->A->bool AA->bool)", "equiv__on AA->A->bool AA->bool", "partition AA->A->bool AA->bool"
EMPTY__NOT__IN__partition:"fun", "bool", "~", "partition", "equiv__on", "IN", "EMPTY", "AA->A->bool", "AA->bool", "IN {} (partition AA->A->bool AA->bool)", "equiv__on AA->A->bool AA->bool", "partition AA->A->bool AA->bool", "{}"
partition__elements__disjoint:"fun", "bool", "~", "partition", "equiv__on", "IN", "DISJOINT", "=", "AA->A->bool", "AA->bool", "DISJOINT AA->bool AA->bool", "IN AA->bool (partition AA->A->bool AA->bool)", "equiv__on AA->A->bool AA->bool", "partition AA->A->bool AA->bool"
partition__elements__interrelate:"fun", "bool", "partition", "equiv__on", "IN", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool", "IN AA AA->bool", "IN AA->bool (partition AA->A->bool AA->bool)", "equiv__on AA->A->bool AA->bool", "partition AA->A->bool AA->bool"
partition__SUBSET:"fun", "bool", "partition", "SUBSET", "IN", "AA->A->bool", "AA->bool", "IN AA->bool (partition AA->A->bool AA->bool)", "SUBSET AA->bool AA->bool", "partition AA->A->bool AA->bool"
FINITE__partition:"fun", "bool", "partition", "IN", "FINITE", "AA->A->bool", "AA->bool", "FINITE (partition AA->A->bool AA->bool)", "FINITE AA->bool", "IN AA->bool (partition AA->A->bool AA->bool)", "partition AA->A->bool AA->bool"
partition__CARD:"num", "fun", "bool", "partition", "equiv__on", "SUM__IMAGE", "FINITE", "CARD", "=", "AA->A->bool", "AA->bool", "CARD", "CARD AA->bool", "FINITE AA->bool", "SUM__IMAGE CARD (partition AA->A->bool AA->bool)", "equiv__on AA->A->bool AA->bool", "partition AA->A->bool AA->bool"
pairwise__def:"fun", "bool", "pairwise", "IN", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool", "IN AA AA->bool", "pairwise AA->A->bool AA->bool", "pairwise AA->A->bool AA->bool <=> (!AA AA. IN AA AA->bool /\ IN AA AA->bool ==> AA->A->bool AA AA)"
pairwise__UNION:"fun", "bool", "pairwise", "UNION", "IN", "=", "AA", "AA->A->bool", "AA->A->bool AA AA", "AA->bool", "IN AA AA->bool", "UNION AA->bool AA->bool", "pairwise AA->A->bool (UNION AA->bool AA->bool)", "pairwise AA->A->bool (UNION AA->bool AA->bool) <=> pairwise AA->A->bool AA->bool /\ pairwise AA->A->bool AA->bool /\ (!AA AA. IN AA AA->bool /\ IN AA AA->bool ==> AA->A->bool AA AA /\ AA->A->bool AA AA)", "pairwise AA->A->bool AA->bool"
pairwise__SUBSET:"fun", "bool", "pairwise", "SUBSET", "AA->A->bool", "AA->bool", "SUBSET AA->bool AA->bool", "pairwise AA->A->bool AA->bool"
KoenigsLemma:"prod", "num", "fun", "bool", "~", "_2C", "SUC", "RTC", "GSPEC", "FINITE", "=", "0", "0", "AA", "AA->A->bool", "AA->A->bool (Anum->A Anum) (Anum->A (SUC Anum))", "AA->A->bool AA AA", "Anum", "Anum->A (SUC Anum)", "Anum->A 0", "Anum->A Anum", "FINITE (GSPEC (\AA. _2C AA (AA->A->bool AA AA)))", "FINITE (GSPEC (\AA. _2C AA (RTC AA->A->bool AA AA)))", "GSPEC (\AA. _2C AA (AA->A->bool AA AA))", "GSPEC (\AA. _2C AA (RTC AA->A->bool AA AA))", "RTC AA->A->bool AA AA", "SUC Anum", "_2C AA (AA->A->bool AA AA)", "_2C AA (RTC AA->A->bool AA AA)"
KoenigsLemma__WF:"prod", "fun", "bool", "inv", "_2C", "WF", "RTC", "GSPEC", "FINITE", "AA", "AA->A->bool", "AA->A->bool AA AA", "FINITE (GSPEC (\AA. _2C AA (AA->A->bool AA AA)))", "FINITE (GSPEC (\AA. _2C AA (RTC AA->A->bool AA AA)))", "GSPEC (\AA. _2C AA (AA->A->bool AA AA))", "GSPEC (\AA. _2C AA (RTC AA->A->bool AA AA))", "RTC AA->A->bool AA AA", "WF (inv AA->A->bool)", "_2C AA (AA->A->bool AA AA)", "_2C AA (RTC AA->A->bool AA AA)", "inv AA->A->bool"
SET__EQ__SUBSET:"fun", "bool", "SUBSET", "=", "AA->bool", "AA->bool = AA->bool <=> SUBSET AA->bool AA->bool /\ SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
PSUBSET__EQN:"fun", "bool", "~", "SUBSET", "PSUBSET", "=", "AA->bool", "PSUBSET AA->bool AA->bool", "PSUBSET AA->bool AA->bool <=> SUBSET AA->bool AA->bool /\ ~SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
PSUBSET__SUBSET__TRANS:"fun", "bool", "SUBSET", "PSUBSET", "AA->bool", "PSUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
SUBSET__PSUBSET__TRANS:"fun", "bool", "SUBSET", "PSUBSET", "AA->bool", "PSUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
CROSS__EQNS__0:"prod", "fun", "bool", "EMPTY", "CROSS", "=", "AB->bool", "CROSS {} AB->bool", "{}"
CROSS__EQNS__e1:"prod", "fun", "bool", "_2C", "UNION", "INSERT", "IMAGE", "CROSS", "=", "AA", "AA->bool", "AB", "AB->bool", "CROSS (INSERT AA AA->bool) AB->bool", "CROSS AA->bool AB->bool", "IMAGE (\AB. _2C AA AB) AB->bool", "INSERT AA AA->bool", "UNION (IMAGE (\AB. _2C AA AB) AB->bool) (CROSS AA->bool AB->bool)", "_2C AA AB"
count__EQN:"num", "fun", "bool", "count", "PRE", "LET", "INSERT", "EMPTY", "COND", "=", "0", "0", "Anum", "INSERT Anum (count Anum)", "LET (\Anum. INSERT Anum (count Anum)) (PRE Anum)", "PRE Anum", "count Anum", "if Anum = 0 then {} else LET (\Anum. INSERT Anum (count Anum)) (PRE Anum)", "{}"
UNIQUE__MEMBER__SING:"fun", "bool", "INSERT", "IN", "EMPTY", "=", "AA", "AA->bool", "IN AA AA->bool", "IN AA AA->bool /\ (!AA. IN AA AA->bool ==> AA = AA) <=> AA->bool = {AA}", "{AA}", "{}"
inj__surj:"fun", "bool", "SURJ", "INJ", "EMPTY", "=", "AA->B", "AA->bool", "AB->A", "AB->bool", "INJ AB->A AB->bool AA->bool", "SURJ AA->B AA->bool AB->bool", "{}"
infinite__rest:"fun", "bool", "~", "REST", "FINITE", "AA->bool", "FINITE (REST AA->bool)", "FINITE AA->bool", "REST AA->bool"
chooser__def__0:"num", "fun", "bool", "chooser", "CHOICE", "=", "0", "0", "AA->bool", "CHOICE AA->bool", "chooser AA->bool 0"
chooser__def__e1:"num", "fun", "bool", "chooser", "SUC", "REST", "=", "AA->bool", "Anum", "REST AA->bool", "SUC Anum", "chooser (REST AA->bool) Anum", "chooser AA->bool (SUC Anum)"
chooser__def__compute__0:"num", "fun", "bool", "chooser", "CHOICE", "=", "0", "0", "AA->bool", "CHOICE AA->bool", "chooser AA->bool 0"
chooser__def__compute__1:"num", "fun", "bool", "chooser", "_2D", "ZERO", "REST", "NUMERAL", "BIT1", "=", "AA->bool", "Anum", "BIT1 Anum", "BIT1 ZERO", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "REST AA->bool", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))", "chooser (REST AA->bool) (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO)))", "chooser AA->bool (NUMERAL (BIT1 Anum))"
chooser__def__compute__e2:"num", "fun", "bool", "chooser", "REST", "NUMERAL", "BIT2", "BIT1", "=", "AA->bool", "Anum", "BIT1 Anum", "BIT2 Anum", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)", "REST AA->bool", "chooser (REST AA->bool) (NUMERAL (BIT1 Anum))", "chooser AA->bool (NUMERAL (BIT2 Anum))"
infinite__num__inj:"num", "fun", "bool", "~", "UNIV", "INJ", "FINITE", "=", "(:num)", "AA->bool", "Anum->A", "FINITE AA->bool", "INJ Anum->A (:num) AA->bool", "~FINITE AA->bool <=> (?Anum->A. INJ Anum->A (:num) AA->bool)"
countable__def:"num", "fun", "bool", "countable", "UNIV", "INJ", "=", "(:num)", "AA->bool", "AA->num", "INJ AA->num AA->bool (:num)", "countable AA->bool", "countable AA->bool <=> (?AA->num. INJ AA->num AA->bool (:num))"
countable__image__nats:"num", "fun", "bool", "countable", "UNIV", "IMAGE", "(:num)", "Anum->A", "IMAGE Anum->A (:num)", "countable (IMAGE Anum->A (:num))"
countable__surj:"num", "fun", "bool", "countable", "UNIV", "SURJ", "EMPTY", "=", "(:num)", "AA->bool", "Anum->A", "SURJ Anum->A (:num) AA->bool", "countable AA->bool", "countable AA->bool <=> AA->bool = {} \/ (?Anum->A. SURJ Anum->A (:num) AA->bool)", "{}"
num__countable:"num", "fun", "bool", "countable", "UNIV", "(:num)", "countable (:num)"
subset__countable:"fun", "bool", "countable", "SUBSET", "AA->bool", "SUBSET AA->bool AA->bool", "countable AA->bool"
image__countable:"fun", "bool", "countable", "IMAGE", "AB->A", "AB->bool", "IMAGE AB->A AB->bool", "countable (IMAGE AB->A AB->bool)", "countable AB->bool"
finite__countable:"fun", "bool", "countable", "FINITE", "AA->bool", "FINITE AA->bool", "countable AA->bool"
num__to__pair__def:"prod", "num", "fun", "bool", "num__to__pair", "nsnd", "nfst", "_2C", "=", "Anum", "_2C (nfst Anum) (nsnd Anum)", "nfst Anum", "nsnd Anum", "num__to__pair Anum"
pair__to__num__def:"prod", "num", "fun", "bool", "pair__to__num", "npair", "_2C", "=", "Anum", "_2C Anum Anum", "npair Anum Anum", "pair__to__num (_2C Anum Anum)"
pair__to__num__formula:"prod", "num", "fun", "bool", "pair__to__num", "_2C", "_2B", "_2A", "ZERO", "NUMERAL", "DIV", "BIT2", "BIT1", "=", "Anum", "BIT1 ZERO", "BIT2 ZERO", "DIV (_2A (_2B (_2B Anum Anum) (NUMERAL (BIT1 ZERO))) (_2B Anum Anum)) (NUMERAL (BIT2 ZERO))", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "ZERO", "_2A (_2B (_2B Anum Anum) (NUMERAL (BIT1 ZERO))) (_2B Anum Anum)", "_2B (DIV (_2A (_2B (_2B Anum Anum) (NUMERAL (BIT1 ZERO))) (_2B Anum Anum)) (NUMERAL (BIT2 ZERO))) Anum", "_2B (_2B Anum Anum) (NUMERAL (BIT1 ZERO))", "_2B Anum Anum", "_2C Anum Anum", "pair__to__num (_2C Anum Anum)"
pair__to__num__inv__0:"prod", "num", "fun", "bool", "pair__to__num", "num__to__pair", "=", "Anum", "num__to__pair Anum", "pair__to__num (num__to__pair Anum)"
pair__to__num__inv__e1:"prod", "num", "fun", "bool", "pair__to__num", "num__to__pair", "_2C", "=", "Anum", "_2C Anum Anum", "num__to__pair (pair__to__num (_2C Anum Anum))", "pair__to__num (_2C Anum Anum)"
cross__countable:"prod", "fun", "bool", "countable", "CROSS", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "countable (CROSS AA->bool AB->bool)", "countable AA->bool", "countable AB->bool"
inter__countable:"fun", "bool", "countable", "INTER", "AA->bool", "INTER AA->bool AA->bool", "countable (INTER AA->bool AA->bool)", "countable AA->bool"
inj__countable:"fun", "bool", "countable", "INJ", "AA->bool", "AB->A", "AB->bool", "INJ AB->A AB->bool AA->bool", "countable AA->bool", "countable AB->bool"
bigunion__countable:"fun", "bool", "countable", "IN", "BIGUNION", "A(A->bool)->bool", "AA->bool", "BIGUNION A(A->bool)->bool", "IN AA->bool A(A->bool)->bool", "countable (BIGUNION A(A->bool)->bool)", "countable A(A->bool)->bool", "countable AA->bool"
union__countable:"fun", "bool", "countable", "UNION", "AA->bool", "UNION AA->bool AA->bool", "countable (UNION AA->bool AA->bool)", "countable AA->bool"
union__countable__IFF:"fun", "bool", "countable", "UNION", "=", "AA->bool", "UNION AA->bool AA->bool", "countable (UNION AA->bool AA->bool)", "countable (UNION AA->bool AA->bool) <=> countable AA->bool /\ countable AA->bool", "countable AA->bool"
inj__image__countable__IFF:"fun", "bool", "countable", "INJ", "IMAGE", "=", "AB->A", "AB->bool", "IMAGE AB->A AB->bool", "INJ AB->A AB->bool (IMAGE AB->A AB->bool)", "countable (IMAGE AB->A AB->bool)", "countable (IMAGE AB->A AB->bool) <=> countable AB->bool", "countable AB->bool"
pow__no__surj:"fun", "bool", "~", "SURJ", "POW", "AA->A->bool", "AA->bool", "POW AA->bool", "SURJ AA->A->bool AA->bool (POW AA->bool)"
infinite__pow__uncountable:"fun", "bool", "~", "countable", "POW", "FINITE", "AA->bool", "FINITE AA->bool", "POW AA->bool", "countable (POW AA->bool)"
countable__Usum:"sum", "fun", "bool", "countable", "UNIV", "=", "(:A)", "(:A+B)", "(:B)", "countable (:A)", "countable (:A+B)", "countable (:A+B) <=> countable (:A) /\ countable (:B)", "countable (:B)"
countable__EMPTY:"fun", "bool", "countable", "EMPTY", "countable {}", "{}"
countable__INSERT:"fun", "bool", "countable", "INSERT", "=", "AA", "AA->bool", "INSERT AA AA->bool", "countable (INSERT AA AA->bool)", "countable (INSERT AA AA->bool) <=> countable AA->bool", "countable AA->bool"
cross__countable__IFF:"prod", "fun", "bool", "countable", "EMPTY", "CROSS", "=", "AA->bool", "AB->bool", "CROSS AA->bool AB->bool", "countable (CROSS AA->bool AB->bool)", "countable (CROSS AA->bool AB->bool) <=> AA->bool = {} \/ AB->bool = {} \/ countable AA->bool /\ countable AB->bool", "countable AA->bool", "countable AB->bool", "{}"
countable__Uprod:"prod", "fun", "bool", "countable", "UNIV", "=", "(:A#B)", "(:A)", "(:B)", "countable (:A#B)", "countable (:A#B) <=> countable (:A) /\ countable (:B)", "countable (:A)", "countable (:B)"
IMAGE__BIGUNION:"fun", "bool", "IMAGE", "BIGUNION", "=", "A(B->bool)->bool", "AB->A", "BIGUNION (IMAGE (IMAGE AB->A) A(B->bool)->bool)", "BIGUNION A(B->bool)->bool", "IMAGE (IMAGE AB->A) A(B->bool)->bool", "IMAGE AB->A", "IMAGE AB->A (BIGUNION A(B->bool)->bool)"
SUBSET__DIFF:"fun", "bool", "SUBSET", "DISJOINT", "DIFF", "=", "AA->bool", "DIFF AA->bool AA->bool", "DISJOINT AA->bool AA->bool", "SUBSET AA->bool (DIFF AA->bool AA->bool)", "SUBSET AA->bool (DIFF AA->bool AA->bool) <=> SUBSET AA->bool AA->bool /\ DISJOINT AA->bool AA->bool", "SUBSET AA->bool AA->bool"
INTER__SUBSET__EQN__0:"fun", "bool", "SUBSET", "INTER", "=", "AA->bool", "INTER AA->bool AA->bool", "INTER AA->bool AA->bool = AA->bool <=> SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
INTER__SUBSET__EQN__e1:"fun", "bool", "SUBSET", "INTER", "=", "AA->bool", "INTER AA->bool AA->bool", "INTER AA->bool AA->bool = AA->bool <=> SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool"
PSUBSET__SING:"fun", "bool", "PSUBSET", "INSERT", "EMPTY", "=", "AA", "AA->bool", "PSUBSET AA->bool {AA}", "PSUBSET AA->bool {AA} <=> AA->bool = {}", "{AA}", "{}"
INTER__UNION__0:"fun", "bool", "UNION", "INTER", "=", "AA->bool", "INTER (UNION AA->bool AA->bool) AA->bool", "UNION AA->bool AA->bool"
INTER__UNION__1:"fun", "bool", "UNION", "INTER", "=", "AA->bool", "INTER (UNION AA->bool AA->bool) AA->bool", "UNION AA->bool AA->bool"
INTER__UNION__2:"fun", "bool", "UNION", "INTER", "=", "AA->bool", "INTER AA->bool (UNION AA->bool AA->bool)", "UNION AA->bool AA->bool"
INTER__UNION__e3:"fun", "bool", "UNION", "INTER", "=", "AA->bool", "INTER AA->bool (UNION AA->bool AA->bool)", "UNION AA->bool AA->bool"
UNION__DELETE:"fun", "bool", "UNION", "DELETE", "=", "AA", "AA->bool", "DELETE (UNION AA->bool AA->bool) AA", "DELETE AA->bool AA", "UNION (DELETE AA->bool AA) (DELETE AA->bool AA)", "UNION AA->bool AA->bool"
DELETE__SUBSET__INSERT:"fun", "bool", "SUBSET", "INSERT", "DELETE", "=", "AA", "AA->bool", "DELETE AA->bool AA", "INSERT AA AA->bool", "SUBSET (DELETE AA->bool AA) AA->bool", "SUBSET (DELETE AA->bool AA) AA->bool <=> SUBSET AA->bool (INSERT AA AA->bool)", "SUBSET AA->bool (INSERT AA AA->bool)"
IN__INSERT__EXPAND:"fun", "bool", "~", "INSERT", "IN", "=", "AA", "AA->bool", "IN AA (INSERT AA AA->bool)", "IN AA (INSERT AA AA->bool) <=> AA = AA \/ ~(AA = AA) /\ IN AA AA->bool", "IN AA AA->bool", "INSERT AA AA->bool"
FINITE__INTER:"fun", "bool", "INTER", "FINITE", "AA->bool", "FINITE (INTER AA->bool AA->bool)", "FINITE AA->bool", "INTER AA->bool AA->bool"
INSERT__EQ__SING:"fun", "bool", "SUBSET", "INSERT", "EMPTY", "=", "AA", "AA->bool", "INSERT AA AA->bool", "INSERT AA AA->bool = {AA} <=> AA = AA /\ SUBSET AA->bool {AA}", "SUBSET AA->bool {AA}", "{AA}", "{}"
CARD__UNION__LE:"num", "fun", "bool", "_3C_3D", "_2B", "UNION", "FINITE", "CARD", "AA->bool", "CARD (UNION AA->bool AA->bool)", "CARD AA->bool", "FINITE AA->bool", "UNION AA->bool AA->bool", "_2B (CARD AA->bool) (CARD AA->bool)", "_3C_3D (CARD (UNION AA->bool AA->bool)) (_2B (CARD AA->bool) (CARD AA->bool))"
IMAGE__SUBSET__gen:"fun", "bool", "SUBSET", "IMAGE", "AA->B", "AA->bool", "AB->bool", "IMAGE AA->B AA->bool", "SUBSET (IMAGE AA->B AA->bool) AB->bool", "SUBSET AA->bool AA->bool"
CARD__REST:"num", "fun", "bool", "~", "_2D", "ZERO", "REST", "NUMERAL", "FINITE", "EMPTY", "CARD", "BIT1", "=", "AA->bool", "BIT1 ZERO", "CARD (REST AA->bool)", "CARD AA->bool", "FINITE AA->bool", "NUMERAL (BIT1 ZERO)", "REST AA->bool", "ZERO", "_2D (CARD AA->bool) (NUMERAL (BIT1 ZERO))", "{}"
SUBSET__DIFF__EMPTY:"fun", "bool", "SUBSET", "EMPTY", "DIFF", "=", "AA->bool", "DIFF AA->bool AA->bool", "DIFF AA->bool AA->bool = {} <=> SUBSET AA->bool AA->bool", "SUBSET AA->bool AA->bool", "{}"
DIFF__INTER__SUBSET:"fun", "bool", "SUBSET", "INTER", "DIFF", "=", "AA->bool", "DIFF AA->bool (INTER AA->bool AA->bool)", "DIFF AA->bool AA->bool", "INTER AA->bool AA->bool", "SUBSET AA->bool AA->bool"
UNION__DIFF__2:"fun", "bool", "UNION", "DIFF", "=", "AA->bool", "DIFF AA->bool AA->bool", "UNION AA->bool (DIFF AA->bool AA->bool)"
count__add:"num", "fun", "bool", "count", "_2B", "UNION", "IMAGE", "=", "Anum", "IMAGE (_2B Anum) (count Anum)", "UNION (count Anum) (IMAGE (_2B Anum) (count Anum))", "_2B Anum", "_2B Anum Anum", "count (_2B Anum Anum)", "count Anum"
IMAGE__EQ__SING:"fun", "bool", "~", "INSERT", "IN", "IMAGE", "EMPTY", "=", "AA", "AA->B", "AA->B AA", "AA->bool", "AB", "IMAGE AA->B AA->bool", "IMAGE AA->B AA->bool = {AB} <=> ~(AA->bool = {}) /\ (!AA. IN AA AA->bool ==> AA->B AA = AB)", "IN AA AA->bool", "{AB}", "{}"
count__add1:"num", "fun", "bool", "count", "_2B", "ZERO", "NUMERAL", "INSERT", "BIT1", "=", "Anum", "BIT1 ZERO", "INSERT Anum (count Anum)", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))", "count (_2B Anum (NUMERAL (BIT1 ZERO)))", "count Anum"
compl__insert:"fun", "bool", "INSERT", "DELETE", "COMPL", "=", "AA", "AA->bool", "COMPL (INSERT AA AA->bool)", "COMPL AA->bool", "DELETE (COMPL AA->bool) AA", "INSERT AA AA->bool"
in__max__set:"num", "fun", "bool", "_3C_3D", "MAX__SET", "IN", "FINITE", "Anum", "Anum->bool", "FINITE Anum->bool", "IN Anum Anum->bool", "MAX__SET Anum->bool", "_3C_3D Anum (MAX__SET Anum->bool)"
ASSOC__DEF:"fun", "bool", "ASSOC", "=", "AA", "AA->A->A", "AA->A->A (AA->A->A AA AA) AA", "AA->A->A AA (AA->A->A AA AA)", "AA->A->A AA AA", "ASSOC AA->A->A", "ASSOC AA->A->A <=> (!AA AA AA. AA->A->A AA (AA->A->A AA AA) = AA->A->A (AA->A->A AA AA) AA)"
COMM__DEF:"fun", "bool", "COMM", "=", "AB", "AB->B->A", "AB->B->A AB AB", "COMM AB->B->A", "COMM AB->B->A <=> (!AB AB. AB->B->A AB AB = AB->B->A AB AB)"
FCOMM__DEF:"fun", "bool", "FCOMM", "=", "AA", "AA->B->B", "AA->B->B AA (AB->C->B AB AC)", "AA->B->B AA AB", "AB", "AB->C->B", "AB->C->B (AA->B->B AA AB) AC", "AB->C->B AB AC", "AC", "FCOMM AB->C->B AA->B->B", "FCOMM AB->C->B AA->B->B <=> (!AA AB AC. AA->B->B AA (AB->C->B AB AC) = AB->C->B (AA->B->B AA AB) AC)"
RIGHT__ID__DEF:"fun", "bool", "RIGHT__ID", "=", "AA", "AB", "AB->A->B", "AB->A->B AB AA", "RIGHT__ID AB->A->B AA", "RIGHT__ID AB->A->B AA <=> (!AB. AB->A->B AB AA = AB)"
LEFT__ID__DEF:"fun", "bool", "LEFT__ID", "=", "AA", "AA->B->B", "AA->B->B AA AB", "AB", "LEFT__ID AA->B->B AA", "LEFT__ID AA->B->B AA <=> (!AB. AA->B->B AA AB = AB)"
MONOID__DEF:"fun", "bool", "RIGHT__ID", "MONOID", "LEFT__ID", "ASSOC", "=", "AA", "AA->A->A", "ASSOC AA->A->A", "LEFT__ID AA->A->A AA", "MONOID AA->A->A AA", "MONOID AA->A->A AA <=> ASSOC AA->A->A /\ RIGHT__ID AA->A->A AA /\ LEFT__ID AA->A->A AA", "RIGHT__ID AA->A->A AA"
ASSOC__CONJ:"fun", "bool", "ASSOC", "$and", "$and", "ASSOC $and"
ASSOC__SYM:"fun", "bool", "ASSOC", "=", "AA", "AA->A->A", "AA->A->A (AA->A->A AA AA) AA", "AA->A->A AA (AA->A->A AA AA)", "AA->A->A AA AA", "ASSOC AA->A->A", "ASSOC AA->A->A <=> (!AA AA AA. AA->A->A (AA->A->A AA AA) AA = AA->A->A AA (AA->A->A AA AA))"
ASSOC__DISJ:"fun", "bool", "ASSOC", "$or", "$or", "ASSOC $or"
FCOMM__ASSOC:"fun", "bool", "FCOMM", "ASSOC", "=", "AA->A->A", "ASSOC AA->A->A", "FCOMM AA->A->A AA->A->A", "FCOMM AA->A->A AA->A->A <=> ASSOC AA->A->A"
MONOID__CONJ__T:"fun", "bool", "T", "MONOID", "$and", "$and", "MONOID $and T", "T"
MONOID__DISJ__F:"fun", "bool", "MONOID", "F", "$or", "$or", "F", "MONOID $or F"
INJ__INVERSE2:"fun", "bool", "=", "AA->B (AB->C->A AB AC)", "AA->C (AB->C->A AB AC)", "AB", "AB->C->A AB AC", "AB->C->A AB AC = AB->C->A AB AC <=> AB = AB /\ AC = AC", "AC"
NUMPAIR0:"num", "fun", "bool", "_2B", "_2A", "ZERO", "NUMPAIR", "NUMERAL", "EXP", "BIT2", "BIT1", "=", "Anum", "BIT1 ZERO", "BIT2 ZERO", "EXP (NUMERAL (BIT2 ZERO)) Anum", "NUMERAL (BIT1 ZERO)", "NUMERAL (BIT2 ZERO)", "NUMPAIR Anum Anum", "ZERO", "_2A (EXP (NUMERAL (BIT2 ZERO)) Anum) (_2B (_2A (NUMERAL (BIT2 ZERO)) Anum) (NUMERAL (BIT1 ZERO)))", "_2A (NUMERAL (BIT2 ZERO)) Anum", "_2B (_2A (NUMERAL (BIT2 ZERO)) Anum) (NUMERAL (BIT1 ZERO))"
NUMPAIR__INJ__LEMMA:"num", "fun", "bool", "NUMPAIR", "=", "Anum", "NUMPAIR Anum Anum"
NUMPAIR__INJ:"num", "fun", "bool", "NUMPAIR", "=", "Anum", "NUMPAIR Anum Anum", "NUMPAIR Anum Anum = NUMPAIR Anum Anum <=> Anum = Anum /\ Anum = Anum"
NUMPAIR__DEST__0:"num", "fun", "bool", "NUMPAIR", "NUMFST", "=", "Anum", "NUMFST (NUMPAIR Anum Anum)", "NUMPAIR Anum Anum"
NUMPAIR__DEST__e1:"num", "fun", "bool", "NUMSND", "NUMPAIR", "=", "Anum", "NUMPAIR Anum Anum", "NUMSND (NUMPAIR Anum Anum)"
NUMSUM0:"num", "fun", "bool", "_2A", "ZERO", "SUC", "NUMSUM", "NUMERAL", "COND", "BIT2", "=", "Abool", "Anum", "BIT2 ZERO", "NUMERAL (BIT2 ZERO)", "NUMSUM Abool Anum", "SUC (_2A (NUMERAL (BIT2 ZERO)) Anum)", "ZERO", "_2A (NUMERAL (BIT2 ZERO)) Anum", "if Abool then SUC (_2A (NUMERAL (BIT2 ZERO)) Anum) else _2A (NUMERAL (BIT2 ZERO)) Anum"
NUMSUM__INJ:"num", "fun", "bool", "NUMSUM", "=", "Abool", "Abool <=> Abool", "Anum", "NUMSUM Abool Anum", "NUMSUM Abool Anum = NUMSUM Abool Anum <=> (Abool <=> Abool) /\ Anum = Anum"
NUMSUM__DEST__0:"num", "fun", "bool", "NUMSUM", "NUMLEFT", "=", "Abool", "Anum", "NUMLEFT (NUMSUM Abool Anum)", "NUMLEFT (NUMSUM Abool Anum) <=> Abool", "NUMSUM Abool Anum"
NUMSUM__DEST__e1:"num", "fun", "bool", "NUMSUM", "NUMRIGHT", "=", "Abool", "Anum", "NUMRIGHT (NUMSUM Abool Anum)", "NUMSUM Abool Anum"
INJN0:"num", "fun", "bool", "INJN", "=", "Anum", "INJN Anum"
INJN__INJ:"num", "fun", "bool", "INJN", "=", "Anum", "INJN Anum", "INJN Anum = INJN Anum <=> Anum = Anum"
INJA0:"num", "fun", "bool", "INJA", "=", "AA", "INJA AA"
INJA__INJ:"num", "fun", "bool", "INJA", "=", "AA", "INJA AA", "INJA AA = INJA AA <=> AA = AA"
INJF0:"num", "fun", "bool", "NUMSND", "NUMFST", "INJF", "=", "Anum", "Anum->num->A->bool", "Anum->num->A->bool (NUMFST Anum) (NUMSND Anum)", "INJF Anum->num->A->bool", "NUMFST Anum", "NUMSND Anum"
INJF__INJ:"num", "fun", "bool", "INJF", "=", "Anum->num->A->bool", "INJF Anum->num->A->bool", "INJF Anum->num->A->bool = INJF Anum->num->A->bool <=> Anum->num->A->bool = Anum->num->A->bool"
INJP0:"num", "fun", "bool", "NUMRIGHT", "NUMLEFT", "INJP", "COND", "=", "AA", "Anum", "Anum->A->bool", "Anum->A->bool (NUMRIGHT Anum) AA", "INJP Anum->A->bool Anum->A->bool", "NUMLEFT Anum", "NUMRIGHT Anum", "if NUMLEFT Anum then Anum->A->bool (NUMRIGHT Anum) AA else Anum->A->bool (NUMRIGHT Anum) AA"
INJP__INJ:"num", "fun", "bool", "INJP", "=", "Anum->A->bool", "INJP Anum->A->bool Anum->A->bool", "INJP Anum->A->bool Anum->A->bool = INJP Anum->A->bool Anum->A->bool <=> Anum->A->bool = Anum->A->bool /\ Anum->A->bool = Anum->A->bool"
ZCONSTR0:"num", "fun", "bool", "ZCONSTR", "SUC", "INJP", "INJN", "INJF", "INJA", "=", "AA", "Anum", "Anum->num->A->bool", "INJA AA", "INJF Anum->num->A->bool", "INJN (SUC Anum)", "INJP (INJA AA) (INJF Anum->num->A->bool)", "INJP (INJN (SUC Anum)) (INJP (INJA AA) (INJF Anum->num->A->bool))", "SUC Anum", "ZCONSTR Anum AA Anum->num->A->bool"
ZBOT0:"num", "fun", "bool", "_40", "ZBOT", "T", "INJP", "INJN", "=", "0", "0", "INJN 0", "INJP (INJN 0) (_40 (\Anum->A->bool. T))", "T", "ZBOT", "_40 (\Anum->A->bool. T)"
ZCONSTR__ZBOT:"num", "fun", "bool", "~", "ZCONSTR", "ZBOT", "=", "AA", "Anum", "Anum->num->A->bool", "ZBOT", "ZCONSTR Anum AA Anum->num->A->bool"
ZRECSPACE__def:"num", "fun", "bool", "ZRECSPACE", "ZCONSTR", "ZBOT", "=", "A(num->A->bool)->bool (Anum->num->A->bool Anum)", "A(num->A->bool)->bool Anum->A->bool", "AA", "Anum", "Anum->A->bool", "Anum->num->A->bool", "Anum->num->A->bool Anum", "ZBOT", "ZCONSTR Anum AA Anum->num->A->bool", "ZRECSPACE"
ZRECSPACE__rules__0:"num", "fun", "bool", "ZRECSPACE", "ZBOT", "ZBOT", "ZRECSPACE ZBOT"
ZRECSPACE__rules__e1:"num", "fun", "bool", "ZRECSPACE", "ZCONSTR", "AA", "Anum", "Anum->num->A->bool", "Anum->num->A->bool Anum", "ZCONSTR Anum AA Anum->num->A->bool", "ZRECSPACE (Anum->num->A->bool Anum)", "ZRECSPACE (ZCONSTR Anum AA Anum->num->A->bool)"
ZRECSPACE__ind:"num", "fun", "bool", "ZRECSPACE", "ZCONSTR", "ZBOT", "A(num->A->bool)->bool (Anum->num->A->bool Anum)", "A(num->A->bool)->bool (ZCONSTR Anum AA Anum->num->A->bool)", "A(num->A->bool)->bool Anum->A->bool", "A(num->A->bool)->bool ZBOT", "AA", "Anum", "Anum->A->bool", "Anum->num->A->bool", "Anum->num->A->bool Anum", "ZBOT", "ZCONSTR Anum AA Anum->num->A->bool", "ZRECSPACE Anum->A->bool"
ZRECSPACE__strongind:"num", "fun", "bool", "ZRECSPACE", "ZCONSTR", "ZBOT", "A(num->A->bool)->bool (Anum->num->A->bool Anum)", "A(num->A->bool)->bool (ZCONSTR Anum AA Anum->num->A->bool)", "A(num->A->bool)->bool Anum->A->bool", "A(num->A->bool)->bool ZBOT", "AA", "Anum", "Anum->A->bool", "Anum->num->A->bool", "Anum->num->A->bool Anum", "ZBOT", "ZCONSTR Anum AA Anum->num->A->bool", "ZRECSPACE (Anum->num->A->bool Anum)", "ZRECSPACE Anum->A->bool"
ZRECSPACE__cases:"num", "fun", "bool", "ZRECSPACE", "ZCONSTR", "ZBOT", "=", "AA", "Anum", "Anum->A->bool", "Anum->num->A->bool", "Anum->num->A->bool Anum", "ZBOT", "ZCONSTR Anum AA Anum->num->A->bool", "ZRECSPACE (Anum->num->A->bool Anum)", "ZRECSPACE Anum->A->bool", "ZRECSPACE Anum->A->bool <=> Anum->A->bool = ZBOT \/ (?Anum AA Anum->num->A->bool. Anum->A->bool = ZCONSTR Anum AA Anum->num->A->bool /\ (!Anum. ZRECSPACE (Anum->num->A->bool Anum)))"
recspace__TY__DEF:"recspace", "num", "fun", "bool", "ZRECSPACE", "TYPE__DEFINITION", "A(A)recspace->num->A->bool", "TYPE__DEFINITION ZRECSPACE A(A)recspace->num->A->bool", "ZRECSPACE"
recspace__repfns__0:"recspace", "num", "fun", "bool", "mk__rec", "dest__rec", "=", "A(A)recspace", "dest__rec A(A)recspace", "mk__rec (dest__rec A(A)recspace)"
recspace__repfns__e1:"recspace", "num", "fun", "bool", "mk__rec", "dest__rec", "ZRECSPACE", "=", "Anum->A->bool", "ZRECSPACE Anum->A->bool", "ZRECSPACE Anum->A->bool <=> dest__rec (mk__rec Anum->A->bool) = Anum->A->bool", "dest__rec (mk__rec Anum->A->bool)", "mk__rec Anum->A->bool"
BOTTOM0:"recspace", "num", "fun", "bool", "mk__rec", "ZBOT", "BOTTOM", "=", "BOTTOM", "ZBOT", "mk__rec ZBOT"
CONSTR0:"recspace", "num", "fun", "bool", "mk__rec", "dest__rec", "ZCONSTR", "CONSTR", "=", "AA", "Anum", "Anum->(A)recspace", "Anum->(A)recspace Anum", "CONSTR Anum AA Anum->(A)recspace", "ZCONSTR Anum AA (\Anum. dest__rec (Anum->(A)recspace Anum))", "dest__rec (Anum->(A)recspace Anum)", "mk__rec (ZCONSTR Anum AA (\Anum. dest__rec (Anum->(A)recspace Anum)))"
MK__REC__INJ:"recspace", "num", "fun", "bool", "mk__rec", "ZRECSPACE", "=", "Anum->A->bool", "ZRECSPACE Anum->A->bool", "mk__rec Anum->A->bool"
DEST__REC__INJ:"recspace", "num", "fun", "bool", "dest__rec", "=", "A(A)recspace", "dest__rec A(A)recspace", "dest__rec A(A)recspace = dest__rec A(A)recspace <=> A(A)recspace = A(A)recspace"
CONSTR__BOT:"recspace", "num", "fun", "bool", "~", "CONSTR", "BOTTOM", "=", "AA", "Anum", "Anum->(A)recspace", "BOTTOM", "CONSTR Anum AA Anum->(A)recspace"
CONSTR__INJ:"recspace", "num", "fun", "bool", "CONSTR", "=", "AA", "Anum", "Anum->(A)recspace", "CONSTR Anum AA Anum->(A)recspace", "CONSTR Anum AA Anum->(A)recspace = CONSTR Anum AA Anum->(A)recspace <=> Anum = Anum /\ AA = AA /\ Anum->(A)recspace = Anum->(A)recspace"
CONSTR__IND:"recspace", "num", "fun", "bool", "CONSTR", "BOTTOM", "A(A)recspace", "A(A)recspace->bool (Anum->(A)recspace Anum)", "A(A)recspace->bool (CONSTR Anum AA Anum->(A)recspace)", "A(A)recspace->bool A(A)recspace", "A(A)recspace->bool BOTTOM", "AA", "Anum", "Anum->(A)recspace", "Anum->(A)recspace Anum", "BOTTOM", "CONSTR Anum AA Anum->(A)recspace"
CONSTR__REC:"recspace", "num", "fun", "bool", "CONSTR", "=", "A(B)recspace->A (Anum->(B)recspace Anum)", "A(B)recspace->A (CONSTR Anum AB Anum->(B)recspace)", "AB", "Anum", "Anum->(B)recspace", "Anum->(B)recspace Anum", "Anum->B->(num->(B)recspace)->(num->A)->A Anum AB Anum->(B)recspace (\Anum. A(B)recspace->A (Anum->(B)recspace Anum))", "CONSTR Anum AB Anum->(B)recspace"
FCONS__0:"num", "fun", "bool", "FCONS", "=", "0", "0", "AA", "Anum->A", "FCONS AA Anum->A 0"
FCONS__e1:"num", "fun", "bool", "SUC", "FCONS", "=", "AA", "Anum", "Anum->A", "Anum->A Anum", "FCONS AA Anum->A (SUC Anum)", "SUC Anum"
FNIL0:"num", "fun", "bool", "FNIL", "ARB", "=", "ARB", "Anum", "FNIL Anum"
FCONS__DEST:"num", "fun", "bool", "_2D", "ZERO", "NUMERAL", "FCONS", "COND", "BIT1", "=", "0", "0", "AA", "Anum", "Anum->A", "Anum->A (_2D Anum (NUMERAL (BIT1 ZERO)))", "BIT1 ZERO", "FCONS AA Anum->A Anum", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D Anum (NUMERAL (BIT1 ZERO))", "if Anum = 0 then AA else Anum->A (_2D Anum (NUMERAL (BIT1 ZERO)))"
ISO0:"fun", "bool", "ISO", "=", "AA", "AA->B", "AA->B (AB->A AB)", "AA->B AA", "AB", "AB->A", "AB->A (AA->B AA)", "AB->A AB", "ISO AB->A AA->B", "ISO AB->A AA->B <=> (!AA. AB->A (AA->B AA) = AA) /\ (!AB. AA->B (AB->A AB) = AB)"
ISO__REFL:"fun", "bool", "ISO", "AA", "ISO (\AA. AA) (\AA. AA)"
ISO__FUN:"fun", "bool", "ISO", "AA->B", "AA->B (AD->A (AC->D AC))", "AB->A", "AB->A (AC->B (AD->C AD))", "AC", "AC->B (AD->C AD)", "AC->D", "AC->D AC", "AD", "AD->A (AC->D AC)", "AD->C", "AD->C AD", "ISO (\AD->A AC. AA->B (AD->A (AC->D AC))) (\AC->B AD. AB->A (AC->B (AD->C AD)))", "ISO AA->B AB->A", "ISO AD->C AC->D"
ISO__USAGE:"fun", "bool", "ISO", "=", "(!AA. AA->bool AA) <=> (!AB. AA->bool (AB->A AB))", "(?AA. AA->bool AA) <=> (?AB. AA->bool (AB->A AB))", "AA", "AA = AB->A AB <=> AA->B AA = AB", "AA->B", "AA->B AA", "AA->bool (AB->A AB)", "AA->bool AA", "AB", "AB->A", "AB->A AB", "ISO AA->B AB->A"
list__TY__DEF:"recspace", "num", "list", "fun", "bool", "TYPE__DEFINITION", "SUC", "FCONS", "CONSTR", "BOTTOM", "ARB", "=", "0", "(\AA A(A)recspace. CONSTR (SUC 0) AA (FCONS A(A)recspace (\Anum. BOTTOM))) AA A(A)recspace", "0", "A(A)list->(A)recspace", "A(A)recspace", "A(A)recspace->bool A(A)recspace", "AA", "ARB", "BOTTOM", "CONSTR (SUC 0) AA (FCONS A(A)recspace (\Anum. BOTTOM))", "CONSTR 0 ARB (\Anum. BOTTOM)", "FCONS A(A)recspace (\Anum. BOTTOM)", "SUC 0", "TYPE__DEFINITION (\A(A)recspace. !A(A)recspace->bool. (!A(A)recspace. A(A)recspace = CONSTR 0 ARB (\Anum. BOTTOM) \/ (?AA A(A)recspace. A(A)recspace = (\AA A(A)recspace. CONSTR (SUC 0) AA (FCONS A(A)recspace (\Anum. BOTTOM))) AA A(A)recspace /\ A(A)recspace->bool A(A)recspace) ==> A(A)recspace->bool A(A)recspace) ==> A(A)recspace->bool A(A)recspace) A(A)list->(A)recspace"
list__case__def__0:"list", "fun", "bool", "list__CASE", "NIL", "=", "AA->(A)list->B", "AB", "[]", "list__CASE [] AB AA->(A)list->B"
list__case__def__e1:"list", "fun", "bool", "list__CASE", "CONS", "=", "A(B)list", "AA", "AB", "AB->(B)list->A", "AB->(B)list->A AB A(B)list", "CONS AB A(B)list", "list__CASE (CONS AB A(B)list) AA AB->(B)list->A"
list__size__def__0:"num", "list", "fun", "bool", "list__size", "NIL", "=", "0", "0", "AA->num", "[]", "list__size AA->num []"
list__size__def__e1:"num", "list", "fun", "bool", "list__size", "_2B", "ZERO", "NUMERAL", "CONS", "BIT1", "=", "A(A)list", "AA", "AA->num", "AA->num AA", "BIT1 ZERO", "CONS AA A(A)list", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B (AA->num AA) (list__size AA->num A(A)list)", "_2B (NUMERAL (BIT1 ZERO)) (_2B (AA->num AA) (list__size AA->num A(A)list))", "list__size AA->num (CONS AA A(A)list)", "list__size AA->num A(A)list"
datatype__list:"list", "fun", "bool", "NIL", "DATATYPE", "CONS", "A(A)list->(A->(A)list->(A)list)->bool [] CONS", "CONS", "DATATYPE (A(A)list->(A->(A)list->(A)list)->bool [] CONS)", "[]"
list__11:"list", "fun", "bool", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "CONS AA A(A)list = CONS AA A(A)list <=> AA = AA /\ A(A)list = A(A)list"
list__distinct:"list", "fun", "bool", "~", "NIL", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "[]"
list__case__cong:"list", "fun", "bool", "list__CASE", "NIL", "CONS", "=", "A(A)list", "AA", "AA->(A)list->B", "AA->(A)list->B AA A(A)list", "AB", "CONS AA A(A)list", "[]", "list__CASE A(A)list AB AA->(A)list->B"
list__Axiom:"list", "fun", "bool", "NIL", "CONS", "=", "A(B)list", "A(B)list->A (CONS AB A(B)list)", "A(B)list->A A(B)list", "A(B)list->A []", "AA", "AB", "AB->(B)list->A->A AB A(B)list (A(B)list->A A(B)list)", "CONS AB A(B)list", "[]"
list__Axiom__old:"list", "fun", "bool", "_3F_21", "NIL", "CONS", "=", "A(B)list", "A(B)list->A (CONS AB A(B)list)", "A(B)list->A A(B)list", "A(B)list->A []", "AA", "AA->B->(B)list->A (A(B)list->A A(B)list) AB A(B)list", "AB", "CONS AB A(B)list", "[]", "_3F_21 (\A(B)list->A. A(B)list->A [] = AA /\ (!AB A(B)list. A(B)list->A (CONS AB A(B)list) = AA->B->(B)list->A (A(B)list->A A(B)list) AB A(B)list))"
NULL__DEF__0:"list", "fun", "bool", "T", "NULL", "NIL", "=", "NULL []", "NULL [] <=> T", "T", "[]"
NULL__DEF__e1:"list", "fun", "bool", "NULL", "F", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "F", "NULL (CONS AA A(A)list)", "NULL (CONS AA A(A)list) <=> F"
HD0:"list", "fun", "bool", "HD", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "HD (CONS AA A(A)list)"
TL0:"list", "fun", "bool", "TL", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "TL (CONS AA A(A)list)"
SUM__0:"num", "list", "fun", "bool", "SUM", "NIL", "=", "0", "0", "SUM []", "[]"
SUM__e1:"num", "list", "fun", "bool", "_2B", "SUM", "CONS", "=", "A(num)list", "Anum", "CONS Anum A(num)list", "SUM (CONS Anum A(num)list)", "SUM A(num)list", "_2B Anum (SUM A(num)list)"
APPEND__0:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "APPEND [] A(A)list", "[]"
APPEND__e1:"list", "fun", "bool", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (CONS AA A(A)list) A(A)list", "APPEND A(A)list A(A)list", "CONS AA (APPEND A(A)list A(A)list)", "CONS AA A(A)list"
FLAT__0:"list", "fun", "bool", "NIL", "FLAT", "=", "FLAT []", "[]"
FLAT__e1:"list", "fun", "bool", "FLAT", "CONS", "APPEND", "=", "A((A)list)list", "A(A)list", "APPEND A(A)list (FLAT A((A)list)list)", "CONS A(A)list A((A)list)list", "FLAT (CONS A(A)list A((A)list)list)", "FLAT A((A)list)list"
LENGTH__0:"num", "list", "fun", "bool", "NIL", "LENGTH", "=", "0", "0", "LENGTH []", "[]"
LENGTH__e1:"num", "list", "fun", "bool", "SUC", "LENGTH", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "LENGTH (CONS AA A(A)list)", "LENGTH A(A)list", "SUC (LENGTH A(A)list)"
MAP__0:"list", "fun", "bool", "NIL", "MAP", "=", "AA->B", "MAP AA->B []", "[]"
MAP__e1:"list", "fun", "bool", "MAP", "CONS", "=", "A(B)list", "AB", "AB->A", "AB->A AB", "CONS (AB->A AB) (MAP AB->A A(B)list)", "CONS AB A(B)list", "MAP AB->A (CONS AB A(B)list)", "MAP AB->A A(B)list"
LIST__TO__SET__DEF__0:"list", "fun", "bool", "NIL", "LIST__TO__SET", "F", "=", "AA", "F", "LIST__TO__SET [] AA", "LIST__TO__SET [] AA <=> F", "[]"
LIST__TO__SET__DEF__e1:"list", "fun", "bool", "LIST__TO__SET", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "LIST__TO__SET (CONS AA A(A)list) AA", "LIST__TO__SET (CONS AA A(A)list) AA <=> AA = AA \/ LIST__TO__SET A(A)list AA", "LIST__TO__SET A(A)list AA"
LIST__TO__SET__0:"list", "fun", "bool", "NIL", "LIST__TO__SET", "EMPTY", "=", "LIST__TO__SET []", "[]", "{}"
LIST__TO__SET__e1:"list", "fun", "bool", "LIST__TO__SET", "INSERT", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "INSERT AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (CONS AA A(A)list)", "LIST__TO__SET A(A)list"
IN__LIST__TO__SET:"bool", "T", "T"
FILTER__0:"list", "fun", "bool", "NIL", "FILTER", "=", "AA->bool", "FILTER AA->bool []", "[]"
FILTER__e1:"list", "fun", "bool", "FILTER", "CONS", "COND", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "CONS AA (FILTER AA->bool A(A)list)", "CONS AA A(A)list", "FILTER AA->bool (CONS AA A(A)list)", "FILTER AA->bool A(A)list", "if AA->bool AA then CONS AA (FILTER AA->bool A(A)list) else FILTER AA->bool A(A)list"
FOLDR__0:"list", "fun", "bool", "NIL", "FOLDR", "=", "AA->B->B", "AB", "FOLDR AA->B->B AB []", "[]"
FOLDR__e1:"list", "fun", "bool", "FOLDR", "CONS", "=", "A(B)list", "AA", "AB", "AB->A->A", "AB->A->A AB (FOLDR AB->A->A AA A(B)list)", "CONS AB A(B)list", "FOLDR AB->A->A AA (CONS AB A(B)list)", "FOLDR AB->A->A AA A(B)list"
FOLDL__0:"list", "fun", "bool", "NIL", "FOLDL", "=", "AB", "AB->A->B", "FOLDL AB->A->B AB []", "[]"
FOLDL__e1:"list", "fun", "bool", "FOLDL", "CONS", "=", "A(B)list", "AA", "AA->B->A", "AA->B->A AA AB", "AB", "CONS AB A(B)list", "FOLDL AA->B->A (AA->B->A AA AB) A(B)list", "FOLDL AA->B->A AA (CONS AB A(B)list)"
EVERY__DEF__0:"list", "fun", "bool", "T", "NIL", "EVERY", "=", "AA->bool", "EVERY AA->bool []", "EVERY AA->bool [] <=> T", "T", "[]"
EVERY__DEF__e1:"list", "fun", "bool", "EVERY", "CONS", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "CONS AA A(A)list", "EVERY AA->bool (CONS AA A(A)list)", "EVERY AA->bool (CONS AA A(A)list) <=> AA->bool AA /\ EVERY AA->bool A(A)list", "EVERY AA->bool A(A)list"
EXISTS__DEF__0:"list", "fun", "bool", "NIL", "F", "EXISTS", "=", "AA->bool", "EXISTS AA->bool []", "EXISTS AA->bool [] <=> F", "F", "[]"
EXISTS__DEF__e1:"list", "fun", "bool", "EXISTS", "CONS", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "CONS AA A(A)list", "EXISTS AA->bool (CONS AA A(A)list)", "EXISTS AA->bool (CONS AA A(A)list) <=> AA->bool AA \/ EXISTS AA->bool A(A)list", "EXISTS AA->bool A(A)list"
EL__0:"num", "list", "fun", "bool", "HD", "EL", "=", "0", "0", "A(A)list", "EL 0 A(A)list", "HD A(A)list"
EL__e1:"num", "list", "fun", "bool", "TL", "SUC", "EL", "=", "A(A)list", "Anum", "EL (SUC Anum) A(A)list", "EL Anum (TL A(A)list)", "SUC Anum", "TL A(A)list"
MAP2__ind:"list", "fun", "bool", "NIL", "CONS", "A(B)list", "A(B->C->A)->(B)list->(C)list->bool AB->C->A (CONS AB A(B)list) (CONS AC A(C)list)", "A(B->C->A)->(B)list->(C)list->bool AB->C->A (CONS AB A(B)list) []", "A(B->C->A)->(B)list->(C)list->bool AB->C->A A(B)list A(C)list", "A(B->C->A)->(B)list->(C)list->bool AB->C->A [] A(C)list", "A(C)list", "AB", "AB->C->A", "AC", "CONS AB A(B)list", "CONS AC A(C)list", "[]"
MAP2__def__0:"list", "fun", "bool", "MAP2", "CONS", "=", "A(B)list", "A(C)list", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "CONS (AB->C->A AB AC) (MAP2 AB->C->A A(B)list A(C)list)", "CONS AB A(B)list", "CONS AC A(C)list", "MAP2 AB->C->A (CONS AB A(B)list) (CONS AC A(C)list)", "MAP2 AB->C->A A(B)list A(C)list"
MAP2__def__1:"list", "fun", "bool", "NIL", "MAP2", "=", "A(B)list", "AA->B->C", "MAP2 AA->B->C [] A(B)list", "[]"
MAP2__def__e2:"list", "fun", "bool", "NIL", "MAP2", "CONS", "=", "A(A)list", "AA", "AA->B->C", "CONS AA A(A)list", "MAP2 AA->B->C (CONS AA A(A)list) []", "[]"
MAP2__0:"list", "fun", "bool", "NIL", "MAP2", "=", "AA->B->C", "MAP2 AA->B->C [] []", "[]"
MAP2__e1:"list", "fun", "bool", "MAP2", "CONS", "=", "A(B)list", "A(C)list", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "CONS (AB->C->A AB AC) (MAP2 AB->C->A A(B)list A(C)list)", "CONS AB A(B)list", "CONS AC A(C)list", "MAP2 AB->C->A (CONS AB A(B)list) (CONS AC A(C)list)", "MAP2 AB->C->A A(B)list A(C)list"
INDEX__FIND__def__0:"prod", "option", "num", "list", "fun", "bool", "NONE", "NIL", "INDEX__FIND", "=", "AA->bool", "Anum", "INDEX__FIND Anum AA->bool []", "NONE", "[]"
INDEX__FIND__def__e1:"prod", "option", "num", "list", "fun", "bool", "_2C", "SUC", "SOME", "INDEX__FIND", "CONS", "COND", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "Anum", "CONS AA A(A)list", "INDEX__FIND (SUC Anum) AA->bool A(A)list", "INDEX__FIND Anum AA->bool (CONS AA A(A)list)", "SOME (_2C Anum AA)", "SUC Anum", "_2C Anum AA", "if AA->bool AA then SOME (_2C Anum AA) else INDEX__FIND (SUC Anum) AA->bool A(A)list"
FIND__def:"prod", "option", "num", "list", "fun", "bool", "o", "SND", "OPTION__MAP", "INDEX__FIND", "FIND", "=", "0", "0", "AA->bool", "FIND AA->bool", "INDEX__FIND 0 AA->bool", "OPTION__MAP SND", "SND", "o (OPTION__MAP SND) (INDEX__FIND 0 AA->bool)"
INDEX__OF__def:"prod", "option", "num", "list", "fun", "bool", "o", "OPTION__MAP", "INDEX__OF", "INDEX__FIND", "FST", "=", "0", "$equals", "$equals AA", "0", "AA", "FST", "INDEX__FIND 0 ($equals AA)", "INDEX__OF AA", "OPTION__MAP FST", "o (OPTION__MAP FST) (INDEX__FIND 0 ($equals AA))"
NULL__0:"list", "fun", "bool", "NULL", "NIL", "NULL []", "[]"
NULL__e1:"list", "fun", "bool", "~", "NULL", "CONS", "A(A)list", "AA", "CONS AA A(A)list", "NULL (CONS AA A(A)list)"
list__INDUCT:"list", "fun", "bool", "NIL", "CONS", "A(A)list", "A(A)list->bool (CONS AA A(A)list)", "A(A)list->bool A(A)list", "A(A)list->bool []", "AA", "CONS AA A(A)list", "[]"
list__induction:"list", "fun", "bool", "NIL", "CONS", "A(A)list", "A(A)list->bool (CONS AA A(A)list)", "A(A)list->bool A(A)list", "A(A)list->bool []", "AA", "CONS AA A(A)list", "[]"
list__CASES:"list", "fun", "bool", "NIL", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "[]"
list__nchotomy:"list", "fun", "bool", "NIL", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "[]"
list__case__compute:"list", "fun", "bool", "list__CASE", "TL", "NULL", "HD", "COND", "=", "A(B)list", "AA", "AB->(B)list->A", "AB->(B)list->A (HD A(B)list) (TL A(B)list)", "HD A(B)list", "NULL A(B)list", "TL A(B)list", "if NULL A(B)list then AA else AB->(B)list->A (HD A(B)list) (TL A(B)list)", "list__CASE A(B)list AA AB->(B)list->A"
CONS__11:"list", "fun", "bool", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "CONS AA A(A)list = CONS AA A(A)list <=> AA = AA /\ A(A)list = A(A)list"
NOT__NIL__CONS:"list", "fun", "bool", "~", "NIL", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "[]"
NOT__CONS__NIL:"list", "fun", "bool", "~", "NIL", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "[]"
LIST__NOT__EQ:"list", "fun", "bool", "~", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list"
NOT__EQ__LIST:"list", "fun", "bool", "~", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list"
EQ__LIST:"list", "fun", "bool", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list"
CONS0:"list", "fun", "bool", "~", "TL", "NULL", "HD", "CONS", "=", "A(A)list", "CONS (HD A(A)list) (TL A(A)list)", "HD A(A)list", "NULL A(A)list", "TL A(A)list"
APPEND__NIL:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "APPEND A(A)list []", "[]"
APPEND__ASSOC:"list", "fun", "bool", "APPEND", "=", "A(A)list", "APPEND (APPEND A(A)list A(A)list) A(A)list", "APPEND A(A)list (APPEND A(A)list A(A)list)", "APPEND A(A)list A(A)list"
LENGTH__APPEND:"num", "list", "fun", "bool", "_2B", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "LENGTH (APPEND A(A)list A(A)list)", "LENGTH A(A)list", "_2B (LENGTH A(A)list) (LENGTH A(A)list)"
MAP__APPEND:"list", "fun", "bool", "MAP", "APPEND", "=", "A(B)list", "AB->A", "APPEND (MAP AB->A A(B)list) (MAP AB->A A(B)list)", "APPEND A(B)list A(B)list", "MAP AB->A (APPEND A(B)list A(B)list)", "MAP AB->A A(B)list"
MAP__ID__0:"list", "fun", "bool", "MAP", "=", "A(A)list", "AA", "MAP (\AA. AA) A(A)list"
MAP__ID__e1:"list", "fun", "bool", "MAP", "I", "=", "A(A)list", "I", "MAP I A(A)list"
LENGTH__MAP:"num", "list", "fun", "bool", "MAP", "LENGTH", "=", "A(B)list", "AB->A", "LENGTH (MAP AB->A A(B)list)", "LENGTH A(B)list", "MAP AB->A A(B)list"
MAP__EQ__NIL__0:"list", "fun", "bool", "NIL", "MAP", "=", "A(B)list", "AB->A", "MAP AB->A A(B)list", "MAP AB->A A(B)list = [] <=> A(B)list = []", "[]"
MAP__EQ__NIL__e1:"list", "fun", "bool", "NIL", "MAP", "=", "A(B)list", "AB->A", "MAP AB->A A(B)list", "[]", "[] = MAP AB->A A(B)list <=> A(B)list = []"
MAP__EQ__f:"list", "fun", "bool", "MAP", "LIST__TO__SET", "IN", "=", "A(B)list", "AB", "AB->A", "AB->A AB", "IN AB (LIST__TO__SET A(B)list)", "LIST__TO__SET A(B)list", "MAP AB->A A(B)list", "MAP AB->A A(B)list = MAP AB->A A(B)list <=> (!AB. IN AB (LIST__TO__SET A(B)list) ==> AB->A AB = AB->A AB)"
MAP__o:"list", "fun", "bool", "o", "MAP", "=", "AB->C", "AC->A", "MAP (o AC->A AB->C)", "MAP AB->C", "MAP AC->A", "o (MAP AC->A) (MAP AB->C)", "o AC->A AB->C"
MAP__MAP__o:"list", "fun", "bool", "o", "MAP", "=", "A(C)list", "AB->A", "AC->B", "MAP (o AB->A AC->B) A(C)list", "MAP AB->A (MAP AC->B A(C)list)", "MAP AC->B A(C)list", "o AB->A AC->B"
EL__MAP:"num", "list", "fun", "bool", "_3C", "MAP", "LENGTH", "EL", "=", "A(B)list", "AB->A", "AB->A (EL Anum A(B)list)", "Anum", "EL Anum (MAP AB->A A(B)list)", "EL Anum A(B)list", "LENGTH A(B)list", "MAP AB->A A(B)list", "_3C Anum (LENGTH A(B)list)"
MAP__TL:"list", "fun", "bool", "~", "TL", "NULL", "MAP", "=", "A(B)list", "AB->A", "MAP AB->A (TL A(B)list)", "MAP AB->A A(B)list", "NULL A(B)list", "TL (MAP AB->A A(B)list)", "TL A(B)list"
EVERY__EL:"num", "list", "fun", "bool", "_3C", "LENGTH", "EVERY", "EL", "=", "A(A)list", "AA->bool", "AA->bool (EL Anum A(A)list)", "Anum", "EL Anum A(A)list", "EVERY AA->bool A(A)list", "EVERY AA->bool A(A)list <=> (!Anum. _3C Anum (LENGTH A(A)list) ==> AA->bool (EL Anum A(A)list))", "LENGTH A(A)list", "_3C Anum (LENGTH A(A)list)"
EVERY__CONJ:"list", "fun", "bool", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY (\AA. AA->bool AA /\ AA->bool AA) A(A)list", "EVERY (\AA. AA->bool AA /\ AA->bool AA) A(A)list <=> EVERY AA->bool A(A)list /\ EVERY AA->bool A(A)list", "EVERY AA->bool A(A)list"
EVERY__MEM:"list", "fun", "bool", "LIST__TO__SET", "IN", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY AA->bool A(A)list", "EVERY AA->bool A(A)list <=> (!AA. IN AA (LIST__TO__SET A(A)list) ==> AA->bool AA)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
EVERY__MAP:"list", "fun", "bool", "MAP", "EVERY", "=", "A(B)list", "AA->bool", "AA->bool (AB->A AB)", "AB", "AB->A", "AB->A AB", "EVERY (\AB. AA->bool (AB->A AB)) A(B)list", "EVERY AA->bool (MAP AB->A A(B)list)", "EVERY AA->bool (MAP AB->A A(B)list) <=> EVERY (\AB. AA->bool (AB->A AB)) A(B)list", "MAP AB->A A(B)list"
EVERY__SIMP:"list", "fun", "bool", "NIL", "EVERY", "=", "A(A)list", "Abool", "EVERY (\AA. Abool) A(A)list", "EVERY (\AA. Abool) A(A)list <=> A(A)list = [] \/ Abool", "[]"
MONO__EVERY:"list", "fun", "bool", "EVERY", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY AA->bool A(A)list"
EXISTS__MEM:"list", "fun", "bool", "LIST__TO__SET", "IN", "EXISTS", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EXISTS AA->bool A(A)list", "EXISTS AA->bool A(A)list <=> (?AA. IN AA (LIST__TO__SET A(A)list) /\ AA->bool AA)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
EXISTS__MAP:"list", "fun", "bool", "MAP", "EXISTS", "=", "A(B)list", "AA->bool", "AA->bool (AB->A AB)", "AB", "AB->A", "AB->A AB", "EXISTS (\AB. AA->bool (AB->A AB)) A(B)list", "EXISTS AA->bool (MAP AB->A A(B)list)", "EXISTS AA->bool (MAP AB->A A(B)list) <=> EXISTS (\AB. AA->bool (AB->A AB)) A(B)list", "MAP AB->A A(B)list"
EXISTS__SIMP0:"list", "fun", "bool", "~", "NIL", "EXISTS", "=", "A(A)list", "Abool", "EXISTS (\AA. Abool) A(A)list", "EXISTS (\AA. Abool) A(A)list <=> ~(A(A)list = []) /\ Abool", "[]"
MONO__EXISTS0:"list", "fun", "bool", "EXISTS", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EXISTS AA->bool A(A)list"
EVERY__NOT__EXISTS:"list", "fun", "bool", "~", "EXISTS", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY AA->bool A(A)list", "EVERY AA->bool A(A)list <=> ~EXISTS (\AA. ~AA->bool AA) A(A)list", "EXISTS (\AA. ~AA->bool AA) A(A)list"
EXISTS__NOT__EVERY:"list", "fun", "bool", "~", "EXISTS", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY (\AA. ~AA->bool AA) A(A)list", "EXISTS AA->bool A(A)list", "EXISTS AA->bool A(A)list <=> ~EVERY (\AA. ~AA->bool AA) A(A)list"
MEM__APPEND:"list", "fun", "bool", "LIST__TO__SET", "IN", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list A(A)list", "IN AA (LIST__TO__SET (APPEND A(A)list A(A)list))", "IN AA (LIST__TO__SET (APPEND A(A)list A(A)list)) <=> IN AA (LIST__TO__SET A(A)list) \/ IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (APPEND A(A)list A(A)list)", "LIST__TO__SET A(A)list"
MEM__FILTER:"list", "fun", "bool", "LIST__TO__SET", "IN", "FILTER", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "FILTER AA->bool A(A)list", "IN AA (LIST__TO__SET (FILTER AA->bool A(A)list))", "IN AA (LIST__TO__SET (FILTER AA->bool A(A)list)) <=> AA->bool AA /\ IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (FILTER AA->bool A(A)list)", "LIST__TO__SET A(A)list"
MEM__FLAT:"list", "fun", "bool", "LIST__TO__SET", "IN", "FLAT", "=", "A((A)list)list", "A(A)list", "AA", "FLAT A((A)list)list", "IN A(A)list (LIST__TO__SET A((A)list)list)", "IN AA (LIST__TO__SET (FLAT A((A)list)list))", "IN AA (LIST__TO__SET (FLAT A((A)list)list)) <=> (?A(A)list. IN A(A)list (LIST__TO__SET A((A)list)list) /\ IN AA (LIST__TO__SET A(A)list))", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (FLAT A((A)list)list)", "LIST__TO__SET A((A)list)list", "LIST__TO__SET A(A)list"
FLAT__APPEND:"list", "fun", "bool", "FLAT", "APPEND", "=", "A((A)list)list", "APPEND (FLAT A((A)list)list) (FLAT A((A)list)list)", "APPEND A((A)list)list A((A)list)list", "FLAT (APPEND A((A)list)list A((A)list)list)", "FLAT A((A)list)list"
EVERY__APPEND:"list", "fun", "bool", "EVERY", "APPEND", "=", "A(A)list", "AA->bool", "APPEND A(A)list A(A)list", "EVERY AA->bool (APPEND A(A)list A(A)list)", "EVERY AA->bool (APPEND A(A)list A(A)list) <=> EVERY AA->bool A(A)list /\ EVERY AA->bool A(A)list", "EVERY AA->bool A(A)list"
EXISTS__APPEND:"list", "fun", "bool", "EXISTS", "APPEND", "=", "A(A)list", "AA->bool", "APPEND A(A)list A(A)list", "EXISTS AA->bool (APPEND A(A)list A(A)list)", "EXISTS AA->bool (APPEND A(A)list A(A)list) <=> EXISTS AA->bool A(A)list \/ EXISTS AA->bool A(A)list", "EXISTS AA->bool A(A)list"
NOT__EVERY:"list", "fun", "bool", "~", "o", "EXISTS", "EVERY", "=", "$not", "$not", "A(A)list", "AA->bool", "EVERY AA->bool A(A)list", "EXISTS (o $not AA->bool) A(A)list", "o $not AA->bool", "~EVERY AA->bool A(A)list <=> EXISTS (o $not AA->bool) A(A)list"
NOT__EXISTS:"list", "fun", "bool", "~", "o", "EXISTS", "EVERY", "=", "$not", "$not", "A(A)list", "AA->bool", "EVERY (o $not AA->bool) A(A)list", "EXISTS AA->bool A(A)list", "o $not AA->bool", "~EXISTS AA->bool A(A)list <=> EVERY (o $not AA->bool) A(A)list"
MEM__MAP:"list", "fun", "bool", "MAP", "LIST__TO__SET", "IN", "=", "A(B)list", "AA", "AB", "AB->A", "AB->A AB", "IN AA (LIST__TO__SET (MAP AB->A A(B)list))", "IN AA (LIST__TO__SET (MAP AB->A A(B)list)) <=> (?AB. AA = AB->A AB /\ IN AB (LIST__TO__SET A(B)list))", "IN AB (LIST__TO__SET A(B)list)", "LIST__TO__SET (MAP AB->A A(B)list)", "LIST__TO__SET A(B)list", "MAP AB->A A(B)list"
LENGTH__NIL:"num", "list", "fun", "bool", "NIL", "LENGTH", "=", "0", "0", "A(A)list", "LENGTH A(A)list", "LENGTH A(A)list = 0 <=> A(A)list = []", "[]"
LENGTH__NIL__SYM:"num", "list", "fun", "bool", "NIL", "LENGTH", "=", "0", "0", "0 = LENGTH A(A)list <=> A(A)list = []", "A(A)list", "LENGTH A(A)list", "[]"
NULL__EQ:"list", "fun", "bool", "NULL", "NIL", "=", "A(A)list", "NULL A(A)list", "NULL A(A)list <=> A(A)list = []", "[]"
NULL__LENGTH:"num", "list", "fun", "bool", "NULL", "LENGTH", "=", "0", "0", "A(A)list", "LENGTH A(A)list", "NULL A(A)list", "NULL A(A)list <=> LENGTH A(A)list = 0"
LENGTH__CONS:"num", "list", "fun", "bool", "SUC", "LENGTH", "CONS", "=", "A(A)list", "AA", "Anum", "CONS AA A(A)list", "LENGTH A(A)list", "LENGTH A(A)list = SUC Anum <=> (?AA A(A)list. LENGTH A(A)list = Anum /\ A(A)list = CONS AA A(A)list)", "SUC Anum"
LENGTH__EQ__CONS:"num", "list", "fun", "bool", "SUC", "LENGTH", "CONS", "=", "(!A(A)list. LENGTH A(A)list = SUC Anum ==> A(A)list->bool A(A)list) <=> (!A(A)list. LENGTH A(A)list = Anum ==> (\A(A)list. !AA. A(A)list->bool (CONS AA A(A)list)) A(A)list)", "(\A(A)list. !AA. A(A)list->bool (CONS AA A(A)list)) A(A)list", "A(A)list", "A(A)list->bool (CONS AA A(A)list)", "A(A)list->bool A(A)list", "AA", "Anum", "CONS AA A(A)list", "LENGTH A(A)list", "SUC Anum"
LENGTH__EQ__SUM:"num", "list", "fun", "bool", "_2B", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "Anum", "LENGTH A(A)list", "LENGTH A(A)list = _2B Anum Anum <=> (?A(A)list A(A)list. LENGTH A(A)list = Anum /\ LENGTH A(A)list = Anum /\ A(A)list = APPEND A(A)list A(A)list)", "_2B Anum Anum"
LENGTH__EQ__NUM__0:"num", "list", "fun", "bool", "NIL", "LENGTH", "=", "0", "0", "A(A)list", "LENGTH A(A)list", "LENGTH A(A)list = 0 <=> A(A)list = []", "[]"
LENGTH__EQ__NUM__1:"num", "list", "fun", "bool", "SUC", "LENGTH", "CONS", "=", "A(A)list", "AA", "Anum", "CONS AA A(A)list", "LENGTH A(A)list", "LENGTH A(A)list = SUC Anum <=> (?AA A(A)list. LENGTH A(A)list = Anum /\ A(A)list = CONS AA A(A)list)", "SUC Anum"
LENGTH__EQ__NUM__e2:"num", "list", "fun", "bool", "_2B", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "Anum", "LENGTH A(A)list", "LENGTH A(A)list = _2B Anum Anum <=> (?A(A)list A(A)list. LENGTH A(A)list = Anum /\ LENGTH A(A)list = Anum /\ A(A)list = APPEND A(A)list A(A)list)", "_2B Anum Anum"
LENGTH__EQ__NUM__compute__0:"num", "list", "fun", "bool", "NIL", "LENGTH", "=", "0", "0", "A(A)list", "LENGTH A(A)list", "LENGTH A(A)list = 0 <=> A(A)list = []", "[]"
LENGTH__EQ__NUM__compute__1:"num", "list", "fun", "bool", "_2D", "ZERO", "NUMERAL", "LENGTH", "CONS", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT1 ZERO", "CONS AA A(A)list", "LENGTH A(A)list", "LENGTH A(A)list = NUMERAL (BIT1 Anum) <=> (?AA A(A)list. LENGTH A(A)list = _2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO)) /\ A(A)list = CONS AA A(A)list)", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))"
LENGTH__EQ__NUM__compute__2:"num", "list", "fun", "bool", "NUMERAL", "LENGTH", "CONS", "BIT2", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT2 Anum", "CONS AA A(A)list", "LENGTH A(A)list", "LENGTH A(A)list = NUMERAL (BIT2 Anum) <=> (?AA A(A)list. LENGTH A(A)list = NUMERAL (BIT1 Anum) /\ A(A)list = CONS AA A(A)list)", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)"
LENGTH__EQ__NUM__compute__e3:"num", "list", "fun", "bool", "_2B", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "Anum", "LENGTH A(A)list", "LENGTH A(A)list = _2B Anum Anum <=> (?A(A)list A(A)list. LENGTH A(A)list = Anum /\ LENGTH A(A)list = Anum /\ A(A)list = APPEND A(A)list A(A)list)", "_2B Anum Anum"
LENGTH__EQ__NIL:"num", "list", "fun", "bool", "NIL", "LENGTH", "=", "0", "(!A(A)list. LENGTH A(A)list = 0 ==> A(A)list->bool A(A)list) <=> A(A)list->bool []", "0", "A(A)list", "A(A)list->bool A(A)list", "A(A)list->bool []", "LENGTH A(A)list", "[]"
CONS__ACYCLIC__0:"list", "fun", "bool", "~", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list"
CONS__ACYCLIC__e1:"list", "fun", "bool", "~", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list"
APPEND__eq__NIL__0:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "[]", "[] = APPEND A(A)list A(A)list <=> A(A)list = [] /\ A(A)list = []"
APPEND__eq__NIL__e1:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = [] <=> A(A)list = [] /\ A(A)list = []", "[]"
APPEND__EQ__SING:"list", "fun", "bool", "NIL", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = [AA] <=> A(A)list = [AA] /\ A(A)list = [] \/ A(A)list = [] /\ A(A)list = [AA]", "[AA]", "[]"
APPEND__11__0:"list", "fun", "bool", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = APPEND A(A)list A(A)list <=> A(A)list = A(A)list"
APPEND__11__e1:"list", "fun", "bool", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = APPEND A(A)list A(A)list <=> A(A)list = A(A)list"
APPEND__LENGTH__EQ:"num", "list", "fun", "bool", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = APPEND A(A)list A(A)list <=> A(A)list = A(A)list /\ A(A)list = A(A)list", "LENGTH A(A)list"
APPEND__11__LENGTH__0:"num", "list", "fun", "bool", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = APPEND A(A)list A(A)list <=> A(A)list = A(A)list /\ A(A)list = A(A)list", "LENGTH A(A)list"
APPEND__11__LENGTH__e1:"num", "list", "fun", "bool", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = APPEND A(A)list A(A)list <=> A(A)list = A(A)list /\ A(A)list = A(A)list", "LENGTH A(A)list"
APPEND__EQ__SELF__0:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = A(A)list <=> A(A)list = []", "[]"
APPEND__EQ__SELF__1:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = A(A)list <=> A(A)list = []", "[]"
APPEND__EQ__SELF__2:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "A(A)list = APPEND A(A)list A(A)list <=> A(A)list = []", "APPEND A(A)list A(A)list", "[]"
APPEND__EQ__SELF__e3:"list", "fun", "bool", "NIL", "APPEND", "=", "A(A)list", "A(A)list = APPEND A(A)list A(A)list <=> A(A)list = []", "APPEND A(A)list A(A)list", "[]"
MEM__SPLIT:"list", "fun", "bool", "LIST__TO__SET", "IN", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list (CONS AA A(A)list)", "CONS AA A(A)list", "IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list) <=> (?A(A)list A(A)list. A(A)list = APPEND A(A)list (CONS AA A(A)list))", "LIST__TO__SET A(A)list"
LIST__EQ__REWRITE:"num", "list", "fun", "bool", "_3C", "LENGTH", "EL", "=", "A(A)list", "A(A)list = A(A)list <=> LENGTH A(A)list = LENGTH A(A)list /\ (!Anum. _3C Anum (LENGTH A(A)list) ==> EL Anum A(A)list = EL Anum A(A)list)", "Anum", "EL Anum A(A)list", "LENGTH A(A)list", "_3C Anum (LENGTH A(A)list)"
LIST__EQ:"num", "list", "fun", "bool", "_3C", "LENGTH", "EL", "=", "A(A)list", "Anum", "EL Anum A(A)list", "LENGTH A(A)list", "_3C Anum (LENGTH A(A)list)"
FOLDL__EQ__FOLDR:"list", "fun", "bool", "FOLDR", "FOLDL", "COMM", "ASSOC", "=", "A(A)list", "AA", "AA->A->A", "ASSOC AA->A->A", "COMM AA->A->A", "FOLDL AA->A->A AA A(A)list", "FOLDR AA->A->A AA A(A)list"
FOLDR__CONS:"list", "fun", "bool", "MAP", "FOLDR", "CONS", "APPEND", "=", "A(A)list", "A(B)list", "AA", "AA->B", "AA->B AA", "APPEND (MAP AA->B A(A)list) A(B)list", "CONS (AA->B AA) A(B)list", "FOLDR (\AA A(B)list. CONS (AA->B AA) A(B)list) A(B)list A(A)list", "MAP AA->B A(A)list"
LENGTH__TL:"num", "list", "fun", "bool", "_3C", "_2D", "ZERO", "TL", "NUMERAL", "LENGTH", "BIT1", "=", "0", "0", "A(A)list", "BIT1 ZERO", "LENGTH (TL A(A)list)", "LENGTH A(A)list", "NUMERAL (BIT1 ZERO)", "TL A(A)list", "ZERO", "_2D (LENGTH A(A)list) (NUMERAL (BIT1 ZERO))", "_3C 0 (LENGTH A(A)list)"
FILTER__EQ__NIL:"list", "fun", "bool", "~", "NIL", "FILTER", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY (\AA. ~AA->bool AA) A(A)list", "FILTER AA->bool A(A)list", "FILTER AA->bool A(A)list = [] <=> EVERY (\AA. ~AA->bool AA) A(A)list", "[]"
FILTER__NEQ__NIL:"list", "fun", "bool", "~", "NIL", "LIST__TO__SET", "IN", "FILTER", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "FILTER AA->bool A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "[]", "~(FILTER AA->bool A(A)list = []) <=> (?AA. IN AA (LIST__TO__SET A(A)list) /\ AA->bool AA)"
FILTER__EQ__ID:"list", "fun", "bool", "FILTER", "EVERY", "=", "A(A)list", "AA->bool", "EVERY AA->bool A(A)list", "FILTER AA->bool A(A)list", "FILTER AA->bool A(A)list = A(A)list <=> EVERY AA->bool A(A)list"
FILTER__NEQ__ID:"list", "fun", "bool", "~", "LIST__TO__SET", "IN", "FILTER", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "FILTER AA->bool A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "~(FILTER AA->bool A(A)list = A(A)list) <=> (?AA. IN AA (LIST__TO__SET A(A)list) /\ ~AA->bool AA)"
FILTER__EQ__CONS:"list", "fun", "bool", "NIL", "FILTER", "CONS", "APPEND", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "APPEND (APPEND A(A)list [AA]) A(A)list", "APPEND A(A)list [AA]", "CONS AA A(A)list", "FILTER AA->bool A(A)list", "FILTER AA->bool A(A)list = CONS AA A(A)list <=> (?A(A)list A(A)list. A(A)list = APPEND (APPEND A(A)list [AA]) A(A)list /\ FILTER AA->bool A(A)list = [] /\ FILTER AA->bool A(A)list = A(A)list /\ AA->bool AA)", "[AA]", "[]"
FILTER__APPEND__DISTRIB:"list", "fun", "bool", "FILTER", "APPEND", "=", "A(A)list", "AA->bool", "APPEND (FILTER AA->bool A(A)list) (FILTER AA->bool A(A)list)", "APPEND A(A)list A(A)list", "FILTER AA->bool (APPEND A(A)list A(A)list)", "FILTER AA->bool A(A)list"
MEM__0:"list", "fun", "bool", "NIL", "LIST__TO__SET", "IN", "F", "=", "AA", "F", "IN AA (LIST__TO__SET [])", "IN AA (LIST__TO__SET []) <=> F", "LIST__TO__SET []", "[]"
MEM__e1:"list", "fun", "bool", "LIST__TO__SET", "IN", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "IN AA (LIST__TO__SET (CONS AA A(A)list))", "IN AA (LIST__TO__SET (CONS AA A(A)list)) <=> AA = AA \/ IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (CONS AA A(A)list)", "LIST__TO__SET A(A)list"
FILTER__EQ__APPEND:"list", "fun", "bool", "FILTER", "APPEND", "=", "A(A)list", "AA->bool", "APPEND A(A)list A(A)list", "FILTER AA->bool A(A)list", "FILTER AA->bool A(A)list = APPEND A(A)list A(A)list <=> (?A(A)list A(A)list. A(A)list = APPEND A(A)list A(A)list /\ FILTER AA->bool A(A)list = A(A)list /\ FILTER AA->bool A(A)list = A(A)list)"
EVERY__FILTER:"list", "fun", "bool", "FILTER", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY (\AA. AA->bool AA ==> AA->bool AA) A(A)list", "EVERY AA->bool (FILTER AA->bool A(A)list)", "EVERY AA->bool (FILTER AA->bool A(A)list) <=> EVERY (\AA. AA->bool AA ==> AA->bool AA) A(A)list", "FILTER AA->bool A(A)list"
EVERY__FILTER__IMP:"list", "fun", "bool", "FILTER", "EVERY", "A(A)list", "AA->bool", "EVERY AA->bool (FILTER AA->bool A(A)list)", "EVERY AA->bool A(A)list", "FILTER AA->bool A(A)list"
FILTER__COND__REWRITE__0:"list", "fun", "bool", "NIL", "FILTER", "=", "AA->bool", "FILTER AA->bool []", "[]"
FILTER__COND__REWRITE__1:"list", "fun", "bool", "FILTER", "CONS", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "CONS AA (FILTER AA->bool A(A)list)", "CONS AA A(A)list", "FILTER AA->bool (CONS AA A(A)list)", "FILTER AA->bool A(A)list"
FILTER__COND__REWRITE__e2:"list", "fun", "bool", "~", "FILTER", "CONS", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "CONS AA A(A)list", "FILTER AA->bool (CONS AA A(A)list)", "FILTER AA->bool A(A)list"
NOT__NULL__MEM:"list", "fun", "bool", "~", "NULL", "LIST__TO__SET", "IN", "=", "A(A)list", "AA", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "NULL A(A)list", "~NULL A(A)list <=> (?AA. IN AA (LIST__TO__SET A(A)list))"
EL__compute:"num", "list", "fun", "bool", "TL", "PRE", "HD", "EL", "COND", "=", "0", "0", "A(A)list", "Anum", "EL (PRE Anum) (TL A(A)list)", "EL Anum A(A)list", "HD A(A)list", "PRE Anum", "TL A(A)list", "if Anum = 0 then HD A(A)list else EL (PRE Anum) (TL A(A)list)"
EL__simp__0:"num", "list", "fun", "bool", "TL", "PRE", "NUMERAL", "EL", "BIT1", "=", "A(A)list", "Anum", "BIT1 Anum", "EL (NUMERAL (BIT1 Anum)) A(A)list", "EL (PRE (NUMERAL (BIT1 Anum))) (TL A(A)list)", "NUMERAL (BIT1 Anum)", "PRE (NUMERAL (BIT1 Anum))", "TL A(A)list"
EL__simp__e1:"num", "list", "fun", "bool", "TL", "NUMERAL", "EL", "BIT2", "BIT1", "=", "A(A)list", "Anum", "BIT1 Anum", "BIT2 Anum", "EL (NUMERAL (BIT1 Anum)) (TL A(A)list)", "EL (NUMERAL (BIT2 Anum)) A(A)list", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)", "TL A(A)list"
EL__restricted__0:"num", "list", "fun", "bool", "HD", "EL", "=", "0", "0", "EL 0", "HD"
EL__restricted__e1:"num", "list", "fun", "bool", "SUC", "EL", "CONS", "=", "A(A)list", "AA", "Anum", "CONS AA A(A)list", "EL (SUC Anum) (CONS AA A(A)list)", "EL Anum A(A)list", "SUC Anum"
EL__simp__restricted__0:"num", "list", "fun", "bool", "PRE", "NUMERAL", "EL", "CONS", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "CONS AA A(A)list", "EL (NUMERAL (BIT1 Anum)) (CONS AA A(A)list)", "EL (PRE (NUMERAL (BIT1 Anum))) A(A)list", "NUMERAL (BIT1 Anum)", "PRE (NUMERAL (BIT1 Anum))"
EL__simp__restricted__e1:"num", "list", "fun", "bool", "NUMERAL", "EL", "CONS", "BIT2", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT2 Anum", "CONS AA A(A)list", "EL (NUMERAL (BIT1 Anum)) A(A)list", "EL (NUMERAL (BIT2 Anum)) (CONS AA A(A)list)", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)"
SUM__eq__0:"num", "list", "fun", "bool", "SUM", "LIST__TO__SET", "IN", "=", "0", "0", "A(num)list", "Anum", "IN Anum (LIST__TO__SET A(num)list)", "LIST__TO__SET A(num)list", "SUM A(num)list", "SUM A(num)list = 0 <=> (!Anum. IN Anum (LIST__TO__SET A(num)list) ==> Anum = 0)"
NULL__FILTER:"list", "fun", "bool", "~", "NULL", "LIST__TO__SET", "IN", "FILTER", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "FILTER AA->bool A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "NULL (FILTER AA->bool A(A)list)", "NULL (FILTER AA->bool A(A)list) <=> (!AA. IN AA (LIST__TO__SET A(A)list) ==> ~AA->bool AA)"
WF__LIST__PRED:"list", "fun", "bool", "WF", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "WF (\A(A)list A(A)list. ?AA. A(A)list = CONS AA A(A)list)"
LIST__REL__rules__0:"list", "fun", "bool", "NIL", "LIST__REL", "AA->B->bool", "LIST__REL AA->B->bool [] []", "[]"
LIST__REL__rules__e1:"list", "fun", "bool", "LIST__REL", "CONS", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool (CONS AA A(A)list) (CONS AB A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list"
LIST__REL__ind:"list", "fun", "bool", "NIL", "LIST__REL", "CONS", "A(A)list", "A(A)list->(B)list->bool (CONS AA A(A)list) (CONS AB A(B)list)", "A(A)list->(B)list->bool A(A)list A(B)list", "A(A)list->(B)list->bool [] []", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list", "[]"
LIST__REL__strongind:"list", "fun", "bool", "NIL", "LIST__REL", "CONS", "A(A)list", "A(A)list->(B)list->bool (CONS AA A(A)list) (CONS AB A(B)list)", "A(A)list->(B)list->bool A(A)list A(B)list", "A(A)list->(B)list->bool [] []", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list", "[]"
LIST__REL__cases:"list", "fun", "bool", "NIL", "LIST__REL", "CONS", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list <=> A(A)list = [] /\ A(B)list = [] \/ (?AA AB A(A)list A(B)list. A(A)list = CONS AA A(A)list /\ A(B)list = CONS AB A(B)list /\ AA->B->bool AA AB /\ LIST__REL AA->B->bool A(A)list A(B)list)", "[]"
LIST__REL__EL__EQN:"num", "list", "fun", "bool", "_3C", "LIST__REL", "LENGTH", "EL", "=", "A(A)list", "A(B)list", "AA->B->bool", "AA->B->bool (EL Anum A(A)list) (EL Anum A(B)list)", "Anum", "EL Anum A(A)list", "EL Anum A(B)list", "LENGTH A(A)list", "LENGTH A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list <=> LENGTH A(A)list = LENGTH A(B)list /\ (!Anum. _3C Anum (LENGTH A(A)list) ==> AA->B->bool (EL Anum A(A)list) (EL Anum A(B)list))", "_3C Anum (LENGTH A(A)list)"
LIST__REL__def__0:"list", "fun", "bool", "T", "NIL", "LIST__REL", "=", "AA->B->bool", "LIST__REL AA->B->bool [] []", "LIST__REL AA->B->bool [] [] <=> T", "T", "[]"
LIST__REL__def__1:"list", "fun", "bool", "NIL", "LIST__REL", "F", "CONS", "=", "A(A)list", "AA", "AA->B->bool", "CONS AA A(A)list", "F", "LIST__REL AA->B->bool (CONS AA A(A)list) []", "LIST__REL AA->B->bool (CONS AA A(A)list) [] <=> F", "[]"
LIST__REL__def__2:"list", "fun", "bool", "NIL", "LIST__REL", "F", "CONS", "=", "A(B)list", "AA->B->bool", "AB", "CONS AB A(B)list", "F", "LIST__REL AA->B->bool [] (CONS AB A(B)list)", "LIST__REL AA->B->bool [] (CONS AB A(B)list) <=> F", "[]"
LIST__REL__def__e3:"list", "fun", "bool", "LIST__REL", "CONS", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool (CONS AA A(A)list) (CONS AB A(B)list)", "LIST__REL AA->B->bool (CONS AA A(A)list) (CONS AB A(B)list) <=> AA->B->bool AA AB /\ LIST__REL AA->B->bool A(A)list A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list"
LIST__REL__mono:"list", "fun", "bool", "LIST__REL", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "LIST__REL AA->B->bool A(A)list A(B)list"
LIST__REL__NIL__0:"list", "fun", "bool", "NIL", "LIST__REL", "=", "A(B)list", "AA->B->bool", "LIST__REL AA->B->bool [] A(B)list", "LIST__REL AA->B->bool [] A(B)list <=> A(B)list = []", "[]"
LIST__REL__NIL__e1:"list", "fun", "bool", "NIL", "LIST__REL", "=", "A(B)list", "AA->B->bool", "LIST__REL AA->B->bool [] A(B)list", "LIST__REL AA->B->bool [] A(B)list <=> A(B)list = []", "[]"
LIST__REL__CONS1:"list", "fun", "bool", "LIST__REL", "CONS", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool (CONS AA A(A)list) A(B)list", "LIST__REL AA->B->bool (CONS AA A(A)list) A(B)list <=> (?AB A(B)list. A(B)list = CONS AB A(B)list /\ AA->B->bool AA AB /\ LIST__REL AA->B->bool A(A)list A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list"
LIST__REL__CONS2:"list", "fun", "bool", "LIST__REL", "CONS", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool A(A)list (CONS AB A(B)list)", "LIST__REL AA->B->bool A(A)list (CONS AB A(B)list) <=> (?AA A(A)list. A(A)list = CONS AA A(A)list /\ AA->B->bool AA AB /\ LIST__REL AA->B->bool A(A)list A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list"
LIST__REL__CONJ:"list", "fun", "bool", "LIST__REL", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool AA AB", "AB", "LIST__REL (\AA AB. AA->B->bool AA AB /\ AA->B->bool AA AB) A(A)list A(B)list", "LIST__REL (\AA AB. AA->B->bool AA AB /\ AA->B->bool AA AB) A(A)list A(B)list <=> LIST__REL (\AA AB. AA->B->bool AA AB) A(A)list A(B)list /\ LIST__REL (\AA AB. AA->B->bool AA AB) A(A)list A(B)list", "LIST__REL (\AA AB. AA->B->bool AA AB) A(A)list A(B)list"
LIST__REL__MAP1:"list", "fun", "bool", "o", "MAP", "LIST__REL", "=", "A(B)list", "A(C)list", "AA->C->bool", "AB->A", "LIST__REL (o AA->C->bool AB->A) A(B)list A(C)list", "LIST__REL AA->C->bool (MAP AB->A A(B)list) A(C)list", "LIST__REL AA->C->bool (MAP AB->A A(B)list) A(C)list <=> LIST__REL (o AA->C->bool AB->A) A(B)list A(C)list", "MAP AB->A A(B)list", "o AA->C->bool AB->A"
LIST__REL__MAP2:"list", "fun", "bool", "MAP", "LIST__REL", "=", "A(B)list", "A(C)list", "AA", "AB", "AB->A->bool AB (AC->A AC)", "AB->A->bool AB AA", "AC", "AC->A", "AC->A AC", "LIST__REL (\AB AA. AB->A->bool AB AA) A(B)list (MAP AC->A A(C)list)", "LIST__REL (\AB AA. AB->A->bool AB AA) A(B)list (MAP AC->A A(C)list) <=> LIST__REL (\AB AC. AB->A->bool AB (AC->A AC)) A(B)list A(C)list", "LIST__REL (\AB AC. AB->A->bool AB (AC->A AC)) A(B)list A(C)list", "MAP AC->A A(C)list"
LIST__REL__LENGTH:"num", "list", "fun", "bool", "LIST__REL", "LENGTH", "=", "A(A)list", "A(B)list", "AA->B->bool", "LENGTH A(A)list", "LENGTH A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list"
list__size__cong:"num", "list", "fun", "bool", "list__size", "LIST__TO__SET", "IN", "=", "A(A)list", "AA", "AA->num", "AA->num AA", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "list__size AA->num A(A)list"
FOLDR__CONG:"list", "fun", "bool", "LIST__TO__SET", "IN", "FOLDR", "=", "A(B)list", "AA", "AB", "AB->A->A", "AB->A->A AB AA", "FOLDR AB->A->A AA A(B)list", "IN AB (LIST__TO__SET A(B)list)", "LIST__TO__SET A(B)list"
FOLDL__CONG:"list", "fun", "bool", "LIST__TO__SET", "IN", "FOLDL", "=", "A(B)list", "AA", "AA->B->A", "AA->B->A AA AB", "AB", "FOLDL AA->B->A AA A(B)list", "IN AB (LIST__TO__SET A(B)list)", "LIST__TO__SET A(B)list"
MAP__CONG:"list", "fun", "bool", "MAP", "LIST__TO__SET", "IN", "=", "A(B)list", "AB", "AB->A", "AB->A AB", "IN AB (LIST__TO__SET A(B)list)", "LIST__TO__SET A(B)list", "MAP AB->A A(B)list"
MAP2__CONG:"list", "fun", "bool", "MAP2", "LIST__TO__SET", "IN", "=", "A(B)list", "A(C)list", "AB", "AB->C->A", "AB->C->A AB AC", "AC", "IN AB (LIST__TO__SET A(B)list)", "IN AC (LIST__TO__SET A(C)list)", "LIST__TO__SET A(B)list", "LIST__TO__SET A(C)list", "MAP2 AB->C->A A(B)list A(C)list"
EXISTS__CONG:"list", "fun", "bool", "LIST__TO__SET", "IN", "EXISTS", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "AA->bool AA <=> AA->bool AA", "EXISTS AA->bool A(A)list", "EXISTS AA->bool A(A)list <=> EXISTS AA->bool A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
EVERY__CONG:"list", "fun", "bool", "LIST__TO__SET", "IN", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "AA->bool AA <=> AA->bool AA", "EVERY AA->bool A(A)list", "EVERY AA->bool A(A)list <=> EVERY AA->bool A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
EVERY__MONOTONIC:"list", "fun", "bool", "EVERY", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY AA->bool A(A)list"
ZIP__0:"prod", "list", "fun", "bool", "_2C", "ZIP", "NIL", "=", "ZIP (_2C [] [])", "[]", "_2C [] []"
ZIP__e1:"prod", "list", "fun", "bool", "_2C", "ZIP", "CONS", "=", "A(A)list", "A(B)list", "AA", "AB", "CONS (_2C AA AB) (ZIP (_2C A(A)list A(B)list))", "CONS AA A(A)list", "CONS AB A(B)list", "ZIP (_2C (CONS AA A(A)list) (CONS AB A(B)list))", "ZIP (_2C A(A)list A(B)list)", "_2C (CONS AA A(A)list) (CONS AB A(B)list)", "_2C A(A)list A(B)list", "_2C AA AB"
UNZIP__0:"prod", "list", "fun", "bool", "_2C", "UNZIP", "NIL", "=", "UNZIP []", "[]", "_2C [] []"
UNZIP__e1:"prod", "list", "fun", "bool", "_2C", "UNZIP", "SND", "FST", "CONS", "=", "A(A#B)list", "AA#B", "CONS (FST AA#B) (FST (UNZIP A(A#B)list))", "CONS (SND AA#B) (SND (UNZIP A(A#B)list))", "CONS AA#B A(A#B)list", "FST (UNZIP A(A#B)list)", "FST AA#B", "SND (UNZIP A(A#B)list)", "SND AA#B", "UNZIP (CONS AA#B A(A#B)list)", "UNZIP A(A#B)list", "_2C (CONS (FST AA#B) (FST (UNZIP A(A#B)list))) (CONS (SND AA#B) (SND (UNZIP A(A#B)list)))"
UNZIP__THM__0:"prod", "list", "fun", "bool", "_2C", "UNZIP", "NIL", "=", "UNZIP []", "[]", "_2C [] []"
UNZIP__THM__e1:"prod", "list", "fun", "bool", "_2C", "UNZIP", "UNCURRY", "LET", "CONS", "=", "A(A#B)list", "A(A)list", "A(B)list", "AA", "AB", "CONS (_2C AA AB) A(A#B)list", "CONS AA A(A)list", "CONS AB A(B)list", "LET (UNCURRY (\A(A)list A(B)list. _2C (CONS AA A(A)list) (CONS AB A(B)list))) (UNZIP A(A#B)list)", "UNCURRY (\A(A)list A(B)list. _2C (CONS AA A(A)list) (CONS AB A(B)list))", "UNZIP (CONS (_2C AA AB) A(A#B)list)", "UNZIP A(A#B)list", "_2C (CONS AA A(A)list) (CONS AB A(B)list)", "_2C AA AB"
UNZIP__MAP:"prod", "list", "fun", "bool", "_2C", "UNZIP", "SND", "MAP", "FST", "=", "A(A#B)list", "FST", "MAP FST A(A#B)list", "MAP SND A(A#B)list", "SND", "UNZIP A(A#B)list", "_2C (MAP FST A(A#B)list) (MAP SND A(A#B)list)"
LENGTH__ZIP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "LENGTH", "=", "A(A)list", "A(B)list", "LENGTH (ZIP (_2C A(A)list A(B)list))", "LENGTH A(A)list", "LENGTH A(B)list", "ZIP (_2C A(A)list A(B)list)", "_2C A(A)list A(B)list"
LENGTH__UNZIP__0:"prod", "num", "list", "fun", "bool", "UNZIP", "LENGTH", "FST", "=", "A(A#B)list", "FST (UNZIP A(A#B)list)", "LENGTH (FST (UNZIP A(A#B)list))", "LENGTH A(A#B)list", "UNZIP A(A#B)list"
LENGTH__UNZIP__e1:"prod", "num", "list", "fun", "bool", "UNZIP", "SND", "LENGTH", "=", "A(A#B)list", "LENGTH (SND (UNZIP A(A#B)list))", "LENGTH A(A#B)list", "SND (UNZIP A(A#B)list)", "UNZIP A(A#B)list"
ZIP__UNZIP:"prod", "list", "fun", "bool", "ZIP", "UNZIP", "=", "A(A#B)list", "UNZIP A(A#B)list", "ZIP (UNZIP A(A#B)list)"
UNZIP__ZIP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "UNZIP", "LENGTH", "=", "A(A)list", "A(B)list", "LENGTH A(A)list", "LENGTH A(B)list", "UNZIP (ZIP (_2C A(A)list A(B)list))", "ZIP (_2C A(A)list A(B)list)", "_2C A(A)list A(B)list"
ZIP__MAP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "SND", "MAP", "LENGTH", "FST", "=", "A(C)list", "A(D)list", "AC#D", "AC->A", "AC->A (FST AC#D)", "AD->B", "AD->B (SND AC#D)", "FST AC#D", "LENGTH A(C)list", "LENGTH A(D)list", "MAP (\AC#D. _2C (AC->A (FST AC#D)) (SND AC#D)) (ZIP (_2C A(C)list A(D)list))", "MAP (\AC#D. _2C (FST AC#D) (AD->B (SND AC#D))) (ZIP (_2C A(C)list A(D)list))", "MAP AC->A A(C)list", "MAP AD->B A(D)list", "SND AC#D", "ZIP (_2C (MAP AC->A A(C)list) A(D)list)", "ZIP (_2C A(C)list (MAP AD->B A(D)list))", "ZIP (_2C A(C)list A(D)list)", "_2C (AC->A (FST AC#D)) (SND AC#D)", "_2C (FST AC#D) (AD->B (SND AC#D))", "_2C (MAP AC->A A(C)list) A(D)list", "_2C A(C)list (MAP AD->B A(D)list)", "_2C A(C)list A(D)list"
MEM__ZIP:"prod", "num", "list", "fun", "bool", "_3C", "_2C", "ZIP", "LIST__TO__SET", "LENGTH", "IN", "EL", "=", "A(A)list", "A(B)list", "AA#B", "Anum", "EL Anum A(A)list", "EL Anum A(B)list", "IN AA#B (LIST__TO__SET (ZIP (_2C A(A)list A(B)list)))", "IN AA#B (LIST__TO__SET (ZIP (_2C A(A)list A(B)list))) <=> (?Anum. _3C Anum (LENGTH A(A)list) /\ AA#B = _2C (EL Anum A(A)list) (EL Anum A(B)list))", "LENGTH A(A)list", "LENGTH A(B)list", "LIST__TO__SET (ZIP (_2C A(A)list A(B)list))", "ZIP (_2C A(A)list A(B)list)", "_2C (EL Anum A(A)list) (EL Anum A(B)list)", "_2C A(A)list A(B)list", "_3C Anum (LENGTH A(A)list)"
EL__ZIP:"prod", "num", "list", "fun", "bool", "_3C", "_2C", "ZIP", "LENGTH", "EL", "=", "A(A)list", "A(B)list", "Anum", "EL Anum (ZIP (_2C A(A)list A(B)list))", "EL Anum A(A)list", "EL Anum A(B)list", "LENGTH A(A)list", "LENGTH A(B)list", "ZIP (_2C A(A)list A(B)list)", "_2C (EL Anum A(A)list) (EL Anum A(B)list)", "_2C A(A)list A(B)list", "_3C Anum (LENGTH A(A)list)"
MAP2__ZIP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "UNCURRY", "MAP2", "MAP", "LENGTH", "=", "A(B)list", "A(C)list", "AB->C->A", "LENGTH A(B)list", "LENGTH A(C)list", "MAP (UNCURRY AB->C->A) (ZIP (_2C A(B)list A(C)list))", "MAP2 AB->C->A A(B)list A(C)list", "UNCURRY AB->C->A", "ZIP (_2C A(B)list A(C)list)", "_2C A(B)list A(C)list"
MAP2__MAP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "UNCURRY", "MAP2", "MAP", "LENGTH", "=", "A(B)list", "A(C)list", "AB->C->A", "LENGTH A(B)list", "LENGTH A(C)list", "MAP (UNCURRY AB->C->A) (ZIP (_2C A(B)list A(C)list))", "MAP2 AB->C->A A(B)list A(C)list", "UNCURRY AB->C->A", "ZIP (_2C A(B)list A(C)list)", "_2C A(B)list A(C)list"
MAP__ZIP:"prod", "num", "list", "fun", "bool", "o", "_2C", "ZIP", "SND", "MAP", "LENGTH", "FST", "=", "A(B)list", "A(D)list", "AB->A", "AD->C", "FST", "LENGTH A(B)list", "LENGTH A(D)list", "MAP (o AB->A FST) (ZIP (_2C A(B)list A(D)list))", "MAP (o AD->C SND) (ZIP (_2C A(B)list A(D)list))", "MAP AB->A A(B)list", "MAP AD->C A(D)list", "MAP FST (ZIP (_2C A(B)list A(D)list))", "MAP SND (ZIP (_2C A(B)list A(D)list))", "SND", "ZIP (_2C A(B)list A(D)list)", "_2C A(B)list A(D)list", "o AB->A FST", "o AD->C SND"
MEM__EL:"num", "list", "fun", "bool", "_3C", "LIST__TO__SET", "LENGTH", "IN", "EL", "=", "A(A)list", "AA", "Anum", "EL Anum A(A)list", "IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list) <=> (?Anum. _3C Anum (LENGTH A(A)list) /\ AA = EL Anum A(A)list)", "LENGTH A(A)list", "LIST__TO__SET A(A)list", "_3C Anum (LENGTH A(A)list)"
SUM__MAP__PLUS__ZIP:"prod", "num", "list", "fun", "bool", "_2C", "_2B", "ZIP", "SUM", "MAP", "LENGTH", "=", "A(A)list", "A(B)list", "AA", "AA#B->num", "AA#B->num (_2C AA AB)", "AA->num", "AA->num AA", "AB", "AB->num", "AB->num AB", "LENGTH A(A)list", "LENGTH A(B)list", "MAP AA#B->num (ZIP (_2C A(A)list A(B)list))", "MAP AA->num A(A)list", "MAP AB->num A(B)list", "SUM (MAP AA#B->num (ZIP (_2C A(A)list A(B)list)))", "SUM (MAP AA->num A(A)list)", "SUM (MAP AB->num A(B)list)", "ZIP (_2C A(A)list A(B)list)", "_2B (AA->num AA) (AB->num AB)", "_2B (SUM (MAP AA->num A(A)list)) (SUM (MAP AB->num A(B)list))", "_2C A(A)list A(B)list", "_2C AA AB"
LIST__REL__EVERY__ZIP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "UNCURRY", "LIST__REL", "LENGTH", "EVERY", "=", "A(A)list", "A(B)list", "AA->B->bool", "EVERY (UNCURRY AA->B->bool) (ZIP (_2C A(A)list A(B)list))", "LENGTH A(A)list", "LENGTH A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list <=> LENGTH A(A)list = LENGTH A(B)list /\ EVERY (UNCURRY AA->B->bool) (ZIP (_2C A(A)list A(B)list))", "UNCURRY AA->B->bool", "ZIP (_2C A(A)list A(B)list)", "_2C A(A)list A(B)list"
REVERSE__DEF__0:"list", "fun", "bool", "REVERSE", "NIL", "=", "REVERSE []", "[]"
REVERSE__DEF__e1:"list", "fun", "bool", "REVERSE", "NIL", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (REVERSE A(A)list) [AA]", "CONS AA A(A)list", "REVERSE (CONS AA A(A)list)", "REVERSE A(A)list", "[AA]", "[]"
REVERSE__APPEND:"list", "fun", "bool", "REVERSE", "APPEND", "=", "A(A)list", "APPEND (REVERSE A(A)list) (REVERSE A(A)list)", "APPEND A(A)list A(A)list", "REVERSE (APPEND A(A)list A(A)list)", "REVERSE A(A)list"
REVERSE__REVERSE:"list", "fun", "bool", "REVERSE", "=", "A(A)list", "REVERSE (REVERSE A(A)list)", "REVERSE A(A)list"
REVERSE__11:"list", "fun", "bool", "REVERSE", "=", "A(A)list", "REVERSE A(A)list", "REVERSE A(A)list = REVERSE A(A)list <=> A(A)list = A(A)list"
MEM__REVERSE:"list", "fun", "bool", "REVERSE", "LIST__TO__SET", "IN", "=", "A(A)list", "AA", "IN AA (LIST__TO__SET (REVERSE A(A)list))", "IN AA (LIST__TO__SET (REVERSE A(A)list)) <=> IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (REVERSE A(A)list)", "LIST__TO__SET A(A)list", "REVERSE A(A)list"
LENGTH__REVERSE:"num", "list", "fun", "bool", "REVERSE", "LENGTH", "=", "A(A)list", "LENGTH (REVERSE A(A)list)", "LENGTH A(A)list", "REVERSE A(A)list"
REVERSE__EQ__NIL:"list", "fun", "bool", "REVERSE", "NIL", "=", "A(A)list", "REVERSE A(A)list", "REVERSE A(A)list = [] <=> A(A)list = []", "[]"
REVERSE__EQ__SING:"list", "fun", "bool", "REVERSE", "NIL", "CONS", "=", "A(A)list", "AA", "REVERSE A(A)list", "REVERSE A(A)list = [AA] <=> A(A)list = [AA]", "[AA]", "[]"
FILTER__REVERSE:"list", "fun", "bool", "REVERSE", "FILTER", "=", "A(A)list", "AA->bool", "FILTER AA->bool (REVERSE A(A)list)", "FILTER AA->bool A(A)list", "REVERSE (FILTER AA->bool A(A)list)", "REVERSE A(A)list"
LAST__DEF:"list", "fun", "bool", "NIL", "LAST", "CONS", "COND", "=", "A(A)list", "AA", "CONS AA A(A)list", "LAST (CONS AA A(A)list)", "LAST A(A)list", "[]", "if A(A)list = [] then AA else LAST A(A)list"
FRONT__DEF:"list", "fun", "bool", "NIL", "FRONT", "CONS", "COND", "=", "A(A)list", "AA", "CONS AA (FRONT A(A)list)", "CONS AA A(A)list", "FRONT (CONS AA A(A)list)", "FRONT A(A)list", "[]", "if A(A)list = [] then [] else CONS AA (FRONT A(A)list)"
LAST__CONS__0:"list", "fun", "bool", "NIL", "LAST", "CONS", "=", "AA", "LAST [AA]", "[AA]", "[]"
LAST__CONS__e1:"list", "fun", "bool", "LAST", "CONS", "=", "A(A)list", "AA", "CONS AA (CONS AA A(A)list)", "CONS AA A(A)list", "LAST (CONS AA (CONS AA A(A)list))", "LAST (CONS AA A(A)list)"
LAST__EL:"num", "list", "fun", "bool", "~", "PRE", "NIL", "LENGTH", "LAST", "EL", "=", "A(A)list", "EL (PRE (LENGTH A(A)list)) A(A)list", "LAST A(A)list", "LENGTH A(A)list", "PRE (LENGTH A(A)list)", "[]"
FRONT__CONS__0:"list", "fun", "bool", "NIL", "FRONT", "CONS", "=", "AA", "FRONT [AA]", "[AA]", "[]"
FRONT__CONS__e1:"list", "fun", "bool", "FRONT", "CONS", "=", "A(A)list", "AA", "CONS AA (CONS AA A(A)list)", "CONS AA (FRONT (CONS AA A(A)list))", "CONS AA A(A)list", "FRONT (CONS AA (CONS AA A(A)list))", "FRONT (CONS AA A(A)list)"
LENGTH__FRONT__CONS:"num", "list", "fun", "bool", "LENGTH", "FRONT", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "FRONT (CONS AA A(A)list)", "LENGTH (FRONT (CONS AA A(A)list))", "LENGTH A(A)list"
FRONT__CONS__EQ__NIL__0:"list", "fun", "bool", "NIL", "FRONT", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "FRONT (CONS AA A(A)list)", "FRONT (CONS AA A(A)list) = [] <=> A(A)list = []", "[]"
FRONT__CONS__EQ__NIL__1:"list", "fun", "bool", "NIL", "FRONT", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "FRONT (CONS AA A(A)list)", "[]", "[] = FRONT (CONS AA A(A)list) <=> A(A)list = []"
FRONT__CONS__EQ__NIL__e2:"list", "fun", "bool", "NULL", "FRONT", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "FRONT (CONS AA A(A)list)", "NULL (FRONT (CONS AA A(A)list))", "NULL (FRONT (CONS AA A(A)list)) <=> NULL A(A)list", "NULL A(A)list"
APPEND__FRONT__LAST:"list", "fun", "bool", "~", "NIL", "LAST", "FRONT", "CONS", "APPEND", "=", "A(A)list", "APPEND (FRONT A(A)list) [LAST A(A)list]", "FRONT A(A)list", "LAST A(A)list", "[LAST A(A)list]", "[]"
LAST__CONS__cond:"list", "fun", "bool", "NIL", "LAST", "CONS", "COND", "=", "A(A)list", "AA", "CONS AA A(A)list", "LAST (CONS AA A(A)list)", "LAST A(A)list", "[]", "if A(A)list = [] then AA else LAST A(A)list"
LAST__APPEND__CONS:"list", "fun", "bool", "LAST", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list (CONS AA A(A)list)", "CONS AA A(A)list", "LAST (APPEND A(A)list (CONS AA A(A)list))", "LAST (CONS AA A(A)list)"
TAKE__def__0:"num", "list", "fun", "bool", "TAKE", "NIL", "=", "Anum", "TAKE Anum []", "[]"
TAKE__def__e1:"num", "list", "fun", "bool", "_2D", "ZERO", "TAKE", "NUMERAL", "NIL", "CONS", "COND", "BIT1", "=", "0", "0", "A(A)list", "AA", "Anum", "BIT1 ZERO", "CONS AA (TAKE (_2D Anum (NUMERAL (BIT1 ZERO))) A(A)list)", "CONS AA A(A)list", "NUMERAL (BIT1 ZERO)", "TAKE (_2D Anum (NUMERAL (BIT1 ZERO))) A(A)list", "TAKE Anum (CONS AA A(A)list)", "ZERO", "[]", "_2D Anum (NUMERAL (BIT1 ZERO))", "if Anum = 0 then [] else CONS AA (TAKE (_2D Anum (NUMERAL (BIT1 ZERO))) A(A)list)"
DROP__def__0:"num", "list", "fun", "bool", "NIL", "DROP", "=", "Anum", "DROP Anum []", "[]"
DROP__def__e1:"num", "list", "fun", "bool", "_2D", "ZERO", "NUMERAL", "DROP", "CONS", "COND", "BIT1", "=", "0", "0", "A(A)list", "AA", "Anum", "BIT1 ZERO", "CONS AA A(A)list", "DROP (_2D Anum (NUMERAL (BIT1 ZERO))) A(A)list", "DROP Anum (CONS AA A(A)list)", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D Anum (NUMERAL (BIT1 ZERO))", "if Anum = 0 then CONS AA A(A)list else DROP (_2D Anum (NUMERAL (BIT1 ZERO))) A(A)list"
TAKE__0:"num", "list", "fun", "bool", "TAKE", "NIL", "=", "0", "0", "A(A)list", "TAKE 0 A(A)list", "[]"
TAKE__LENGTH__ID:"num", "list", "fun", "bool", "TAKE", "LENGTH", "=", "A(A)list", "LENGTH A(A)list", "TAKE (LENGTH A(A)list) A(A)list"
LENGTH__TAKE:"num", "list", "fun", "bool", "_3C_3D", "TAKE", "LENGTH", "=", "A(A)list", "Anum", "LENGTH (TAKE Anum A(A)list)", "LENGTH A(A)list", "TAKE Anum A(A)list", "_3C_3D Anum (LENGTH A(A)list)"
TAKE__APPEND1:"num", "list", "fun", "bool", "_3C_3D", "TAKE", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "Anum", "LENGTH A(A)list", "TAKE Anum (APPEND A(A)list A(A)list)", "TAKE Anum A(A)list", "_3C_3D Anum (LENGTH A(A)list)"
TAKE__APPEND2:"num", "list", "fun", "bool", "_3C", "_2D", "TAKE", "LENGTH", "APPEND", "=", "A(A)list", "APPEND A(A)list (TAKE (_2D Anum (LENGTH A(A)list)) A(A)list)", "APPEND A(A)list A(A)list", "Anum", "LENGTH A(A)list", "TAKE (_2D Anum (LENGTH A(A)list)) A(A)list", "TAKE Anum (APPEND A(A)list A(A)list)", "_2D Anum (LENGTH A(A)list)", "_3C (LENGTH A(A)list) Anum"
DROP__0:"num", "list", "fun", "bool", "DROP", "=", "0", "0", "A(A)list", "DROP 0 A(A)list"
TAKE__DROP:"num", "list", "fun", "bool", "TAKE", "DROP", "APPEND", "=", "A(A)list", "APPEND (TAKE Anum A(A)list) (DROP Anum A(A)list)", "Anum", "DROP Anum A(A)list", "TAKE Anum A(A)list"
LENGTH__DROP:"num", "list", "fun", "bool", "_2D", "LENGTH", "DROP", "=", "A(A)list", "Anum", "DROP Anum A(A)list", "LENGTH (DROP Anum A(A)list)", "LENGTH A(A)list", "_2D (LENGTH A(A)list) Anum"
MEM__DROP:"num", "list", "fun", "bool", "_3C", "SUC", "LIST__TO__SET", "LENGTH", "IN", "EL", "DROP", "=", "A(A)list", "AA", "Anum", "DROP (SUC Anum) A(A)list", "DROP Anum A(A)list", "EL Anum A(A)list", "IN AA (LIST__TO__SET (DROP (SUC Anum) A(A)list))", "IN AA (LIST__TO__SET (DROP Anum A(A)list))", "IN AA (LIST__TO__SET (DROP Anum A(A)list)) <=> _3C Anum (LENGTH A(A)list) /\ AA = EL Anum A(A)list \/ IN AA (LIST__TO__SET (DROP (SUC Anum) A(A)list))", "LENGTH A(A)list", "LIST__TO__SET (DROP (SUC Anum) A(A)list)", "LIST__TO__SET (DROP Anum A(A)list)", "SUC Anum", "_3C Anum (LENGTH A(A)list)"
DROP__NIL:"num", "list", "fun", "bool", "_3E_3D", "NIL", "LENGTH", "DROP", "=", "A(A)list", "Anum", "DROP Anum A(A)list", "DROP Anum A(A)list = [] <=> _3E_3D Anum (LENGTH A(A)list)", "LENGTH A(A)list", "[]", "_3E_3D Anum (LENGTH A(A)list)"
FOLDL2__ind:"list", "fun", "bool", "NIL", "CONS", "A(A->B->C->A)->A->(B)list->(C)list->bool AA->B->C->A (AA->B->C->A AA AB AC) A(B)list A(C)list", "A(A->B->C->A)->A->(B)list->(C)list->bool AA->B->C->A AA (CONS AB A(B)list) (CONS AC A(C)list)", "A(A->B->C->A)->A->(B)list->(C)list->bool AA->B->C->A AA (CONS AB A(B)list) []", "A(A->B->C->A)->A->(B)list->(C)list->bool AA->B->C->A AA A(B)list A(C)list", "A(A->B->C->A)->A->(B)list->(C)list->bool AA->B->C->A AA [] A(C)list", "A(B)list", "A(C)list", "AA", "AA->B->C->A", "AA->B->C->A AA AB AC", "AB", "AC", "CONS AB A(B)list", "CONS AC A(C)list", "[]"
FOLDL2__def__0:"list", "fun", "bool", "FOLDL2", "CONS", "=", "A(B)list", "A(C)list", "AA", "AA->B->C->A", "AA->B->C->A AA AB AC", "AB", "AC", "CONS AB A(B)list", "CONS AC A(C)list", "FOLDL2 AA->B->C->A (AA->B->C->A AA AB AC) A(B)list A(C)list", "FOLDL2 AA->B->C->A AA (CONS AB A(B)list) (CONS AC A(C)list)"
FOLDL2__def__1:"list", "fun", "bool", "NIL", "FOLDL2", "=", "A(B)list", "AC", "AC->A->B->C", "FOLDL2 AC->A->B->C AC [] A(B)list", "[]"
FOLDL2__def__e2:"list", "fun", "bool", "NIL", "FOLDL2", "CONS", "=", "A(A)list", "AA", "AC", "AC->A->B->C", "CONS AA A(A)list", "FOLDL2 AC->A->B->C AC (CONS AA A(A)list) []", "[]"
FOLDL2__cong:"list", "fun", "bool", "LIST__TO__SET", "IN", "FOLDL2", "=", "A(B)list", "A(C)list", "AA", "AA->B->C->A", "AA->B->C->A AA AB AC", "AB", "AC", "FOLDL2 AA->B->C->A AA A(B)list A(C)list", "IN AB (LIST__TO__SET A(B)list)", "IN AC (LIST__TO__SET A(C)list)", "LIST__TO__SET A(B)list", "LIST__TO__SET A(C)list"
FOLDL2__FOLDL:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "UNCURRY", "LENGTH", "FOLDL2", "FOLDL", "=", "A(B)list", "A(C)list", "AA", "AA->B->C->A", "AA->B->C->A AA", "FOLDL (\AA. UNCURRY (AA->B->C->A AA)) AA (ZIP (_2C A(B)list A(C)list))", "FOLDL2 AA->B->C->A AA A(B)list A(C)list", "LENGTH A(B)list", "LENGTH A(C)list", "UNCURRY (AA->B->C->A AA)", "ZIP (_2C A(B)list A(C)list)", "_2C A(B)list A(C)list"
EVERY2__cong:"list", "fun", "bool", "LIST__TO__SET", "LIST__REL", "IN", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AA->B->bool AA AB <=> AA->B->bool AA AB", "AB", "IN AA (LIST__TO__SET A(A)list)", "IN AB (LIST__TO__SET A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list <=> LIST__REL AA->B->bool A(A)list A(B)list", "LIST__TO__SET A(A)list", "LIST__TO__SET A(B)list"
MAP__EQ__EVERY2:"num", "list", "fun", "bool", "MAP", "LIST__REL", "LENGTH", "=", "A(B)list", "A(C)list", "AB", "AB->A", "AB->A AB", "AC", "AC->A", "AC->A AC", "LENGTH A(B)list", "LENGTH A(C)list", "LIST__REL (\AB AC. AB->A AB = AC->A AC) A(B)list A(C)list", "MAP AB->A A(B)list", "MAP AB->A A(B)list = MAP AC->A A(C)list <=> LENGTH A(B)list = LENGTH A(C)list /\ LIST__REL (\AB AC. AB->A AB = AC->A AC) A(B)list A(C)list", "MAP AC->A A(C)list"
EVERY2__EVERY:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "UNCURRY", "LIST__REL", "LENGTH", "EVERY", "=", "A(A)list", "A(B)list", "AA->B->bool", "EVERY (UNCURRY AA->B->bool) (ZIP (_2C A(A)list A(B)list))", "LENGTH A(A)list", "LENGTH A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list <=> LENGTH A(A)list = LENGTH A(B)list /\ EVERY (UNCURRY AA->B->bool) (ZIP (_2C A(A)list A(B)list))", "UNCURRY AA->B->bool", "ZIP (_2C A(A)list A(B)list)", "_2C A(A)list A(B)list"
EVERY2__LENGTH:"num", "list", "fun", "bool", "LIST__REL", "LENGTH", "=", "A(A)list", "A(B)list", "AA->B->bool", "LENGTH A(A)list", "LENGTH A(B)list", "LIST__REL AA->B->bool A(A)list A(B)list"
EVERY2__mono:"list", "fun", "bool", "LIST__REL", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "LIST__REL AA->B->bool A(A)list A(B)list"
ALL__DISTINCT__0:"list", "fun", "bool", "T", "NIL", "ALL__DISTINCT", "=", "ALL__DISTINCT []", "ALL__DISTINCT [] <=> T", "T", "[]"
ALL__DISTINCT__e1:"list", "fun", "bool", "~", "LIST__TO__SET", "IN", "CONS", "ALL__DISTINCT", "=", "A(A)list", "AA", "ALL__DISTINCT (CONS AA A(A)list)", "ALL__DISTINCT (CONS AA A(A)list) <=> ~IN AA (LIST__TO__SET A(A)list) /\ ALL__DISTINCT A(A)list", "ALL__DISTINCT A(A)list", "CONS AA A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
ALL__DISTINCT__FILTER:"list", "fun", "bool", "NIL", "LIST__TO__SET", "IN", "FILTER", "CONS", "ALL__DISTINCT", "=", "$equals", "$equals AA", "A(A)list", "AA", "ALL__DISTINCT A(A)list", "ALL__DISTINCT A(A)list <=> (!AA. IN AA (LIST__TO__SET A(A)list) ==> FILTER ($equals AA) A(A)list = [AA])", "FILTER ($equals AA) A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "[AA]", "[]"
FILTER__ALL__DISTINCT:"list", "fun", "bool", "FILTER", "ALL__DISTINCT", "A(A)list", "AA->bool", "ALL__DISTINCT (FILTER AA->bool A(A)list)", "ALL__DISTINCT A(A)list", "FILTER AA->bool A(A)list"
ALL__DISTINCT__MAP:"list", "fun", "bool", "MAP", "ALL__DISTINCT", "A(B)list", "AB->A", "ALL__DISTINCT (MAP AB->A A(B)list)", "ALL__DISTINCT A(B)list", "MAP AB->A A(B)list"
EL__ALL__DISTINCT__EL__EQ:"num", "list", "fun", "bool", "_3C", "LENGTH", "EL", "ALL__DISTINCT", "=", "A(A)list", "ALL__DISTINCT A(A)list", "ALL__DISTINCT A(A)list <=> (!Anum Anum. _3C Anum (LENGTH A(A)list) /\ _3C Anum (LENGTH A(A)list) ==> (EL Anum A(A)list = EL Anum A(A)list <=> Anum = Anum))", "Anum", "EL Anum A(A)list", "EL Anum A(A)list = EL Anum A(A)list <=> Anum = Anum", "LENGTH A(A)list", "_3C Anum (LENGTH A(A)list)"
ALL__DISTINCT__EL__IMP:"num", "list", "fun", "bool", "_3C", "LENGTH", "EL", "ALL__DISTINCT", "=", "A(A)list", "ALL__DISTINCT A(A)list", "Anum", "EL Anum A(A)list", "EL Anum A(A)list = EL Anum A(A)list <=> Anum = Anum", "LENGTH A(A)list", "_3C Anum (LENGTH A(A)list)"
ALL__DISTINCT__APPEND:"list", "fun", "bool", "~", "LIST__TO__SET", "IN", "APPEND", "ALL__DISTINCT", "=", "A(A)list", "AA", "ALL__DISTINCT (APPEND A(A)list A(A)list)", "ALL__DISTINCT (APPEND A(A)list A(A)list) <=> ALL__DISTINCT A(A)list /\ ALL__DISTINCT A(A)list /\ (!AA. IN AA (LIST__TO__SET A(A)list) ==> ~IN AA (LIST__TO__SET A(A)list))", "ALL__DISTINCT A(A)list", "APPEND A(A)list A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
ALL__DISTINCT__SING:"list", "fun", "bool", "NIL", "CONS", "ALL__DISTINCT", "AA", "ALL__DISTINCT [AA]", "[AA]", "[]"
ALL__DISTINCT__ZIP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "LENGTH", "ALL__DISTINCT", "=", "A(A)list", "A(B)list", "ALL__DISTINCT (ZIP (_2C A(A)list A(B)list))", "ALL__DISTINCT A(A)list", "LENGTH A(A)list", "LENGTH A(B)list", "ZIP (_2C A(A)list A(B)list)", "_2C A(A)list A(B)list"
ALL__DISTINCT__ZIP__SWAP:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "LENGTH", "ALL__DISTINCT", "=", "A(A)list", "A(B)list", "ALL__DISTINCT (ZIP (_2C A(A)list A(B)list))", "ALL__DISTINCT (ZIP (_2C A(B)list A(A)list))", "LENGTH A(A)list", "LENGTH A(B)list", "ZIP (_2C A(A)list A(B)list)", "ZIP (_2C A(B)list A(A)list)", "_2C A(A)list A(B)list", "_2C A(B)list A(A)list"
ALL__DISTINCT__REVERSE:"list", "fun", "bool", "REVERSE", "ALL__DISTINCT", "=", "A(A)list", "ALL__DISTINCT (REVERSE A(A)list)", "ALL__DISTINCT (REVERSE A(A)list) <=> ALL__DISTINCT A(A)list", "ALL__DISTINCT A(A)list", "REVERSE A(A)list"
LRC__def__0:"list", "fun", "bool", "NIL", "LRC", "=", "AA", "AA->A->bool", "LRC AA->A->bool [] AA AA", "LRC AA->A->bool [] AA AA <=> AA = AA", "[]"
LRC__def__e1:"list", "fun", "bool", "LRC", "CONS", "=", "A(A)list", "AA", "AA->A->bool", "AA->A->bool AA AA", "CONS AA A(A)list", "LRC AA->A->bool (CONS AA A(A)list) AA AA", "LRC AA->A->bool (CONS AA A(A)list) AA AA <=> AA = AA /\ (?AA. AA->A->bool AA AA /\ LRC AA->A->bool A(A)list AA AA)", "LRC AA->A->bool A(A)list AA AA"
NRC__LRC:"num", "list", "fun", "bool", "NRC", "LRC", "LENGTH", "=", "A(A)list", "AA", "AA->A->bool", "Anum", "LENGTH A(A)list", "LRC AA->A->bool A(A)list AA AA", "NRC AA->A->bool Anum AA AA", "NRC AA->A->bool Anum AA AA <=> (?A(A)list. LRC AA->A->bool A(A)list AA AA /\ LENGTH A(A)list = Anum)"
LRC__MEM:"list", "fun", "bool", "LRC", "LIST__TO__SET", "IN", "A(A)list", "AA", "AA->A->bool", "AA->A->bool AA AA", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "LRC AA->A->bool A(A)list AA AA"
LRC__MEM__right:"list", "fun", "bool", "LRC", "LIST__TO__SET", "IN", "CONS", "A(A)list", "AA", "AA->A->bool", "AA->A->bool AA AA", "CONS AA A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "LRC AA->A->bool (CONS AA A(A)list) AA AA", "LRC AA->A->bool A(A)list AA AA"
LIST__TO__SET__APPEND:"list", "fun", "bool", "UNION", "LIST__TO__SET", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "LIST__TO__SET (APPEND A(A)list A(A)list)", "LIST__TO__SET A(A)list", "UNION (LIST__TO__SET A(A)list) (LIST__TO__SET A(A)list)"
UNION__APPEND:"list", "fun", "bool", "UNION", "LIST__TO__SET", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "LIST__TO__SET (APPEND A(A)list A(A)list)", "LIST__TO__SET A(A)list", "UNION (LIST__TO__SET A(A)list) (LIST__TO__SET A(A)list)"
LIST__TO__SET__EQ__EMPTY__0:"list", "fun", "bool", "NIL", "LIST__TO__SET", "EMPTY", "=", "A(A)list", "LIST__TO__SET A(A)list", "LIST__TO__SET A(A)list = {} <=> A(A)list = []", "[]", "{}"
LIST__TO__SET__EQ__EMPTY__e1:"list", "fun", "bool", "NIL", "LIST__TO__SET", "EMPTY", "=", "A(A)list", "LIST__TO__SET A(A)list", "[]", "{}", "{} = LIST__TO__SET A(A)list <=> A(A)list = []"
FINITE__LIST__TO__SET:"list", "fun", "bool", "LIST__TO__SET", "FINITE", "A(A)list", "FINITE (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
SUM__IMAGE__LIST__TO__SET__upper__bound:"num", "list", "fun", "bool", "_3C_3D", "SUM__IMAGE", "SUM", "MAP", "LIST__TO__SET", "A(A)list", "AA->num", "LIST__TO__SET A(A)list", "MAP AA->num A(A)list", "SUM (MAP AA->num A(A)list)", "SUM__IMAGE AA->num (LIST__TO__SET A(A)list)", "_3C_3D (SUM__IMAGE AA->num (LIST__TO__SET A(A)list)) (SUM (MAP AA->num A(A)list))"
SUM__MAP__MEM__bound:"num", "list", "fun", "bool", "_3C_3D", "SUM", "MAP", "LIST__TO__SET", "IN", "A(A)list", "AA", "AA->num", "AA->num AA", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "MAP AA->num A(A)list", "SUM (MAP AA->num A(A)list)", "_3C_3D (AA->num AA) (SUM (MAP AA->num A(A)list))"
INJ__MAP__EQ:"list", "fun", "bool", "UNIV", "UNION", "MAP", "LIST__TO__SET", "INJ", "=", "(:A)", "A(B)list", "AB->A", "INJ AB->A (UNION (LIST__TO__SET A(B)list) (LIST__TO__SET A(B)list)) (:A)", "LIST__TO__SET A(B)list", "MAP AB->A A(B)list", "UNION (LIST__TO__SET A(B)list) (LIST__TO__SET A(B)list)"
CARD__LIST__TO__SET:"num", "list", "fun", "bool", "_3C_3D", "LIST__TO__SET", "LENGTH", "CARD", "A(A)list", "CARD (LIST__TO__SET A(A)list)", "LENGTH A(A)list", "LIST__TO__SET A(A)list", "_3C_3D (CARD (LIST__TO__SET A(A)list)) (LENGTH A(A)list)"
ALL__DISTINCT__CARD__LIST__TO__SET:"num", "list", "fun", "bool", "LIST__TO__SET", "LENGTH", "CARD", "ALL__DISTINCT", "=", "A(A)list", "ALL__DISTINCT A(A)list", "CARD (LIST__TO__SET A(A)list)", "LENGTH A(A)list", "LIST__TO__SET A(A)list"
LIST__TO__SET__REVERSE:"list", "fun", "bool", "REVERSE", "LIST__TO__SET", "=", "A(A)list", "LIST__TO__SET (REVERSE A(A)list)", "LIST__TO__SET A(A)list", "REVERSE A(A)list"
LIST__TO__SET__THM__0:"list", "fun", "bool", "NIL", "LIST__TO__SET", "EMPTY", "=", "LIST__TO__SET []", "[]", "{}"
LIST__TO__SET__THM__e1:"list", "fun", "bool", "LIST__TO__SET", "INSERT", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "INSERT AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (CONS AA A(A)list)", "LIST__TO__SET A(A)list"
LIST__TO__SET__MAP:"list", "fun", "bool", "MAP", "LIST__TO__SET", "IMAGE", "=", "A(B)list", "AB->A", "IMAGE AB->A (LIST__TO__SET A(B)list)", "LIST__TO__SET (MAP AB->A A(B)list)", "LIST__TO__SET A(B)list", "MAP AB->A A(B)list"
LIST__TO__SET__FILTER:"prod", "list", "fun", "bool", "_2C", "LIST__TO__SET", "INTER", "GSPEC", "FILTER", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "FILTER AA->bool A(A)list", "GSPEC (\AA. _2C AA (AA->bool AA))", "INTER (GSPEC (\AA. _2C AA (AA->bool AA))) (LIST__TO__SET A(A)list)", "LIST__TO__SET (FILTER AA->bool A(A)list)", "LIST__TO__SET A(A)list", "_2C AA (AA->bool AA)"
SET__TO__LIST__primitive:"list", "fun", "bool", "~", "_40", "WFREC", "WF", "SET__TO__LIST", "REST", "NIL", "I", "FINITE", "EMPTY", "CONS", "COND", "CHOICE", "ARB", "=", "A(A->bool)->(A)list (REST AA->bool)", "A(A->bool)->(A->bool)->bool", "A(A->bool)->(A->bool)->bool (REST AA->bool) AA->bool", "AA->bool", "ARB", "CHOICE AA->bool", "CONS (CHOICE AA->bool) (A(A->bool)->(A)list (REST AA->bool))", "FINITE AA->bool", "I (if FINITE AA->bool then if AA->bool = {} then [] else CONS (CHOICE AA->bool) (A(A->bool)->(A)list (REST AA->bool)) else ARB)", "REST AA->bool", "SET__TO__LIST", "WF A(A->bool)->(A->bool)->bool", "WFREC (_40 (\A(A->bool)->(A->bool)->bool. WF A(A->bool)->(A->bool)->bool /\ (!AA->bool. FINITE AA->bool /\ ~(AA->bool = {}) ==> A(A->bool)->(A->bool)->bool (REST AA->bool) AA->bool))) (\A(A->bool)->(A)list AA->bool. I (if FINITE AA->bool then if AA->bool = {} then [] else CONS (CHOICE AA->bool) (A(A->bool)->(A)list (REST AA->bool)) else ARB))", "[]", "_40 (\A(A->bool)->(A->bool)->bool. WF A(A->bool)->(A->bool)->bool /\ (!AA->bool. FINITE AA->bool /\ ~(AA->bool = {}) ==> A(A->bool)->(A->bool)->bool (REST AA->bool) AA->bool))", "if AA->bool = {} then [] else CONS (CHOICE AA->bool) (A(A->bool)->(A)list (REST AA->bool))", "if FINITE AA->bool then if AA->bool = {} then [] else CONS (CHOICE AA->bool) (A(A->bool)->(A)list (REST AA->bool)) else ARB", "{}"
SET__TO__LIST__THM:"list", "fun", "bool", "SET__TO__LIST", "REST", "NIL", "FINITE", "EMPTY", "CONS", "COND", "CHOICE", "=", "AA->bool", "CHOICE AA->bool", "CONS (CHOICE AA->bool) (SET__TO__LIST (REST AA->bool))", "FINITE AA->bool", "REST AA->bool", "SET__TO__LIST (REST AA->bool)", "SET__TO__LIST AA->bool", "[]", "if AA->bool = {} then [] else CONS (CHOICE AA->bool) (SET__TO__LIST (REST AA->bool))", "{}"
SET__TO__LIST__IND:"fun", "bool", "~", "REST", "FINITE", "EMPTY", "=", "A(A->bool)->bool (REST AA->bool)", "A(A->bool)->bool AA->bool", "AA->bool", "FINITE AA->bool", "REST AA->bool", "{}"
SET__TO__LIST__EMPTY:"list", "fun", "bool", "SET__TO__LIST", "NIL", "EMPTY", "=", "SET__TO__LIST {}", "[]", "{}"
SET__TO__LIST__INV:"list", "fun", "bool", "SET__TO__LIST", "LIST__TO__SET", "FINITE", "=", "AA->bool", "FINITE AA->bool", "LIST__TO__SET (SET__TO__LIST AA->bool)", "SET__TO__LIST AA->bool"
SET__TO__LIST__CARD:"num", "list", "fun", "bool", "SET__TO__LIST", "LENGTH", "FINITE", "CARD", "=", "AA->bool", "CARD AA->bool", "FINITE AA->bool", "LENGTH (SET__TO__LIST AA->bool)", "SET__TO__LIST AA->bool"
SET__TO__LIST__IN__MEM:"list", "fun", "bool", "SET__TO__LIST", "LIST__TO__SET", "IN", "FINITE", "=", "AA", "AA->bool", "FINITE AA->bool", "IN AA (LIST__TO__SET (SET__TO__LIST AA->bool))", "IN AA AA->bool", "IN AA AA->bool <=> IN AA (LIST__TO__SET (SET__TO__LIST AA->bool))", "LIST__TO__SET (SET__TO__LIST AA->bool)", "SET__TO__LIST AA->bool"
MEM__SET__TO__LIST:"list", "fun", "bool", "SET__TO__LIST", "LIST__TO__SET", "IN", "FINITE", "=", "AA", "AA->bool", "FINITE AA->bool", "IN AA (LIST__TO__SET (SET__TO__LIST AA->bool))", "IN AA (LIST__TO__SET (SET__TO__LIST AA->bool)) <=> IN AA AA->bool", "IN AA AA->bool", "LIST__TO__SET (SET__TO__LIST AA->bool)", "SET__TO__LIST AA->bool"
SET__TO__LIST__SING:"list", "fun", "bool", "SET__TO__LIST", "NIL", "INSERT", "EMPTY", "CONS", "=", "AA", "SET__TO__LIST {AA}", "[AA]", "[]", "{AA}", "{}"
ALL__DISTINCT__SET__TO__LIST:"list", "fun", "bool", "SET__TO__LIST", "FINITE", "ALL__DISTINCT", "AA->bool", "ALL__DISTINCT (SET__TO__LIST AA->bool)", "FINITE AA->bool", "SET__TO__LIST AA->bool"
ITSET__eq__FOLDL__SET__TO__LIST:"list", "fun", "bool", "SET__TO__LIST", "ITSET", "FOLDL", "FINITE", "C", "=", "AA", "AB->A->A", "AB->bool", "C AB->A->A", "FINITE AB->bool", "FOLDL (C AB->A->A) AA (SET__TO__LIST AB->bool)", "ITSET AB->A->A AB->bool AA", "SET__TO__LIST AB->bool"
isPREFIX__0:"list", "fun", "bool", "isPREFIX", "T", "NIL", "=", "A(A)list", "T", "[]", "isPREFIX [] A(A)list", "isPREFIX [] A(A)list <=> T"
isPREFIX__e1:"list", "fun", "bool", "list__CASE", "isPREFIX", "F", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "F", "isPREFIX (CONS AA A(A)list) A(A)list", "isPREFIX (CONS AA A(A)list) A(A)list <=> list__CASE A(A)list F (\AA A(A)list. AA = AA /\ isPREFIX A(A)list A(A)list)", "isPREFIX A(A)list A(A)list", "list__CASE A(A)list F (\AA A(A)list. AA = AA /\ isPREFIX A(A)list A(A)list)"
isPREFIX__THM__0:"list", "fun", "bool", "isPREFIX", "T", "NIL", "=", "A(A)list", "T", "[]", "isPREFIX [] A(A)list", "isPREFIX [] A(A)list <=> T"
isPREFIX__THM__1:"list", "fun", "bool", "isPREFIX", "NIL", "F", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "F", "[]", "isPREFIX (CONS AA A(A)list) []", "isPREFIX (CONS AA A(A)list) [] <=> F"
isPREFIX__THM__e2:"list", "fun", "bool", "isPREFIX", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "isPREFIX (CONS AA A(A)list) (CONS AA A(A)list)", "isPREFIX (CONS AA A(A)list) (CONS AA A(A)list) <=> AA = AA /\ isPREFIX A(A)list A(A)list", "isPREFIX A(A)list A(A)list"
SNOC__0:"list", "fun", "bool", "SNOC", "NIL", "CONS", "=", "AA", "SNOC AA []", "[AA]", "[]"
SNOC__e1:"list", "fun", "bool", "SNOC", "CONS", "=", "A(A)list", "AA", "CONS AA (SNOC AA A(A)list)", "CONS AA A(A)list", "SNOC AA (CONS AA A(A)list)", "SNOC AA A(A)list"
LENGTH__SNOC:"num", "list", "fun", "bool", "SUC", "SNOC", "LENGTH", "=", "A(A)list", "AA", "LENGTH (SNOC AA A(A)list)", "LENGTH A(A)list", "SNOC AA A(A)list", "SUC (LENGTH A(A)list)"
LAST__SNOC:"list", "fun", "bool", "SNOC", "LAST", "=", "A(A)list", "AA", "LAST (SNOC AA A(A)list)", "SNOC AA A(A)list"
FRONT__SNOC:"list", "fun", "bool", "SNOC", "FRONT", "=", "A(A)list", "AA", "FRONT (SNOC AA A(A)list)", "SNOC AA A(A)list"
SNOC__APPEND:"list", "fun", "bool", "SNOC", "NIL", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list [AA]", "SNOC AA A(A)list", "[AA]", "[]"
LIST__TO__SET__SNOC:"list", "fun", "bool", "SNOC", "LIST__TO__SET", "INSERT", "=", "A(A)list", "AA", "INSERT AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (SNOC AA A(A)list)", "LIST__TO__SET A(A)list", "SNOC AA A(A)list"
MAP__SNOC:"list", "fun", "bool", "SNOC", "MAP", "=", "A(B)list", "AB", "AB->A", "AB->A AB", "MAP AB->A (SNOC AB A(B)list)", "MAP AB->A A(B)list", "SNOC (AB->A AB) (MAP AB->A A(B)list)", "SNOC AB A(B)list"
EL__SNOC:"num", "list", "fun", "bool", "_3C", "SNOC", "LENGTH", "EL", "=", "A(A)list", "AA", "Anum", "EL Anum (SNOC AA A(A)list)", "EL Anum A(A)list", "LENGTH A(A)list", "SNOC AA A(A)list", "_3C Anum (LENGTH A(A)list)"
EL__LENGTH__SNOC:"num", "list", "fun", "bool", "SNOC", "LENGTH", "EL", "=", "A(A)list", "AA", "EL (LENGTH A(A)list) (SNOC AA A(A)list)", "LENGTH A(A)list", "SNOC AA A(A)list"
APPEND__SNOC:"list", "fun", "bool", "SNOC", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list (SNOC AA A(A)list)", "APPEND A(A)list A(A)list", "SNOC AA (APPEND A(A)list A(A)list)", "SNOC AA A(A)list"
EVERY__SNOC:"list", "fun", "bool", "SNOC", "EVERY", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY AA->bool (SNOC AA A(A)list)", "EVERY AA->bool (SNOC AA A(A)list) <=> EVERY AA->bool A(A)list /\ AA->bool AA", "EVERY AA->bool A(A)list", "SNOC AA A(A)list"
EXISTS__SNOC:"list", "fun", "bool", "SNOC", "EXISTS", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EXISTS AA->bool (SNOC AA A(A)list)", "EXISTS AA->bool (SNOC AA A(A)list) <=> AA->bool AA \/ EXISTS AA->bool A(A)list", "EXISTS AA->bool A(A)list", "SNOC AA A(A)list"
MEM__SNOC:"list", "fun", "bool", "SNOC", "LIST__TO__SET", "IN", "=", "A(A)list", "AA", "IN AA (LIST__TO__SET (SNOC AA A(A)list))", "IN AA (LIST__TO__SET (SNOC AA A(A)list)) <=> AA = AA \/ IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (SNOC AA A(A)list)", "LIST__TO__SET A(A)list", "SNOC AA A(A)list"
SNOC__11:"list", "fun", "bool", "SNOC", "=", "A(A)list", "AA", "SNOC AA A(A)list", "SNOC AA A(A)list = SNOC AA A(A)list <=> AA = AA /\ A(A)list = A(A)list"
REVERSE__SNOC__DEF__0:"list", "fun", "bool", "REVERSE", "NIL", "=", "REVERSE []", "[]"
REVERSE__SNOC__DEF__e1:"list", "fun", "bool", "SNOC", "REVERSE", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "REVERSE (CONS AA A(A)list)", "REVERSE A(A)list", "SNOC AA (REVERSE A(A)list)"
REVERSE__SNOC:"list", "fun", "bool", "SNOC", "REVERSE", "CONS", "=", "A(A)list", "AA", "CONS AA (REVERSE A(A)list)", "REVERSE (SNOC AA A(A)list)", "REVERSE A(A)list", "SNOC AA A(A)list"
SNOC__Axiom:"list", "fun", "bool", "SNOC", "NIL", "=", "A(B)list", "A(B)list->A (SNOC AB A(B)list)", "A(B)list->A A(B)list", "A(B)list->A []", "AA", "AB", "AB->(B)list->A->A AB A(B)list (A(B)list->A A(B)list)", "SNOC AB A(B)list", "[]"
SNOC__INDUCT:"list", "fun", "bool", "SNOC", "NIL", "A(A)list", "A(A)list->bool (SNOC AA A(A)list)", "A(A)list->bool A(A)list", "A(A)list->bool []", "AA", "SNOC AA A(A)list", "[]"
SNOC__CASES:"list", "fun", "bool", "SNOC", "NIL", "=", "A(A)list", "AA", "SNOC AA A(A)list", "[]"
GENLIST__0:"num", "list", "fun", "bool", "NIL", "GENLIST", "=", "0", "0", "Anum->A", "GENLIST Anum->A 0", "[]"
GENLIST__e1:"num", "list", "fun", "bool", "SUC", "SNOC", "GENLIST", "=", "Anum", "Anum->A", "Anum->A Anum", "GENLIST Anum->A (SUC Anum)", "GENLIST Anum->A Anum", "SNOC (Anum->A Anum) (GENLIST Anum->A Anum)", "SUC Anum"
LENGTH__GENLIST:"num", "list", "fun", "bool", "LENGTH", "GENLIST", "=", "Anum", "Anum->A", "GENLIST Anum->A Anum", "LENGTH (GENLIST Anum->A Anum)"
GENLIST__AUX__0:"num", "list", "fun", "bool", "GENLIST__AUX", "=", "0", "0", "A(A)list", "Anum->A", "GENLIST__AUX Anum->A 0 A(A)list"
GENLIST__AUX__e1:"num", "list", "fun", "bool", "SUC", "GENLIST__AUX", "CONS", "=", "A(A)list", "Anum", "Anum->A", "Anum->A Anum", "CONS (Anum->A Anum) A(A)list", "GENLIST__AUX Anum->A (SUC Anum) A(A)list", "GENLIST__AUX Anum->A Anum (CONS (Anum->A Anum) A(A)list)", "SUC Anum"
GENLIST__AUX__compute__0:"num", "list", "fun", "bool", "GENLIST__AUX", "=", "0", "0", "A(A)list", "Anum->A", "GENLIST__AUX Anum->A 0 A(A)list"
GENLIST__AUX__compute__1:"num", "list", "fun", "bool", "_2D", "ZERO", "NUMERAL", "GENLIST__AUX", "CONS", "BIT1", "=", "A(A)list", "Anum", "Anum->A", "Anum->A (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO)))", "BIT1 Anum", "BIT1 ZERO", "CONS (Anum->A (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO)))) A(A)list", "GENLIST__AUX Anum->A (NUMERAL (BIT1 Anum)) A(A)list", "GENLIST__AUX Anum->A (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) (CONS (Anum->A (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO)))) A(A)list)", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))"
GENLIST__AUX__compute__e2:"num", "list", "fun", "bool", "NUMERAL", "GENLIST__AUX", "CONS", "BIT2", "BIT1", "=", "A(A)list", "Anum", "Anum->A", "Anum->A (NUMERAL (BIT1 Anum))", "BIT1 Anum", "BIT2 Anum", "CONS (Anum->A (NUMERAL (BIT1 Anum))) A(A)list", "GENLIST__AUX Anum->A (NUMERAL (BIT1 Anum)) (CONS (Anum->A (NUMERAL (BIT1 Anum))) A(A)list)", "GENLIST__AUX Anum->A (NUMERAL (BIT2 Anum)) A(A)list", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)"
PAD__LEFT0:"num", "list", "fun", "bool", "_2D", "PAD__LEFT", "LENGTH", "K", "GENLIST", "APPEND", "=", "A(A)list", "AA", "APPEND (GENLIST (K AA) (_2D Anum (LENGTH A(A)list))) A(A)list", "Anum", "GENLIST (K AA) (_2D Anum (LENGTH A(A)list))", "K AA", "LENGTH A(A)list", "PAD__LEFT AA Anum A(A)list", "_2D Anum (LENGTH A(A)list)"
PAD__RIGHT0:"num", "list", "fun", "bool", "_2D", "PAD__RIGHT", "LENGTH", "K", "GENLIST", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list (GENLIST (K AA) (_2D Anum (LENGTH A(A)list)))", "Anum", "GENLIST (K AA) (_2D Anum (LENGTH A(A)list))", "K AA", "LENGTH A(A)list", "PAD__RIGHT AA Anum A(A)list", "_2D Anum (LENGTH A(A)list)"
MAP__GENLIST:"num", "list", "fun", "bool", "o", "MAP", "GENLIST", "=", "AB->A", "Anum", "Anum->B", "GENLIST (o AB->A Anum->B) Anum", "GENLIST Anum->B Anum", "MAP AB->A (GENLIST Anum->B Anum)", "o AB->A Anum->B"
EL__GENLIST:"num", "list", "fun", "bool", "_3C", "GENLIST", "EL", "=", "Anum", "Anum->A", "Anum->A Anum", "EL Anum (GENLIST Anum->A Anum)", "GENLIST Anum->A Anum", "_3C Anum Anum"
HD__GENLIST:"num", "list", "fun", "bool", "SUC", "HD", "GENLIST", "=", "0", "0", "Anum", "Anum->A", "Anum->A 0", "GENLIST Anum->A (SUC Anum)", "HD (GENLIST Anum->A (SUC Anum))", "SUC Anum"
HD__GENLIST__COR:"num", "list", "fun", "bool", "_3C", "HD", "GENLIST", "=", "0", "0", "Anum", "Anum->A", "Anum->A 0", "GENLIST Anum->A Anum", "HD (GENLIST Anum->A Anum)", "_3C 0 Anum"
GENLIST__FUN__EQ:"num", "list", "fun", "bool", "_3C", "GENLIST", "=", "Anum", "Anum->A", "Anum->A Anum", "GENLIST Anum->A Anum", "GENLIST Anum->A Anum = GENLIST Anum->A Anum <=> (!Anum. _3C Anum Anum ==> Anum->A Anum = Anum->A Anum)", "_3C Anum Anum"
GENLIST__APPEND:"num", "list", "fun", "bool", "_2B", "GENLIST", "APPEND", "=", "APPEND (GENLIST Anum->A Anum) (GENLIST (\Anum. Anum->A (_2B Anum Anum)) Anum)", "Anum", "Anum->A", "Anum->A (_2B Anum Anum)", "GENLIST (\Anum. Anum->A (_2B Anum Anum)) Anum", "GENLIST Anum->A (_2B Anum Anum)", "GENLIST Anum->A Anum", "_2B Anum Anum"
EVERY__GENLIST:"num", "list", "fun", "bool", "_3C", "GENLIST", "EVERY", "=", "AA->bool", "AA->bool (Anum->A Anum)", "Anum", "Anum->A", "Anum->A Anum", "EVERY AA->bool (GENLIST Anum->A Anum)", "EVERY AA->bool (GENLIST Anum->A Anum) <=> (!Anum. _3C Anum Anum ==> AA->bool (Anum->A Anum))", "GENLIST Anum->A Anum", "_3C Anum Anum"
EXISTS__GENLIST:"num", "list", "fun", "bool", "_3C", "GENLIST", "EXISTS", "=", "AA->bool", "AA->bool (Anum->A Anum)", "Anum", "Anum->A", "Anum->A Anum", "EXISTS AA->bool (GENLIST Anum->A Anum)", "EXISTS AA->bool (GENLIST Anum->A Anum) <=> (?Anum. _3C Anum Anum /\ AA->bool (Anum->A Anum))", "GENLIST Anum->A Anum", "_3C Anum Anum"
TL__GENLIST:"num", "list", "fun", "bool", "o", "TL", "SUC", "GENLIST", "=", "Anum", "Anum->A", "GENLIST (o Anum->A SUC) Anum", "GENLIST Anum->A (SUC Anum)", "SUC", "SUC Anum", "TL (GENLIST Anum->A (SUC Anum))", "o Anum->A SUC"
ZIP__GENLIST:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "LENGTH", "GENLIST", "EL", "=", "A(A)list", "Anum", "Anum->B", "Anum->B Anum", "EL Anum A(A)list", "GENLIST (\Anum. _2C (EL Anum A(A)list) (Anum->B Anum)) Anum", "GENLIST Anum->B Anum", "LENGTH A(A)list", "ZIP (_2C A(A)list (GENLIST Anum->B Anum))", "_2C (EL Anum A(A)list) (Anum->B Anum)", "_2C A(A)list (GENLIST Anum->B Anum)"
GENLIST__CONS:"num", "list", "fun", "bool", "o", "SUC", "GENLIST", "CONS", "=", "0", "0", "Anum", "Anum->A", "Anum->A 0", "CONS (Anum->A 0) (GENLIST (o Anum->A SUC) Anum)", "GENLIST (o Anum->A SUC) Anum", "GENLIST Anum->A (SUC Anum)", "SUC", "SUC Anum", "o Anum->A SUC"
NULL__GENLIST:"num", "list", "fun", "bool", "NULL", "GENLIST", "=", "0", "0", "Anum", "Anum->A", "GENLIST Anum->A Anum", "NULL (GENLIST Anum->A Anum)", "NULL (GENLIST Anum->A Anum) <=> Anum = 0"
GENLIST__GENLIST__AUX:"num", "list", "fun", "bool", "NIL", "GENLIST__AUX", "GENLIST", "=", "Anum", "Anum->A", "GENLIST Anum->A Anum", "GENLIST__AUX Anum->A Anum []", "[]"
GENLIST__NUMERALS__0:"num", "list", "fun", "bool", "NIL", "GENLIST", "=", "0", "0", "Anum->A", "GENLIST Anum->A 0", "[]"
GENLIST__NUMERALS__e1:"num", "list", "fun", "bool", "NUMERAL", "NIL", "GENLIST__AUX", "GENLIST", "=", "Anum", "Anum->A", "GENLIST Anum->A (NUMERAL Anum)", "GENLIST__AUX Anum->A (NUMERAL Anum) []", "NUMERAL Anum", "[]"
MEM__GENLIST:"num", "list", "fun", "bool", "_3C", "LIST__TO__SET", "IN", "GENLIST", "=", "AA", "Anum", "Anum->A", "Anum->A Anum", "GENLIST Anum->A Anum", "IN AA (LIST__TO__SET (GENLIST Anum->A Anum))", "IN AA (LIST__TO__SET (GENLIST Anum->A Anum)) <=> (?Anum. _3C Anum Anum /\ AA = Anum->A Anum)", "LIST__TO__SET (GENLIST Anum->A Anum)", "_3C Anum Anum"
ALL__DISTINCT__SNOC:"list", "fun", "bool", "~", "SNOC", "LIST__TO__SET", "IN", "ALL__DISTINCT", "=", "A(A)list", "AA", "ALL__DISTINCT (SNOC AA A(A)list)", "ALL__DISTINCT (SNOC AA A(A)list) <=> ~IN AA (LIST__TO__SET A(A)list) /\ ALL__DISTINCT A(A)list", "ALL__DISTINCT A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "SNOC AA A(A)list"
ALL__DISTINCT__GENLIST:"num", "list", "fun", "bool", "_3C", "GENLIST", "ALL__DISTINCT", "=", "ALL__DISTINCT (GENLIST Anum->A Anum)", "ALL__DISTINCT (GENLIST Anum->A Anum) <=> (!Anum Anum. _3C Anum Anum /\ _3C Anum Anum /\ Anum->A Anum = Anum->A Anum ==> Anum = Anum)", "Anum", "Anum->A", "Anum->A Anum", "GENLIST Anum->A Anum", "_3C Anum Anum"
FOLDL__SNOC:"list", "fun", "bool", "SNOC", "FOLDL", "=", "A(B)list", "AA", "AA->B->A", "AA->B->A (FOLDL AA->B->A AA A(B)list) AB", "AB", "FOLDL AA->B->A AA (SNOC AB A(B)list)", "FOLDL AA->B->A AA A(B)list", "SNOC AB A(B)list"
SUM__SNOC:"num", "list", "fun", "bool", "_2B", "SUM", "SNOC", "=", "A(num)list", "Anum", "SNOC Anum A(num)list", "SUM (SNOC Anum A(num)list)", "SUM A(num)list", "_2B (SUM A(num)list) Anum"
SUM__APPEND:"num", "list", "fun", "bool", "_2B", "SUM", "APPEND", "=", "A(num)list", "APPEND A(num)list A(num)list", "SUM (APPEND A(num)list A(num)list)", "SUM A(num)list", "_2B (SUM A(num)list) (SUM A(num)list)"
SUM__MAP__FOLDL:"num", "list", "fun", "bool", "_2B", "SUM", "MAP", "FOLDL", "=", "0", "0", "A(A)list", "AA", "AA->num", "AA->num AA", "Anum", "FOLDL (\Anum AA. _2B Anum (AA->num AA)) 0 A(A)list", "MAP AA->num A(A)list", "SUM (MAP AA->num A(A)list)", "_2B Anum (AA->num AA)"
SUM__IMAGE__eq__SUM__MAP__SET__TO__LIST:"num", "list", "fun", "bool", "SUM__IMAGE", "SUM", "SET__TO__LIST", "MAP", "FINITE", "=", "AA->bool", "AA->num", "FINITE AA->bool", "MAP AA->num (SET__TO__LIST AA->bool)", "SET__TO__LIST AA->bool", "SUM (MAP AA->num (SET__TO__LIST AA->bool))", "SUM__IMAGE AA->num AA->bool"
EL__REVERSE:"num", "list", "fun", "bool", "_3C", "_2D", "REVERSE", "PRE", "LENGTH", "EL", "=", "A(A)list", "Anum", "EL (PRE (_2D (LENGTH A(A)list) Anum)) A(A)list", "EL Anum (REVERSE A(A)list)", "LENGTH A(A)list", "PRE (_2D (LENGTH A(A)list) Anum)", "REVERSE A(A)list", "_2D (LENGTH A(A)list) Anum", "_3C Anum (LENGTH A(A)list)"
REVERSE__GENLIST:"num", "list", "fun", "bool", "_2D", "REVERSE", "PRE", "GENLIST", "=", "Anum", "Anum->A", "Anum->A (_2D (PRE Anum) Anum)", "GENLIST (\Anum. Anum->A (_2D (PRE Anum) Anum)) Anum", "GENLIST Anum->A Anum", "PRE Anum", "REVERSE (GENLIST Anum->A Anum)", "_2D (PRE Anum) Anum"
FOLDL__UNION__BIGUNION:"list", "fun", "bool", "UNION", "LIST__TO__SET", "IMAGE", "FOLDL", "BIGUNION", "=", "A(B)list", "AA->bool", "AB", "AB->A->bool", "AB->A->bool AB", "BIGUNION (IMAGE AB->A->bool (LIST__TO__SET A(B)list))", "FOLDL (\AA->bool AB. UNION AA->bool (AB->A->bool AB)) AA->bool A(B)list", "IMAGE AB->A->bool (LIST__TO__SET A(B)list)", "LIST__TO__SET A(B)list", "UNION AA->bool (AB->A->bool AB)", "UNION AA->bool (BIGUNION (IMAGE AB->A->bool (LIST__TO__SET A(B)list)))"
FOLDL__UNION__BIGUNION__paired:"prod", "list", "fun", "bool", "UNION", "UNCURRY", "LIST__TO__SET", "IMAGE", "FOLDL", "BIGUNION", "=", "A(B#C)list", "AA->bool", "AB", "AB->C->A->bool", "AB->C->A->bool AB AC", "AC", "BIGUNION (IMAGE (UNCURRY AB->C->A->bool) (LIST__TO__SET A(B#C)list))", "FOLDL (\AA->bool. UNCURRY (\AB AC. UNION AA->bool (AB->C->A->bool AB AC))) AA->bool A(B#C)list", "IMAGE (UNCURRY AB->C->A->bool) (LIST__TO__SET A(B#C)list)", "LIST__TO__SET A(B#C)list", "UNCURRY (\AB AC. UNION AA->bool (AB->C->A->bool AB AC))", "UNCURRY AB->C->A->bool", "UNION AA->bool (AB->C->A->bool AB AC)", "UNION AA->bool (BIGUNION (IMAGE (UNCURRY AB->C->A->bool) (LIST__TO__SET A(B#C)list)))"
FOLDL__ZIP__SAME:"prod", "list", "fun", "bool", "_2C", "ZIP", "FOLDL", "=", "A(B)list", "AA", "AA->B#B->A", "AA->B#B->A AA (_2C AB AB)", "AB", "FOLDL (\AA AB. AA->B#B->A AA (_2C AB AB)) AA A(B)list", "FOLDL AA->B#B->A AA (ZIP (_2C A(B)list A(B)list))", "ZIP (_2C A(B)list A(B)list)", "_2C A(B)list A(B)list", "_2C AB AB"
MAP__ZIP__SAME:"prod", "list", "fun", "bool", "_2C", "ZIP", "MAP", "=", "A(B)list", "AB", "AB#B->A", "AB#B->A (_2C AB AB)", "MAP (\AB. AB#B->A (_2C AB AB)) A(B)list", "MAP AB#B->A (ZIP (_2C A(B)list A(B)list))", "ZIP (_2C A(B)list A(B)list)", "_2C A(B)list A(B)list", "_2C AB AB"
INFINITE__LIST__UNIV:"list", "fun", "bool", "~", "UNIV", "FINITE", "(:(A)list)", "FINITE (:(A)list)"
LEN__DEF__0:"num", "list", "fun", "bool", "NIL", "LEN", "=", "Anum", "LEN [] Anum", "[]"
LEN__DEF__e1:"num", "list", "fun", "bool", "_2B", "ZERO", "NUMERAL", "LEN", "CONS", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 ZERO", "CONS AA A(A)list", "LEN (CONS AA A(A)list) Anum", "LEN A(A)list (_2B Anum (NUMERAL (BIT1 ZERO)))", "NUMERAL (BIT1 ZERO)", "ZERO", "_2B Anum (NUMERAL (BIT1 ZERO))"
REV__DEF__0:"list", "fun", "bool", "REV", "NIL", "=", "A(A)list", "REV [] A(A)list", "[]"
REV__DEF__e1:"list", "fun", "bool", "REV", "CONS", "=", "A(A)list", "AA", "CONS AA A(A)list", "REV (CONS AA A(A)list) A(A)list", "REV A(A)list (CONS AA A(A)list)"
LEN__LENGTH__LEM:"num", "list", "fun", "bool", "_2B", "LENGTH", "LEN", "=", "A(A)list", "Anum", "LEN A(A)list Anum", "LENGTH A(A)list", "_2B (LENGTH A(A)list) Anum"
REV__REVERSE__LEM:"list", "fun", "bool", "REVERSE", "REV", "APPEND", "=", "A(A)list", "APPEND (REVERSE A(A)list) A(A)list", "REV A(A)list A(A)list", "REVERSE A(A)list"
LENGTH__LEN:"num", "list", "fun", "bool", "LENGTH", "LEN", "=", "0", "0", "A(A)list", "LEN A(A)list 0", "LENGTH A(A)list"
REVERSE__REV:"list", "fun", "bool", "REVERSE", "REV", "NIL", "=", "A(A)list", "REV A(A)list []", "REVERSE A(A)list", "[]"
SUM__ACC__DEF__0:"num", "list", "fun", "bool", "SUM__ACC", "NIL", "=", "Anum", "SUM__ACC [] Anum", "[]"
SUM__ACC__DEF__e1:"num", "list", "fun", "bool", "_2B", "SUM__ACC", "CONS", "=", "A(num)list", "Anum", "CONS Anum A(num)list", "SUM__ACC (CONS Anum A(num)list) Anum", "SUM__ACC A(num)list (_2B Anum Anum)", "_2B Anum Anum"
SUM__ACC__SUM__LEM:"num", "list", "fun", "bool", "_2B", "SUM__ACC", "SUM", "=", "A(num)list", "Anum", "SUM A(num)list", "SUM__ACC A(num)list Anum", "_2B (SUM A(num)list) Anum"
SUM__SUM__ACC:"num", "list", "fun", "bool", "SUM__ACC", "SUM", "=", "0", "0", "A(num)list", "SUM A(num)list", "SUM__ACC A(num)list 0"
EXISTS__LIST:"list", "fun", "bool", "NIL", "CONS", "=", "(?A(A)list. A(A)list->bool A(A)list) <=> A(A)list->bool [] \/ (?AA A(A)list. A(A)list->bool (CONS AA A(A)list))", "A(A)list", "A(A)list->bool (CONS AA A(A)list)", "A(A)list->bool A(A)list", "A(A)list->bool []", "AA", "CONS AA A(A)list", "[]"
FORALL__LIST:"list", "fun", "bool", "NIL", "CONS", "=", "(!A(A)list. A(A)list->bool A(A)list) <=> A(A)list->bool [] /\ (!AA A(A)list. A(A)list->bool (CONS AA A(A)list))", "A(A)list", "A(A)list->bool (CONS AA A(A)list)", "A(A)list->bool A(A)list", "A(A)list->bool []", "AA", "CONS AA A(A)list", "[]"
MEM__SPLIT__APPEND__first:"list", "fun", "bool", "~", "NIL", "LIST__TO__SET", "IN", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (APPEND A(A)list [AA]) A(A)list", "APPEND A(A)list [AA]", "IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list) <=> (?A(A)list A(A)list. A(A)list = APPEND (APPEND A(A)list [AA]) A(A)list /\ ~IN AA (LIST__TO__SET A(A)list))", "LIST__TO__SET A(A)list", "[AA]", "[]"
MEM__SPLIT__APPEND__last:"list", "fun", "bool", "~", "NIL", "LIST__TO__SET", "IN", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (APPEND A(A)list [AA]) A(A)list", "APPEND A(A)list [AA]", "IN AA (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list) <=> (?A(A)list A(A)list. A(A)list = APPEND (APPEND A(A)list [AA]) A(A)list /\ ~IN AA (LIST__TO__SET A(A)list))", "LIST__TO__SET A(A)list", "[AA]", "[]"
APPEND__EQ__APPEND:"list", "fun", "bool", "APPEND", "=", "A(A)list", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = APPEND A(A)list A(A)list <=> (?A(A)list. A(A)list = APPEND A(A)list A(A)list /\ A(A)list = APPEND A(A)list A(A)list) \/ (?A(A)list. A(A)list = APPEND A(A)list A(A)list /\ A(A)list = APPEND A(A)list A(A)list)"
APPEND__EQ__CONS:"list", "fun", "bool", "NIL", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list A(A)list", "APPEND A(A)list A(A)list = CONS AA A(A)list <=> A(A)list = [] /\ A(A)list = CONS AA A(A)list \/ (?A(A)list. A(A)list = CONS AA A(A)list /\ A(A)list = APPEND A(A)list A(A)list)", "CONS AA A(A)list", "[]"
APPEND__EQ__APPEND__MID:"list", "fun", "bool", "NIL", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (APPEND A(A)list [AA]) A(A)list", "APPEND (APPEND A(A)list [AA]) A(A)list = APPEND A(A)list A(A)list <=> (?A(A)list. A(A)list = APPEND (APPEND A(A)list [AA]) A(A)list /\ A(A)list = APPEND A(A)list A(A)list) \/ (?A(A)list. A(A)list = APPEND A(A)list A(A)list /\ A(A)list = APPEND (APPEND A(A)list [AA]) A(A)list)", "APPEND A(A)list A(A)list", "APPEND A(A)list [AA]", "[AA]", "[]"
LUPDATE__def__0:"num", "list", "fun", "bool", "NIL", "LUPDATE", "=", "AA", "Anum", "LUPDATE AA Anum []", "[]"
LUPDATE__def__1:"num", "list", "fun", "bool", "LUPDATE", "CONS", "=", "0", "0", "A(A)list", "AA", "CONS AA A(A)list", "LUPDATE AA 0 (CONS AA A(A)list)"
LUPDATE__def__e2:"num", "list", "fun", "bool", "SUC", "LUPDATE", "CONS", "=", "A(A)list", "AA", "Anum", "CONS AA (LUPDATE AA Anum A(A)list)", "CONS AA A(A)list", "LUPDATE AA (SUC Anum) (CONS AA A(A)list)", "LUPDATE AA Anum A(A)list", "SUC Anum"
LUPDATE__SEM__0:"num", "list", "fun", "bool", "LUPDATE", "LENGTH", "=", "A(A)list", "AA", "Anum", "LENGTH (LUPDATE AA Anum A(A)list)", "LENGTH A(A)list", "LUPDATE AA Anum A(A)list"
LUPDATE__SEM__e1:"num", "list", "fun", "bool", "_3C", "LUPDATE", "LENGTH", "EL", "COND", "=", "A(A)list", "AA", "Anum", "EL Anum (LUPDATE AA Anum A(A)list)", "EL Anum A(A)list", "LENGTH A(A)list", "LUPDATE AA Anum A(A)list", "_3C Anum (LENGTH A(A)list)", "if Anum = Anum then AA else EL Anum A(A)list"
EL__LUPDATE:"num", "list", "fun", "bool", "_3C", "LUPDATE", "LENGTH", "EL", "COND", "=", "A(A)list", "AA", "Anum", "EL Anum (LUPDATE AA Anum A(A)list)", "EL Anum A(A)list", "LENGTH A(A)list", "LUPDATE AA Anum A(A)list", "_3C Anum (LENGTH A(A)list)", "if Anum = Anum /\ _3C Anum (LENGTH A(A)list) then AA else EL Anum A(A)list"
LENGTH__LUPDATE:"num", "list", "fun", "bool", "LUPDATE", "LENGTH", "=", "A(A)list", "AA", "Anum", "LENGTH (LUPDATE AA Anum A(A)list)", "LENGTH A(A)list", "LUPDATE AA Anum A(A)list"
LUPDATE__LENGTH:"num", "list", "fun", "bool", "LUPDATE", "LENGTH", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list (CONS AA A(A)list)", "CONS AA A(A)list", "LENGTH A(A)list", "LUPDATE AA (LENGTH A(A)list) (APPEND A(A)list (CONS AA A(A)list))"
LUPDATE__SNOC:"num", "list", "fun", "bool", "SNOC", "LUPDATE", "LENGTH", "COND", "=", "A(A)list", "AA", "Anum", "LENGTH A(A)list", "LUPDATE AA Anum (SNOC AA A(A)list)", "LUPDATE AA Anum A(A)list", "SNOC AA (LUPDATE AA Anum A(A)list)", "SNOC AA A(A)list", "if Anum = LENGTH A(A)list then SNOC AA A(A)list else SNOC AA (LUPDATE AA Anum A(A)list)"
MEM__LUPDATE__E:"num", "list", "fun", "bool", "LUPDATE", "LIST__TO__SET", "IN", "=", "A(A)list", "AA", "Anum", "IN AA (LIST__TO__SET (LUPDATE AA Anum A(A)list))", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (LUPDATE AA Anum A(A)list)", "LIST__TO__SET A(A)list", "LUPDATE AA Anum A(A)list"
MEM__LUPDATE:"num", "list", "fun", "bool", "~", "_3C", "LUPDATE", "LIST__TO__SET", "LENGTH", "IN", "EL", "=", "A(A)list", "AA", "Anum", "EL Anum A(A)list", "IN AA (LIST__TO__SET (LUPDATE AA Anum A(A)list))", "IN AA (LIST__TO__SET (LUPDATE AA Anum A(A)list)) <=> _3C Anum (LENGTH A(A)list) /\ AA = AA \/ (?Anum. _3C Anum (LENGTH A(A)list) /\ ~(Anum = Anum) /\ EL Anum A(A)list = AA)", "LENGTH A(A)list", "LIST__TO__SET (LUPDATE AA Anum A(A)list)", "LUPDATE AA Anum A(A)list", "_3C Anum (LENGTH A(A)list)"
LUPDATE__compute__0:"num", "list", "fun", "bool", "NIL", "LUPDATE", "=", "AA", "Anum", "LUPDATE AA Anum []", "[]"
LUPDATE__compute__1:"num", "list", "fun", "bool", "LUPDATE", "CONS", "=", "0", "0", "A(A)list", "AA", "CONS AA A(A)list", "LUPDATE AA 0 (CONS AA A(A)list)"
LUPDATE__compute__2:"num", "list", "fun", "bool", "_2D", "ZERO", "NUMERAL", "LUPDATE", "CONS", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT1 ZERO", "CONS AA (LUPDATE AA (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) A(A)list)", "CONS AA A(A)list", "LUPDATE AA (NUMERAL (BIT1 Anum)) (CONS AA A(A)list)", "LUPDATE AA (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) A(A)list", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))"
LUPDATE__compute__e3:"num", "list", "fun", "bool", "NUMERAL", "LUPDATE", "CONS", "BIT2", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT2 Anum", "CONS AA (LUPDATE AA (NUMERAL (BIT1 Anum)) A(A)list)", "CONS AA A(A)list", "LUPDATE AA (NUMERAL (BIT1 Anum)) A(A)list", "LUPDATE AA (NUMERAL (BIT2 Anum)) (CONS AA A(A)list)", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)"
LUPDATE__MAP:"num", "list", "fun", "bool", "MAP", "LUPDATE", "=", "A(B)list", "AB", "AB->A", "AB->A AB", "Anum", "LUPDATE (AB->A AB) Anum (MAP AB->A A(B)list)", "LUPDATE AB Anum A(B)list", "MAP AB->A (LUPDATE AB Anum A(B)list)", "MAP AB->A A(B)list"
EVERYi__DEF__0:"num", "list", "fun", "bool", "T", "NIL", "EVERYi", "=", "Anum->A->bool", "EVERYi Anum->A->bool []", "EVERYi Anum->A->bool [] <=> T", "T", "[]"
EVERYi__DEF__e1:"num", "list", "fun", "bool", "o", "SUC", "EVERYi", "CONS", "=", "0", "0", "A(A)list", "AA", "Anum->A->bool", "Anum->A->bool 0 AA", "CONS AA A(A)list", "EVERYi (o Anum->A->bool SUC) A(A)list", "EVERYi Anum->A->bool (CONS AA A(A)list)", "EVERYi Anum->A->bool (CONS AA A(A)list) <=> Anum->A->bool 0 AA /\ EVERYi (o Anum->A->bool SUC) A(A)list", "SUC", "o Anum->A->bool SUC"
splitAtPki__DEF__0:"num", "list", "fun", "bool", "splitAtPki", "NIL", "=", "A(B)list->(B)list->A", "A(B)list->(B)list->A [] []", "Anum->B->bool", "[]", "splitAtPki Anum->B->bool A(B)list->(B)list->A []"
splitAtPki__DEF__e1:"num", "list", "fun", "bool", "splitAtPki", "o", "SUC", "NIL", "CONS", "COND", "=", "0", "0", "A(B)list", "A(B)list->(B)list->A", "A(B)list->(B)list->A (CONS AB A(B)list) A(B)list", "A(B)list->(B)list->A [] (CONS AB A(B)list)", "AB", "Anum->B->bool", "Anum->B->bool 0 AB", "CONS AB A(B)list", "SUC", "[]", "if Anum->B->bool 0 AB then A(B)list->(B)list->A [] (CONS AB A(B)list) else splitAtPki (o Anum->B->bool SUC) (\A(B)list A(B)list. A(B)list->(B)list->A (CONS AB A(B)list) A(B)list) A(B)list", "o Anum->B->bool SUC", "splitAtPki (o Anum->B->bool SUC) (\A(B)list A(B)list. A(B)list->(B)list->A (CONS AB A(B)list) A(B)list) A(B)list", "splitAtPki Anum->B->bool A(B)list->(B)list->A (CONS AB A(B)list)"
splitAtPki__APPEND:"num", "list", "fun", "bool", "splitAtPki", "o", "_3C", "LENGTH", "HD", "EVERYi", "APPEND", "=", "0", "$not", "$not", "0", "A(B)list", "A(B)list->(B)list->A", "A(B)list->(B)list->A A(B)list A(B)list", "APPEND A(B)list A(B)list", "Anum", "Anum->B->bool", "Anum->B->bool (LENGTH A(B)list) (HD A(B)list)", "Anum->B->bool Anum", "EVERYi (\Anum. o $not (Anum->B->bool Anum)) A(B)list", "HD A(B)list", "LENGTH A(B)list", "_3C 0 (LENGTH A(B)list)", "o $not (Anum->B->bool Anum)", "splitAtPki Anum->B->bool A(B)list->(B)list->A (APPEND A(B)list A(B)list)"
splitAtPki__EQN:"option", "num", "list", "fun", "bool", "splitAtPki", "option__CASE", "_3C", "TAKE", "OLEAST", "NIL", "LENGTH", "EL", "DROP", "=", "A(B)list", "A(B)list->(B)list->A", "A(B)list->(B)list->A (TAKE Anum A(B)list) (DROP Anum A(B)list)", "A(B)list->(B)list->A A(B)list []", "Anum", "Anum->B->bool", "Anum->B->bool Anum (EL Anum A(B)list)", "DROP Anum A(B)list", "EL Anum A(B)list", "LENGTH A(B)list", "OLEAST (\Anum. _3C Anum (LENGTH A(B)list) /\ Anum->B->bool Anum (EL Anum A(B)list))", "TAKE Anum A(B)list", "[]", "_3C Anum (LENGTH A(B)list)", "option__CASE (OLEAST (\Anum. _3C Anum (LENGTH A(B)list) /\ Anum->B->bool Anum (EL Anum A(B)list))) (A(B)list->(B)list->A A(B)list []) (\Anum. A(B)list->(B)list->A (TAKE Anum A(B)list) (DROP Anum A(B)list))", "splitAtPki Anum->B->bool A(B)list->(B)list->A A(B)list"
TAKE__LENGTH__TOO__LONG:"num", "list", "fun", "bool", "_3C_3D", "TAKE", "LENGTH", "=", "A(A)list", "Anum", "LENGTH A(A)list", "TAKE Anum A(A)list", "_3C_3D (LENGTH A(A)list) Anum"
DROP__LENGTH__TOO__LONG:"num", "list", "fun", "bool", "_3C_3D", "NIL", "LENGTH", "DROP", "=", "A(A)list", "Anum", "DROP Anum A(A)list", "LENGTH A(A)list", "[]", "_3C_3D (LENGTH A(A)list) Anum"
TAKE__splitAtPki:"num", "list", "fun", "bool", "splitAtPki", "o", "TAKE", "K", "=", "$equals", "$equals Anum", "A(A)list", "Anum", "K", "TAKE Anum A(A)list", "o K ($equals Anum)", "splitAtPki (o K ($equals Anum)) K A(A)list"
DROP__splitAtPki:"num", "list", "fun", "bool", "splitAtPki", "o", "K", "I", "DROP", "=", "$equals", "$equals Anum", "A(A)list", "Anum", "DROP Anum A(A)list", "I", "K", "K I", "o K ($equals Anum)", "splitAtPki (o K ($equals Anum)) (K I) A(A)list"
LIST__BIND__DEF:"list", "fun", "bool", "MAP", "LIST__BIND", "FLAT", "=", "A(B)list", "AB->(A)list", "FLAT (MAP AB->(A)list A(B)list)", "LIST__BIND A(B)list AB->(A)list", "MAP AB->(A)list A(B)list"
LIST__BIND__THM__0:"list", "fun", "bool", "NIL", "LIST__BIND", "=", "AA->(B)list", "LIST__BIND [] AA->(B)list", "[]"
LIST__BIND__THM__e1:"list", "fun", "bool", "LIST__BIND", "CONS", "APPEND", "=", "A(A)list", "AA", "AA->(B)list", "AA->(B)list AA", "APPEND (AA->(B)list AA) (LIST__BIND A(A)list AA->(B)list)", "CONS AA A(A)list", "LIST__BIND (CONS AA A(A)list) AA->(B)list", "LIST__BIND A(A)list AA->(B)list"
LIST__IGNORE__BIND__DEF:"list", "fun", "bool", "LIST__IGNORE__BIND", "LIST__BIND", "K", "=", "A(A)list", "A(B)list", "K A(B)list", "LIST__BIND A(A)list (K A(B)list)", "LIST__IGNORE__BIND A(A)list A(B)list"
LIST__BIND__ID__0:"list", "fun", "bool", "LIST__BIND", "FLAT", "=", "A((A)list)list", "A(A)list", "FLAT A((A)list)list", "LIST__BIND A((A)list)list (\A(A)list. A(A)list)"
LIST__BIND__ID__e1:"list", "fun", "bool", "LIST__BIND", "I", "FLAT", "=", "A((A)list)list", "FLAT A((A)list)list", "I", "LIST__BIND A((A)list)list I"
LIST__BIND__APPEND:"list", "fun", "bool", "LIST__BIND", "APPEND", "=", "A(A)list", "AA->(B)list", "APPEND (LIST__BIND A(A)list AA->(B)list) (LIST__BIND A(A)list AA->(B)list)", "APPEND A(A)list A(A)list", "LIST__BIND (APPEND A(A)list A(A)list) AA->(B)list", "LIST__BIND A(A)list AA->(B)list"
LIST__BIND__MAP:"list", "fun", "bool", "o", "MAP", "LIST__BIND", "=", "A(B)list", "AB->C", "AC->(A)list", "LIST__BIND (MAP AB->C A(B)list) AC->(A)list", "LIST__BIND A(B)list (o AC->(A)list AB->C)", "MAP AB->C A(B)list", "o AC->(A)list AB->C"
MAP__LIST__BIND:"list", "fun", "bool", "o", "MAP", "LIST__BIND", "=", "A(B)list", "AB->(C)list", "AC->A", "LIST__BIND A(B)list (o (MAP AC->A) AB->(C)list)", "LIST__BIND A(B)list AB->(C)list", "MAP AC->A", "MAP AC->A (LIST__BIND A(B)list AB->(C)list)", "o (MAP AC->A) AB->(C)list"
LIST__BIND__LIST__BIND:"list", "fun", "bool", "o", "LIST__BIND", "C", "=", "A(B)list", "AB->(C)list", "AC->(A)list", "C LIST__BIND AC->(A)list", "LIST__BIND", "LIST__BIND (LIST__BIND A(B)list AB->(C)list) AC->(A)list", "LIST__BIND A(B)list (o (C LIST__BIND AC->(A)list) AB->(C)list)", "LIST__BIND A(B)list AB->(C)list", "o (C LIST__BIND AC->(A)list) AB->(C)list"
SINGL__LIST__APPLY__L:"list", "fun", "bool", "NIL", "LIST__BIND", "CONS", "=", "AB", "AB->(A)list", "AB->(A)list AB", "LIST__BIND [AB] AB->(A)list", "[AB]", "[]"
SINGL__LIST__APPLY__R:"list", "fun", "bool", "NIL", "LIST__BIND", "CONS", "=", "A(A)list", "AA", "LIST__BIND A(A)list (\AA. [AA])", "[AA]", "[]"
LIST__APPLY__DEF:"list", "fun", "bool", "MAP", "LIST__BIND", "LIST__APPLY", "C", "=", "A(B)list", "A(B->A)list", "C MAP A(B)list", "LIST__APPLY A(B->A)list A(B)list", "LIST__BIND A(B->A)list (C MAP A(B)list)", "MAP"
LIST__LIFT2__DEF:"list", "fun", "bool", "MAP", "LIST__LIFT2", "LIST__APPLY", "=", "A(B)list", "A(C)list", "AB->C->A", "LIST__APPLY (MAP AB->C->A A(B)list) A(C)list", "LIST__LIFT2 AB->C->A A(B)list A(C)list", "MAP AB->C->A A(B)list"
SINGL__APPLY__MAP:"list", "fun", "bool", "NIL", "MAP", "LIST__APPLY", "CONS", "=", "A(B)list", "AB->A", "LIST__APPLY [AB->A] A(B)list", "MAP AB->A A(B)list", "[AB->A]", "[]"
SINGL__SINGL__APPLY:"list", "fun", "bool", "NIL", "LIST__APPLY", "CONS", "=", "AA", "AA->B", "AA->B AA", "LIST__APPLY [AA->B] [AA]", "[AA->B AA]", "[AA->B]", "[AA]", "[]"
SINGL__APPLY__PERMUTE:"list", "fun", "bool", "NIL", "LIST__APPLY", "CONS", "=", "A(A->B)list", "AA", "AA->B AA", "LIST__APPLY A(A->B)list [AA]", "LIST__APPLY [\AA->B. AA->B AA] A(A->B)list", "[AA]", "[\AA->B. AA->B AA]", "[]"
MAP__FLAT:"list", "fun", "bool", "MAP", "FLAT", "=", "A((B)list)list", "AB->A", "FLAT (MAP (MAP AB->A) A((B)list)list)", "FLAT A((B)list)list", "MAP (MAP AB->A) A((B)list)list", "MAP AB->A", "MAP AB->A (FLAT A((B)list)list)"
LIST__APPLY__o:"list", "fun", "bool", "o", "NIL", "LIST__APPLY", "CONS", "=", "A(B->A)list", "A(C)list", "A(C->B)list", "LIST__APPLY (LIST__APPLY (LIST__APPLY [o] A(B->A)list) A(C->B)list) A(C)list", "LIST__APPLY (LIST__APPLY [o] A(B->A)list) A(C->B)list", "LIST__APPLY A(B->A)list (LIST__APPLY A(C->B)list A(C)list)", "LIST__APPLY A(C->B)list A(C)list", "LIST__APPLY [o] A(B->A)list", "[]", "[o]", "o"
LLEX__DEF__0:"list", "fun", "bool", "~", "NIL", "LLEX", "=", "A(A)list", "AA->A->bool", "LLEX AA->A->bool [] A(A)list", "LLEX AA->A->bool [] A(A)list <=> ~(A(A)list = [])", "[]"
LLEX__DEF__e1:"list", "fun", "bool", "list__CASE", "T", "LLEX", "F", "CONS", "COND", "=", "A(A)list", "AA", "AA->A->bool", "AA->A->bool AA AA", "CONS AA A(A)list", "F", "LLEX AA->A->bool (CONS AA A(A)list) A(A)list", "LLEX AA->A->bool (CONS AA A(A)list) A(A)list <=> list__CASE A(A)list F (\AA A(A)list. if AA->A->bool AA AA then T else if AA = AA then LLEX AA->A->bool A(A)list A(A)list else F)", "LLEX AA->A->bool A(A)list A(A)list", "T", "if AA = AA then LLEX AA->A->bool A(A)list A(A)list else F", "if AA->A->bool AA AA then T else if AA = AA then LLEX AA->A->bool A(A)list A(A)list else F", "list__CASE A(A)list F (\AA A(A)list. if AA->A->bool AA AA then T else if AA = AA then LLEX AA->A->bool A(A)list A(A)list else F)"
LLEX__THM__tLL:"list", "fun", "bool", "~", "NIL", "LLEX", "AA->A->bool", "LLEX AA->A->bool [] []", "[]"
LLEX__THM__tRL:"list", "fun", "bool", "~", "NIL", "LLEX", "CONS", "A(A)list", "AA", "AA->A->bool", "CONS AA A(A)list", "LLEX AA->A->bool (CONS AA A(A)list) []", "[]"
LLEX__THM__1:"list", "fun", "bool", "NIL", "LLEX", "CONS", "A(A)list", "AA", "AA->A->bool", "CONS AA A(A)list", "LLEX AA->A->bool [] (CONS AA A(A)list)", "[]"
LLEX__THM__e2:"list", "fun", "bool", "LLEX", "CONS", "=", "A(A)list", "AA", "AA->A->bool", "AA->A->bool AA AA", "CONS AA A(A)list", "LLEX AA->A->bool (CONS AA A(A)list) (CONS AA A(A)list)", "LLEX AA->A->bool (CONS AA A(A)list) (CONS AA A(A)list) <=> AA->A->bool AA AA \/ AA = AA /\ LLEX AA->A->bool A(A)list A(A)list", "LLEX AA->A->bool A(A)list A(A)list"
LLEX__NIL2:"list", "fun", "bool", "~", "NIL", "LLEX", "A(A)list", "AA->A->bool", "LLEX AA->A->bool A(A)list []", "[]"
LLEX__transitive:"list", "fun", "bool", "transitive", "LLEX", "AA->A->bool", "LLEX AA->A->bool", "transitive (LLEX AA->A->bool)", "transitive AA->A->bool"
LLEX__total:"list", "fun", "bool", "total", "RC", "LLEX", "AA->A->bool", "LLEX AA->A->bool", "RC (LLEX AA->A->bool)", "RC AA->A->bool", "total (RC (LLEX AA->A->bool))", "total (RC AA->A->bool)"
LLEX__not__WF:"list", "fun", "bool", "~", "WF", "LLEX", "AA", "AA->A->bool", "AA->A->bool AA AA", "LLEX AA->A->bool", "WF (LLEX AA->A->bool)"
nub__def__0:"list", "fun", "bool", "nub", "NIL", "=", "[]", "nub []"
nub__def__e1:"list", "fun", "bool", "nub", "LIST__TO__SET", "IN", "CONS", "COND", "=", "A(A)list", "AA", "CONS AA (nub A(A)list)", "CONS AA A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "if IN AA (LIST__TO__SET A(A)list) then nub A(A)list else CONS AA (nub A(A)list)", "nub (CONS AA A(A)list)", "nub A(A)list"
nub__set:"list", "fun", "bool", "nub", "LIST__TO__SET", "=", "A(A)list", "LIST__TO__SET (nub A(A)list)", "LIST__TO__SET A(A)list", "nub A(A)list"
all__distinct__nub:"list", "fun", "bool", "nub", "ALL__DISTINCT", "A(A)list", "ALL__DISTINCT (nub A(A)list)", "nub A(A)list"
nub__append:"list", "fun", "bool", "~", "nub", "LIST__TO__SET", "IN", "FILTER", "APPEND", "=", "A(A)list", "AA", "APPEND (nub (FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list)) (nub A(A)list)", "APPEND A(A)list A(A)list", "FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "nub (APPEND A(A)list A(A)list)", "nub (FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list)", "nub A(A)list"
list__to__set__diff:"list", "fun", "bool", "~", "LIST__TO__SET", "IN", "FILTER", "DIFF", "=", "A(A)list", "AA", "DIFF (LIST__TO__SET A(A)list) (LIST__TO__SET A(A)list)", "FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list)", "LIST__TO__SET A(A)list"
length__nub__append:"num", "list", "fun", "bool", "~", "nub", "_2B", "LIST__TO__SET", "LENGTH", "IN", "FILTER", "APPEND", "=", "A(A)list", "AA", "APPEND A(A)list A(A)list", "FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LENGTH (nub (APPEND A(A)list A(A)list))", "LENGTH (nub (FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list))", "LENGTH (nub A(A)list)", "LIST__TO__SET A(A)list", "_2B (LENGTH (nub A(A)list)) (LENGTH (nub (FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list)))", "nub (APPEND A(A)list A(A)list)", "nub (FILTER (\AA. ~IN AA (LIST__TO__SET A(A)list)) A(A)list)", "nub A(A)list"
ALL__DISTINCT__DROP:"num", "list", "fun", "bool", "DROP", "ALL__DISTINCT", "A(A)list", "ALL__DISTINCT (DROP Anum A(A)list)", "ALL__DISTINCT A(A)list", "Anum", "DROP Anum A(A)list"
EXISTS__LIST__EQ__MAP:"list", "fun", "bool", "MAP", "EVERY", "=", "A(A)list", "A(B)list", "AA", "AB", "AB->A", "AB->A AB", "EVERY (\AA. ?AB. AA = AB->A AB) A(A)list", "MAP AB->A A(B)list"
LIST__TO__SET__FLAT:"list", "fun", "bool", "MAP", "LIST__TO__SET", "FLAT", "BIGUNION", "=", "A((A)list)list", "BIGUNION (LIST__TO__SET (MAP LIST__TO__SET A((A)list)list))", "FLAT A((A)list)list", "LIST__TO__SET", "LIST__TO__SET (FLAT A((A)list)list)", "LIST__TO__SET (MAP LIST__TO__SET A((A)list)list)", "MAP LIST__TO__SET A((A)list)list"
MEM__APPEND__lemma:"list", "fun", "bool", "~", "NIL", "LIST__TO__SET", "IN", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (APPEND A(A)list [AA]) A(A)list", "APPEND A(A)list [AA]", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "[AA]", "[]"
EVERY2__REVERSE:"list", "fun", "bool", "REVERSE", "LIST__REL", "A(A)list", "A(B)list", "AA->B->bool", "LIST__REL AA->B->bool (REVERSE A(A)list) (REVERSE A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list", "REVERSE A(A)list", "REVERSE A(B)list"
SUM__MAP__PLUS:"num", "list", "fun", "bool", "_2B", "SUM", "MAP", "=", "A(A)list", "AA", "AA->num", "AA->num AA", "MAP (\AA. _2B (AA->num AA) (AA->num AA)) A(A)list", "MAP AA->num A(A)list", "SUM (MAP (\AA. _2B (AA->num AA) (AA->num AA)) A(A)list)", "SUM (MAP AA->num A(A)list)", "_2B (AA->num AA) (AA->num AA)", "_2B (SUM (MAP AA->num A(A)list)) (SUM (MAP AA->num A(A)list))"
TAKE__LENGTH__ID__rwt:"num", "list", "fun", "bool", "TAKE", "LENGTH", "=", "A(A)list", "Anum", "LENGTH A(A)list", "TAKE Anum A(A)list"
ZIP__DROP:"prod", "num", "list", "fun", "bool", "_3C_3D", "_2C", "ZIP", "LENGTH", "DROP", "=", "A(A)list", "A(B)list", "Anum", "DROP Anum (ZIP (_2C A(A)list A(B)list))", "DROP Anum A(A)list", "DROP Anum A(B)list", "LENGTH A(A)list", "LENGTH A(B)list", "ZIP (_2C (DROP Anum A(A)list) (DROP Anum A(B)list))", "ZIP (_2C A(A)list A(B)list)", "_2C (DROP Anum A(A)list) (DROP Anum A(B)list)", "_2C A(A)list A(B)list", "_3C_3D Anum (LENGTH A(A)list)"
GENLIST__EL:"num", "list", "fun", "bool", "_3C", "LENGTH", "GENLIST", "EL", "=", "A(A)list", "Anum", "Anum->A", "Anum->A Anum", "EL Anum A(A)list", "GENLIST Anum->A Anum", "LENGTH A(A)list", "_3C Anum Anum"
EVERY2__trans:"list", "fun", "bool", "LIST__REL", "A(A)list", "AA", "AA->A->bool", "AA->A->bool AA AA", "LIST__REL AA->A->bool A(A)list A(A)list"
EVERY2__sym:"list", "fun", "bool", "LIST__REL", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "AB->A->bool", "AB->A->bool AB AA", "LIST__REL AA->B->bool A(A)list A(B)list", "LIST__REL AB->A->bool A(B)list A(A)list"
EVERY2__LUPDATE__same:"num", "list", "fun", "bool", "LUPDATE", "LIST__REL", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "Anum", "LIST__REL AA->B->bool (LUPDATE AA Anum A(A)list) (LUPDATE AB Anum A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list", "LUPDATE AA Anum A(A)list", "LUPDATE AB Anum A(B)list"
EVERY2__refl:"list", "fun", "bool", "LIST__TO__SET", "LIST__REL", "IN", "A(A)list", "AA", "AA->A->bool", "AA->A->bool AA AA", "IN AA (LIST__TO__SET A(A)list)", "LIST__REL AA->A->bool A(A)list A(A)list", "LIST__TO__SET A(A)list"
EVERY2__THM__0:"list", "fun", "bool", "NIL", "LIST__REL", "=", "A(B)list", "AA->B->bool", "LIST__REL AA->B->bool [] A(B)list", "LIST__REL AA->B->bool [] A(B)list <=> A(B)list = []", "[]"
EVERY2__THM__1:"list", "fun", "bool", "LIST__REL", "CONS", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool (CONS AA A(A)list) A(B)list", "LIST__REL AA->B->bool (CONS AA A(A)list) A(B)list <=> (?AB A(B)list. A(B)list = CONS AB A(B)list /\ AA->B->bool AA AB /\ LIST__REL AA->B->bool A(A)list A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list"
EVERY2__THM__2:"list", "fun", "bool", "NIL", "LIST__REL", "=", "A(B)list", "AB->A->bool", "LIST__REL AB->A->bool A(B)list []", "LIST__REL AB->A->bool A(B)list [] <=> A(B)list = []", "[]"
EVERY2__THM__e3:"list", "fun", "bool", "LIST__REL", "CONS", "=", "A(A)list", "A(B)list", "AA", "AA->B->bool", "AA->B->bool AA AB", "AB", "CONS AA A(A)list", "CONS AB A(B)list", "LIST__REL AA->B->bool A(A)list (CONS AB A(B)list)", "LIST__REL AA->B->bool A(A)list (CONS AB A(B)list) <=> (?AA A(A)list. A(A)list = CONS AA A(A)list /\ AA->B->bool AA AB /\ LIST__REL AA->B->bool A(A)list A(B)list)", "LIST__REL AA->B->bool A(A)list A(B)list"
LIST__REL__trans:"num", "list", "fun", "bool", "_3C", "LIST__REL", "LENGTH", "EL", "A(A)list", "AA->A->bool", "AA->A->bool (EL Anum A(A)list) (EL Anum A(A)list)", "Anum", "EL Anum A(A)list", "LENGTH A(A)list", "LIST__REL AA->A->bool A(A)list A(A)list", "_3C Anum (LENGTH A(A)list)"
SWAP__REVERSE:"list", "fun", "bool", "REVERSE", "=", "A(A)list", "A(A)list = REVERSE A(A)list <=> A(A)list = REVERSE A(A)list", "REVERSE A(A)list"
SWAP__REVERSE__SYM:"list", "fun", "bool", "REVERSE", "=", "A(A)list", "REVERSE A(A)list", "REVERSE A(A)list = A(A)list <=> A(A)list = REVERSE A(A)list"
BIGUNION__IMAGE__set__SUBSET:"list", "fun", "bool", "SUBSET", "LIST__TO__SET", "IN", "IMAGE", "BIGUNION", "=", "A(A)list", "AA", "AA->B->bool", "AA->B->bool AA", "AB->bool", "BIGUNION (IMAGE AA->B->bool (LIST__TO__SET A(A)list))", "IMAGE AA->B->bool (LIST__TO__SET A(A)list)", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list", "SUBSET (AA->B->bool AA) AB->bool", "SUBSET (BIGUNION (IMAGE AA->B->bool (LIST__TO__SET A(A)list))) AB->bool", "SUBSET (BIGUNION (IMAGE AA->B->bool (LIST__TO__SET A(A)list))) AB->bool <=> (!AA. IN AA (LIST__TO__SET A(A)list) ==> SUBSET (AA->B->bool AA) AB->bool)"
IMAGE__EL__count__LENGTH:"num", "list", "fun", "bool", "count", "LIST__TO__SET", "LENGTH", "IMAGE", "EL", "=", "A(B)list", "AB->A", "AB->A (EL Anum A(B)list)", "Anum", "EL Anum A(B)list", "IMAGE (\Anum. AB->A (EL Anum A(B)list)) (count (LENGTH A(B)list))", "IMAGE AB->A (LIST__TO__SET A(B)list)", "LENGTH A(B)list", "LIST__TO__SET A(B)list", "count (LENGTH A(B)list)"
GENLIST__EL__MAP:"num", "list", "fun", "bool", "MAP", "LENGTH", "GENLIST", "EL", "=", "A(B)list", "AB->A", "AB->A (EL Anum A(B)list)", "Anum", "EL Anum A(B)list", "GENLIST (\Anum. AB->A (EL Anum A(B)list)) (LENGTH A(B)list)", "LENGTH A(B)list", "MAP AB->A A(B)list"
LENGTH__FILTER__LEQ__MONO:"num", "list", "fun", "bool", "_3C_3D", "LENGTH", "FILTER", "A(A)list", "AA", "AA->bool", "AA->bool AA", "FILTER AA->bool A(A)list", "LENGTH (FILTER AA->bool A(A)list)", "_3C_3D (LENGTH (FILTER AA->bool A(A)list)) (LENGTH (FILTER AA->bool A(A)list))"
LIST__EQ__MAP__PAIR:"prod", "list", "fun", "bool", "SND", "MAP", "FST", "=", "A(A#B)list", "FST", "MAP FST A(A#B)list", "MAP SND A(A#B)list", "SND"
TAKE__SUM:"num", "list", "fun", "bool", "_3C_3D", "_2B", "TAKE", "LENGTH", "DROP", "APPEND", "=", "A(A)list", "APPEND (TAKE Anum A(A)list) (TAKE Anum (DROP Anum A(A)list))", "Anum", "DROP Anum A(A)list", "LENGTH A(A)list", "TAKE (_2B Anum Anum) A(A)list", "TAKE Anum (DROP Anum A(A)list)", "TAKE Anum A(A)list", "_2B Anum Anum", "_3C_3D (_2B Anum Anum) (LENGTH A(A)list)"
ALL__DISTINCT__FILTER__EL__IMP:"num", "list", "fun", "bool", "_3C", "LENGTH", "FILTER", "EL", "ALL__DISTINCT", "=", "A(A)list", "AA->bool", "AA->bool (EL Anum A(A)list)", "ALL__DISTINCT (FILTER AA->bool A(A)list)", "Anum", "EL Anum A(A)list", "FILTER AA->bool A(A)list", "LENGTH A(A)list", "_3C Anum (LENGTH A(A)list)"
FLAT__EQ__NIL:"list", "fun", "bool", "NIL", "FLAT", "EVERY", "=", "$equals", "$equals []", "A((A)list)list", "EVERY ($equals []) A((A)list)list", "FLAT A((A)list)list", "FLAT A((A)list)list = [] <=> EVERY ($equals []) A((A)list)list", "[]"
ALL__DISTINCT__MAP__INJ:"list", "fun", "bool", "MAP", "LIST__TO__SET", "IN", "ALL__DISTINCT", "=", "A(B)list", "AB", "AB->A", "AB->A AB", "ALL__DISTINCT (MAP AB->A A(B)list)", "ALL__DISTINCT A(B)list", "IN AB (LIST__TO__SET A(B)list)", "LIST__TO__SET A(B)list", "MAP AB->A A(B)list"
LENGTH__o__REVERSE__0:"num", "list", "fun", "bool", "o", "REVERSE", "LENGTH", "=", "LENGTH", "REVERSE", "o LENGTH REVERSE"
LENGTH__o__REVERSE__e1:"num", "list", "fun", "bool", "o", "REVERSE", "LENGTH", "=", "AA->(B)list", "LENGTH", "REVERSE", "o LENGTH (o REVERSE AA->(B)list)", "o LENGTH AA->(B)list", "o REVERSE AA->(B)list"
REVERSE__o__REVERSE:"list", "fun", "bool", "o", "REVERSE", "=", "AA->(B)list", "REVERSE", "o REVERSE (o REVERSE AA->(B)list)", "o REVERSE AA->(B)list"
GENLIST__PLUS__APPEND:"num", "list", "fun", "bool", "_2B", "GENLIST", "APPEND", "=", "APPEND (GENLIST (_2B Anum) Anum) (GENLIST (_2B (_2B Anum Anum)) Anum)", "Anum", "GENLIST (_2B (_2B Anum Anum)) Anum", "GENLIST (_2B Anum) (_2B Anum Anum)", "GENLIST (_2B Anum) Anum", "_2B (_2B Anum Anum)", "_2B Anum", "_2B Anum Anum"
LIST__TO__SET__GENLIST:"num", "list", "fun", "bool", "count", "LIST__TO__SET", "IMAGE", "GENLIST", "=", "Anum", "Anum->A", "GENLIST Anum->A Anum", "IMAGE Anum->A (count Anum)", "LIST__TO__SET (GENLIST Anum->A Anum)", "count Anum"
MEM__ZIP__MEM__MAP:"prod", "num", "list", "fun", "bool", "ZIP", "SND", "LIST__TO__SET", "LENGTH", "IN", "FST", "=", "A(A)list#(B)list", "AA#B", "FST A(A)list#(B)list", "FST AA#B", "IN (FST AA#B) (LIST__TO__SET (FST A(A)list#(B)list))", "IN (SND AA#B) (LIST__TO__SET (SND A(A)list#(B)list))", "IN AA#B (LIST__TO__SET (ZIP A(A)list#(B)list))", "LENGTH (FST A(A)list#(B)list)", "LENGTH (SND A(A)list#(B)list)", "LIST__TO__SET (FST A(A)list#(B)list)", "LIST__TO__SET (SND A(A)list#(B)list)", "LIST__TO__SET (ZIP A(A)list#(B)list)", "SND A(A)list#(B)list", "SND AA#B", "ZIP A(A)list#(B)list"
DISJOINT__GENLIST__PLUS:"num", "list", "fun", "bool", "_2B", "LIST__TO__SET", "GENLIST", "DISJOINT", "Anum", "Anum->bool", "DISJOINT Anum->bool (LIST__TO__SET (GENLIST (_2B (_2B Anum Anum)) Anum))", "DISJOINT Anum->bool (LIST__TO__SET (GENLIST (_2B Anum) (_2B Anum Anum)))", "DISJOINT Anum->bool (LIST__TO__SET (GENLIST (_2B Anum) Anum))", "GENLIST (_2B (_2B Anum Anum)) Anum", "GENLIST (_2B Anum) (_2B Anum Anum)", "GENLIST (_2B Anum) Anum", "LIST__TO__SET (GENLIST (_2B (_2B Anum Anum)) Anum)", "LIST__TO__SET (GENLIST (_2B Anum) (_2B Anum Anum))", "LIST__TO__SET (GENLIST (_2B Anum) Anum)", "_2B (_2B Anum Anum)", "_2B Anum", "_2B Anum Anum"
EVERY2__MAP__0:"list", "fun", "bool", "MAP", "LIST__REL", "=", "A(B)list", "A(C)list", "AA->C->bool", "AA->C->bool (AB->A AB) AC", "AB", "AB->A", "AB->A AB", "AC", "LIST__REL (\AB AC. AA->C->bool (AB->A AB) AC) A(B)list A(C)list", "LIST__REL AA->C->bool (MAP AB->A A(B)list) A(C)list", "LIST__REL AA->C->bool (MAP AB->A A(B)list) A(C)list <=> LIST__REL (\AB AC. AA->C->bool (AB->A AB) AC) A(B)list A(C)list", "MAP AB->A A(B)list"
EVERY2__MAP__e1:"list", "fun", "bool", "MAP", "LIST__REL", "=", "A(B)list", "A(C)list", "AB", "AB->A->bool", "AB->A->bool AB (AC->A AC)", "AC", "AC->A", "AC->A AC", "LIST__REL (\AB AC. AB->A->bool AB (AC->A AC)) A(B)list A(C)list", "LIST__REL AB->A->bool A(B)list (MAP AC->A A(C)list)", "LIST__REL AB->A->bool A(B)list (MAP AC->A A(C)list) <=> LIST__REL (\AB AC. AB->A->bool AB (AC->A AC)) A(B)list A(C)list", "MAP AC->A A(C)list"
exists__list__GENLIST:"num", "list", "fun", "bool", "GENLIST", "=", "(?A(A)list. A(A)list->bool A(A)list) <=> (?Anum Anum->A. A(A)list->bool (GENLIST Anum->A Anum))", "A(A)list", "A(A)list->bool (GENLIST Anum->A Anum)", "A(A)list->bool A(A)list", "Anum", "Anum->A", "GENLIST Anum->A Anum"
EVERY__MEM__MONO:"list", "fun", "bool", "LIST__TO__SET", "IN", "EVERY", "A(A)list", "AA", "AA->bool", "AA->bool AA", "EVERY AA->bool A(A)list", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET A(A)list"
EVERY2__MEM__MONO:"prod", "list", "fun", "bool", "_2C", "ZIP", "UNCURRY", "LIST__TO__SET", "LIST__REL", "IN", "A(A)list", "A(B)list", "AA#B", "AA->B->bool", "IN AA#B (LIST__TO__SET (ZIP (_2C A(A)list A(B)list)))", "LIST__REL AA->B->bool A(A)list A(B)list", "LIST__TO__SET (ZIP (_2C A(A)list A(B)list))", "UNCURRY AA->B->bool AA#B", "ZIP (_2C A(A)list A(B)list)", "_2C A(A)list A(B)list"
mem__exists__set:"prod", "list", "fun", "bool", "_2C", "LIST__TO__SET", "IN", "FST", "=", "A(A#B)list", "AA", "AA#B", "AB", "FST AA#B", "IN (_2C AA AB) (LIST__TO__SET A(A#B)list)", "IN AA#B (LIST__TO__SET A(A#B)list)", "LIST__TO__SET A(A#B)list", "_2C AA AB"
every__zip__snd:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "SND", "LENGTH", "EVERY", "=", "A(A)list", "A(B)list", "AA#B", "AB->bool", "AB->bool (SND AA#B)", "EVERY (\AA#B. AB->bool (SND AA#B)) (ZIP (_2C A(A)list A(B)list))", "EVERY (\AA#B. AB->bool (SND AA#B)) (ZIP (_2C A(A)list A(B)list)) <=> EVERY AB->bool A(B)list", "EVERY AB->bool A(B)list", "LENGTH A(A)list", "LENGTH A(B)list", "SND AA#B", "ZIP (_2C A(A)list A(B)list)", "_2C A(A)list A(B)list"
every__zip__fst:"prod", "num", "list", "fun", "bool", "_2C", "ZIP", "LENGTH", "FST", "EVERY", "=", "A(A)list", "A(B)list", "AB#A", "AB->bool", "AB->bool (FST AB#A)", "EVERY (\AB#A. AB->bool (FST AB#A)) (ZIP (_2C A(B)list A(A)list))", "EVERY (\AB#A. AB->bool (FST AB#A)) (ZIP (_2C A(B)list A(A)list)) <=> EVERY AB->bool A(B)list", "EVERY AB->bool A(B)list", "FST AB#A", "LENGTH A(A)list", "LENGTH A(B)list", "ZIP (_2C A(B)list A(A)list)", "_2C A(B)list A(A)list"
el__append3:"num", "list", "fun", "bool", "NIL", "LENGTH", "EL", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (APPEND A(A)list [AA]) A(A)list", "APPEND A(A)list [AA]", "EL (LENGTH A(A)list) (APPEND (APPEND A(A)list [AA]) A(A)list)", "LENGTH A(A)list", "[AA]", "[]"
lupdate__append:"num", "list", "fun", "bool", "_3C", "LUPDATE", "LENGTH", "APPEND", "=", "A(A)list", "AA", "APPEND (LUPDATE AA Anum A(A)list) A(A)list", "APPEND A(A)list A(A)list", "Anum", "LENGTH A(A)list", "LUPDATE AA Anum (APPEND A(A)list A(A)list)", "LUPDATE AA Anum A(A)list", "_3C Anum (LENGTH A(A)list)"
lupdate__append2:"num", "list", "fun", "bool", "NIL", "LUPDATE", "LENGTH", "CONS", "APPEND", "=", "A(A)list", "AA", "APPEND (APPEND A(A)list [AA]) A(A)list", "APPEND A(A)list [AA]", "LENGTH A(A)list", "LUPDATE AA (LENGTH A(A)list) (APPEND (APPEND A(A)list [AA]) A(A)list)", "[AA]", "[]"
LAST__REVERSE:"list", "fun", "bool", "~", "REVERSE", "NIL", "LAST", "HD", "=", "A(A)list", "HD A(A)list", "LAST (REVERSE A(A)list)", "REVERSE A(A)list", "[]"
dropWhile__def__0:"list", "fun", "bool", "dropWhile", "NIL", "=", "AA->bool", "[]", "dropWhile AA->bool []"
dropWhile__def__e1:"list", "fun", "bool", "dropWhile", "CONS", "COND", "=", "A(A)list", "AA", "AA->bool", "AA->bool AA", "CONS AA A(A)list", "dropWhile AA->bool (CONS AA A(A)list)", "dropWhile AA->bool A(A)list", "if AA->bool AA then dropWhile AA->bool A(A)list else CONS AA A(A)list"
dropWhile__splitAtPki:"num", "list", "fun", "bool", "splitAtPki", "o", "dropWhile", "K", "I", "C", "=", "$not", "$not", "AA->bool", "C (o K (o $not AA->bool))", "I", "K", "K I", "dropWhile AA->bool", "o $not AA->bool", "o K (o $not AA->bool)", "splitAtPki (C (o K (o $not AA->bool))) (K I)"
dropWhile__eq__nil:"list", "fun", "bool", "dropWhile", "NIL", "EVERY", "=", "A(A)list", "AA->bool", "EVERY AA->bool A(A)list", "[]", "dropWhile AA->bool A(A)list", "dropWhile AA->bool A(A)list = [] <=> EVERY AA->bool A(A)list"
MEM__dropWhile__IMP:"list", "fun", "bool", "dropWhile", "LIST__TO__SET", "IN", "A(A)list", "AA", "AA->bool", "IN AA (LIST__TO__SET (dropWhile AA->bool A(A)list))", "IN AA (LIST__TO__SET A(A)list)", "LIST__TO__SET (dropWhile AA->bool A(A)list)", "LIST__TO__SET A(A)list", "dropWhile AA->bool A(A)list"
HD__dropWhile:"list", "fun", "bool", "~", "o", "dropWhile", "HD", "EXISTS", "$not", "$not", "A(A)list", "AA->bool", "AA->bool (HD (dropWhile AA->bool A(A)list))", "EXISTS (o $not AA->bool) A(A)list", "HD (dropWhile AA->bool A(A)list)", "dropWhile AA->bool A(A)list", "o $not AA->bool"
LENGTH__dropWhile__LESS__EQ:"num", "list", "fun", "bool", "dropWhile", "_3C_3D", "LENGTH", "A(A)list", "AA->bool", "LENGTH (dropWhile AA->bool A(A)list)", "LENGTH A(A)list", "_3C_3D (LENGTH (dropWhile AA->bool A(A)list)) (LENGTH A(A)list)", "dropWhile AA->bool A(A)list"
dropWhile__APPEND__EVERY:"list", "fun", "bool", "dropWhile", "EVERY", "APPEND", "=", "A(A)list", "AA->bool", "APPEND A(A)list A(A)list", "EVERY AA->bool A(A)list", "dropWhile AA->bool (APPEND A(A)list A(A)list)", "dropWhile AA->bool A(A)list"
dropWhile__APPEND__EXISTS:"list", "fun", "bool", "o", "dropWhile", "EXISTS", "APPEND", "=", "$not", "$not", "A(A)list", "AA->bool", "APPEND (dropWhile AA->bool A(A)list) A(A)list", "APPEND A(A)list A(A)list", "EXISTS (o $not AA->bool) A(A)list", "dropWhile AA->bool (APPEND A(A)list A(A)list)", "dropWhile AA->bool A(A)list", "o $not AA->bool"
EL__LENGTH__dropWhile__REVERSE:"num", "list", "fun", "bool", "dropWhile", "_3C_3D", "_3C", "REVERSE", "LENGTH", "EL", "A(A)list", "AA->bool", "AA->bool (EL Anum A(A)list)", "Anum", "EL Anum A(A)list", "LENGTH (dropWhile AA->bool (REVERSE A(A)list))", "LENGTH A(A)list", "REVERSE A(A)list", "_3C Anum (LENGTH A(A)list)", "_3C_3D (LENGTH (dropWhile AA->bool (REVERSE A(A)list))) Anum", "dropWhile AA->bool (REVERSE A(A)list)"
LAST__compute__0:"list", "fun", "bool", "NIL", "LAST", "CONS", "=", "AA", "LAST [AA]", "[AA]", "[]"
LAST__compute__e1:"list", "fun", "bool", "LAST", "CONS", "=", "A(A)list", "AA", "CONS AA (CONS AA A(A)list)", "CONS AA A(A)list", "LAST (CONS AA (CONS AA A(A)list))", "LAST (CONS AA A(A)list)"
TAKE__compute__0:"num", "list", "fun", "bool", "TAKE", "NIL", "=", "0", "0", "A(A)list", "TAKE 0 A(A)list", "[]"
TAKE__compute__1:"num", "list", "fun", "bool", "TAKE", "NUMERAL", "NIL", "BIT1", "=", "Anum", "BIT1 Anum", "NUMERAL (BIT1 Anum)", "TAKE (NUMERAL (BIT1 Anum)) []", "[]"
TAKE__compute__2:"num", "list", "fun", "bool", "TAKE", "NUMERAL", "NIL", "BIT2", "=", "Anum", "BIT2 Anum", "NUMERAL (BIT2 Anum)", "TAKE (NUMERAL (BIT2 Anum)) []", "[]"
TAKE__compute__3:"num", "list", "fun", "bool", "_2D", "ZERO", "TAKE", "NUMERAL", "CONS", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT1 ZERO", "CONS AA (TAKE (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) A(A)list)", "CONS AA A(A)list", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "TAKE (NUMERAL (BIT1 Anum)) (CONS AA A(A)list)", "TAKE (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) A(A)list", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))"
TAKE__compute__e4:"num", "list", "fun", "bool", "TAKE", "NUMERAL", "CONS", "BIT2", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT2 Anum", "CONS AA (TAKE (NUMERAL (BIT1 Anum)) A(A)list)", "CONS AA A(A)list", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)", "TAKE (NUMERAL (BIT1 Anum)) A(A)list", "TAKE (NUMERAL (BIT2 Anum)) (CONS AA A(A)list)"
DROP__compute__0:"num", "list", "fun", "bool", "DROP", "=", "0", "0", "A(A)list", "DROP 0 A(A)list"
DROP__compute__1:"num", "list", "fun", "bool", "NUMERAL", "NIL", "DROP", "BIT1", "=", "Anum", "BIT1 Anum", "DROP (NUMERAL (BIT1 Anum)) []", "NUMERAL (BIT1 Anum)", "[]"
DROP__compute__2:"num", "list", "fun", "bool", "NUMERAL", "NIL", "DROP", "BIT2", "=", "Anum", "BIT2 Anum", "DROP (NUMERAL (BIT2 Anum)) []", "NUMERAL (BIT2 Anum)", "[]"
DROP__compute__3:"num", "list", "fun", "bool", "_2D", "ZERO", "NUMERAL", "DROP", "CONS", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT1 ZERO", "CONS AA A(A)list", "DROP (NUMERAL (BIT1 Anum)) (CONS AA A(A)list)", "DROP (_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))) A(A)list", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT1 ZERO)", "ZERO", "_2D (NUMERAL (BIT1 Anum)) (NUMERAL (BIT1 ZERO))"
DROP__compute__e4:"num", "list", "fun", "bool", "NUMERAL", "DROP", "CONS", "BIT2", "BIT1", "=", "A(A)list", "AA", "Anum", "BIT1 Anum", "BIT2 Anum", "CONS AA A(A)list", "DROP (NUMERAL (BIT1 Anum)) A(A)list", "DROP (NUMERAL (BIT2 Anum)) (CONS AA A(A)list)", "NUMERAL (BIT1 Anum)", "NUMERAL (BIT2 Anum)"
