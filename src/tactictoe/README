TacticToe is a tactic-based prover.

It searches for a proof by repeatedly applying suitable tactics for each goal state that it produces.

SKIPPING RECORDING of the HOL4 standard library:
  1) Download the file ttt_tacdata_kananaskis-14.tar.gz from
     http://grid01.ciirc.cvut.cz/~thibault/
  2) Extract it in your HOL/src/tactictoe directory.
     This creates the directory HOL/src/tactictoe/ttt_tacdata.
  3) Optionally download from the same location
     "tnn_for_tactictoe" to a file "path_to_tnn"

RECORDING all ancestor theories not recorded yet:
  load "tttUnfold"; open tttUnfold;
  load "fooTheory";
  ttt_record (); (* takes about 8 hours for the full standard library *)
  (* tip: use ttt_record_thy "foo" to only record the "foo" Theory *)

WARNING: if fooTheory depends on structures not available in sigobj (or in the
holstate), place a Holmakefile in the directory src/AI/sml_inspection/open
(create it if it does not exist) with the line:
  INCLUDES = directory-of-the-custom-structures
Otherwise, the tactics and arguments declared in those structures will not be
recorded.

DEFAULT USAGE (after RECORDING or SKIPPING RECORDING):
  load "tacticToe"; open tacticToe;
  ttt ([],``1+1=2``);
  tactictoe ``1+1=2``; (* alternatively *)

USAGE with tree neural network:
  load "tacticToe"; open tacticToe;
  val tnn = mlTreeNeuralNetwork.read_tnn "path_to_tnn";
  load "sum_numTheory"; open sum_numTheory;
  set_timeout 60.0;
  ttt_tnn tnn ([],``!n. 2 * SUM (n+1) I = n * (n+1) ``);

USAGE after failure:
  load "tacticToe"; open tacticToe;
  val tnn = mlTreeNeuralNetwork.read_tnn "path_to_tnn";
  load "sum_numTheory"; open sum_numTheory;
  set_timeout 2.0;
  (* also works with ttt *)
  ttt_tnn tnn ([],``!n. 2 * SUM (n+1) I = n * (n+1) ``);
  suggest_depth := NONE;
  suggest ();

CLEANING:
  TacticToe depends on data stored in src/tactictoe/ttt_tacdata and
  src/AI/sml_inspection/open.
  It is usually necessary to remove these directories before re-recording.
  This can be done by calling tttUnfold.ttt_clean_record ().

EXAMPLE: see examples in src/tactictoe/examples.

NOTES FOR DEVELOPERS:
  Keep up-to-date:
  1) core theories in src/AI/sml_inspection/smlOpen.sml
  2) infix tokens in src/tactictoe/src/tttInfix.sml,
  3) polyml values in src/tactictoe/src/tttUnfold.sml.
  Debugging directories:
  1) Output of the modified theory foo is can be found in
     src/AI/sml_inspection/buildheap/buildheap_fooScript_ttt.
     Set aiLib.debug_flag and to true or/and smlRedirect.hide_flag to false
     for more output.
  2) A copy of the modified theory is saved under src/tactictoe/scripts
     for further inspection.
