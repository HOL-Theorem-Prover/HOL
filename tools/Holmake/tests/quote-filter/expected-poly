"foo \
	  \bar"
(Parse.Term [QUOTE " (*#loc 3 3*)\"foo\""])
[QUOTE " (*#loc 4 2*)foo = #\"`\""]
[QUOTE " (*#loc 5 2*)\"\\\"\""]
(Parse.Term [QUOTE " (*#loc 6 3*)\t"])
(Parse.Term [QUOTE " (*#loc 7 3*)(* foo"])
[QUOTE " (*#loc 8 2*)^"]
"\"" (Parse.Term [QUOTE " (*#loc 9 8*)foo"])
"\\" [QUOTE " (*#loc 10 7*)foo"]
[QUOTE " (*#loc 11 2*)putting unescaped backticks into ", ANTIQUOTE ((antiquotes #"`")),QUOTE " (*#loc 11 53*) is fine"]
(Parse.Term [QUOTE " (*#loc 12 3*)foo\n\
\bar"])
(Parse.Term [QUOTE " (*#loc 14 3*)\"an embedded string with \\\n\
\\\protected newlines\""])
[QUOTE " (*#loc 16 2*)s1 ^ s2"]
[QUOTE " (*#loc 17 2*)s1 ^^\n\
\s2"]
(* ` *)
[QUOTE " (*#loc 20 2*)", ANTIQUOTE ((fromMLnum nm)),QUOTE " (*#loc 20 17*) (* *) "];
(* (*  *) `;*)

val (even_rules,even_ind,even_cases) = (fn q => fn _ => IndDefLib.xHol_reln "even" q) [QUOTE " (*#loc 23 16*)\n\
\ even 0 /\\\n\
\(!n. even n ==> odd (n + 1)) /\\\n\
\\n\
\  (!m. odd m ==> even (m + 1))"
] NONE; val _ = CompilerSpecific.quietbind "val even_strongind = DB.fetch \"-\" \"even_strongind\" handle HOL_ERR _ => boolTheory.TRUTH;";val even_0 = boolLib.save_thm("even_0[simp]", Drule.cj 1 even_rules);val even_suc = boolLib.save_thm("even_suc", Drule.cj 3 even_rules);

val foo = TotalDefn.qDefine "foo" [QUOTE " (*#loc 30 16*)\n\
\  foo x = if x < 2 then 1 else x * foo (x - 1)"
] NONE; val _ = CompilerSpecific.quietbind "val foo_ind = DB.fetch \"-\" \"foo_ind\" handle HOL_ERR _ => boolTheory.TRUTH;";
