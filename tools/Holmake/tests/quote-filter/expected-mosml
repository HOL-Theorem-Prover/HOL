1"foo \
	  \bar"
(Parse.Term [QUOTE " (*#loc 3 3*)\"foo\""])
[QUOTE " (*#loc 4 2*)foo = #\"^`\""]
[QUOTE " (*#loc 5 2*)\"\\\"\""]
(Parse.Term [QUOTE " (*#loc 6 3*)\009"])
(Parse.Term [QUOTE " (*#loc 7 3*)(* foo"])
[QUOTE " (*#loc 8 2*)^^"]
"\"" (Parse.Term [QUOTE " (*#loc 9 8*)foo"])
"\\" [QUOTE " (*#loc 10 7*)foo"]
[QUOTE " (*#loc 11 2*)putting unescaped backticks into ", ANTIQUOTE (antiquotes #"`"), QUOTE " (*#loc 11 53*) is fine"]
(Parse.Term [QUOTE " (*#loc 12 3*)foo\n\
\bar"])
(Parse.Term [QUOTE " (*#loc 14 3*)\"an embedded string with \\\n\
\\\protected newlines\""])
[QUOTE " (*#loc 16 2*)\"more embedding \\\n\
\ \\ho hum\""]
(Parse.Term [QUOTE " (*#loc 18 4*)\"embedded string without\n\
\   protected newlines\""])
[QUOTE " (*#loc 20 2*)s1 ^ s2"]
[QUOTE " (*#loc 21 2*)s1 ^^\n\
\s2"]
(* ` *)
[QUOTE " (*#loc 24 2*)", ANTIQUOTE (fromMLnum nm), QUOTE " (*#loc 24 17*) (* *) "];
(* (*  *) `;*)

val (even_rules,even_ind,even_cases) = IndDefLib.xHol_reln "even" [QUOTE "( (*#loc 27 16*)\n\
\ (*#loc 28 12*) even 0\n\
\) /\\ ( (*#loc 29 5*) (!n. even n ==> odd (n + 1))\n\
\) /\\ ( (*#loc 30 12*)\n\
\  (!m. odd m ==> even (m + 1))\n\
\)"]; val even_strongind = DB.fetch "-" "even_strongind" handle Feedback.HOL_ERR _ => boolTheory.TRUTH;; val even_0 = boolLib.save_thm("even_0[simp]", Drule.cj 1 even_rules handle HOL_ERR _ => boolTheory.TRUTH); val even_suc = boolLib.save_thm("even_suc", Drule.cj 3 even_rules handle HOL_ERR _ => boolTheory.TRUTH);

val foo = TotalDefn.qDefine "foo" [QUOTE " (*#loc 34 16*)\n\
\  foo x = if x < 2 then 1 else x * foo (x - 1)\n\
\"] NONE; val foo_ind = DB.fetch "-" "foo_ind" handle Feedback.HOL_ERR _ => boolTheory.TRUTH;;

val (compile_rel_rules,compile_rel_ind,compile_rel_cases) = IndDefLib.xHol_reln "compile_rel" [QUOTE "( (*#loc 38 23*)\n\
\  (* (*  *) *)\n\
\ (*#loc 40 8*)\n\
\  compile_rel foo bar\n\
\) /\\ ( (*#loc 42 8*)\n\
\  compile_rel foo bar\n\
\)"]; val compile_rel_strongind = DB.fetch "-" "compile_rel_strongind" handle Feedback.HOL_ERR _ => boolTheory.TRUTH;; val compile_rel_Var = boolLib.save_thm("compile_rel_Var", Drule.cj 1 compile_rel_rules handle HOL_ERR _ => boolTheory.TRUTH); val compile_rel_Ret = boolLib.save_thm("compile_rel_Ret", Drule.cj 2 compile_rel_rules handle HOL_ERR _ => boolTheory.TRUTH);

(* next_sym reads the next symbol from a string, returning NONE if at eof *)
val next_sym_def = TotalDefn.qDefine "next_sym_def" [QUOTE " (*#loc 47 25*)\n\
\     foo = isPREFIX \"(*\" (c::str)\n\
\"] (SOME (
  WF_REL_TAC [QUOTE " (*#loc 50 15*)measure (LENGTH o FST) "] THEN REPEAT STRIP_TAC
)); val next_sym_ind = DB.fetch "-" "next_sym_ind" handle Feedback.HOL_ERR _ => boolTheory.TRUTH;;

(Parse.Term [QUOTE " (*#loc 53 4*)f \226\128\185foo\"\226\128\186"])

val sexpPEG_def = TotalDefn.qDefine "sexpPEG_def" [QUOTE " (*#loc 55 24*)\n\
\  #\"\\\\\";\n\
\"] NONE; val sexpPEG_ind = DB.fetch "-" "sexpPEG_ind" handle Feedback.HOL_ERR _ => boolTheory.TRUTH;;

val sexpPEG_start = boolLib.save_thm("sexpPEG_start[simp]", SIMP_CONV(srw_ss())[sexpPEG_def](Parse.Term [QUOTE " (*#loc 59 66*)sexpPEG.start"])

);val _ = bossLib.Datatype [QUOTE " (*#loc 61 11*) foo = bar\n\
\"];

val (reln_rules,reln_ind,reln_cases) = IndDefLib.xHol_reln "reln" [QUOTE "( (*#loc 64 16*)\n\
\   !x y. x < y ==> reln (x + 1) y\n\
\) /\\ ( (*#loc 66 5*)\n\
\   !x y. reln x y ==> reln y x\n\
\) /\\ ( (*#loc 68 9*)\n\
\   !x. reln x 0\n\
\)"]; val reln_strongind = DB.fetch "-" "reln_strongind" handle Feedback.HOL_ERR _ => boolTheory.TRUTH;; val reln_zero = boolLib.save_thm("reln_zero", Drule.cj 3 reln_rules handle HOL_ERR _ => boolTheory.TRUTH);

val (reln_rules,reln_ind,reln_cases) = IndDefLib.xHol_reln "reln" [QUOTE "( (*#loc 72 16*)\n\
\ (*#loc 73 10*) !x y. x < y ==> reln (x + 1) y\n\
\) /\\ ( (*#loc 74 8*)\n\
\   (!x y. reln x y ==> reln y x) /\\\n\
\   (!x. reln x 0) /\\\n\
\   (!y. reln 100 y)\n\
\)"]; val reln_strongind = DB.fetch "-" "reln_strongind" handle Feedback.HOL_ERR _ => boolTheory.TRUTH;; val reln_name1 = boolLib.save_thm("reln_name1", Drule.cj 1 reln_rules handle HOL_ERR _ => boolTheory.TRUTH); val reln_sym = boolLib.save_thm("reln_sym", Drule.cj 2 reln_rules handle HOL_ERR _ => boolTheory.TRUTH);

val foo = ba'r [QUOTE " (*#loc 80 18*)\n\
\  this is a quotation with\n\
\ nested \"string\\n\"\n\
\"];

val thmname = boolLib.save_thm("thmname", expression

);val _ = bar_x [QUOTE " (*#loc 87 13*)\n\
\  another quotation (* with unfinished comment\n\
\  and bare \" with ^foo and ^\n\
\"];

val x = 92 + 10;
val   y = 11
val s = ""  
val s' = "foo.sml" (* #(FILE) *)

val thm = Q.store_thm_at (DB_dtype.mkloc ("foo.sml", 15, true)) ("thm[foo, simp , key = val1 val2]", [QUOTE " (*#loc 15 42*)\n\
\  p /\\ q"], (fn HOL__GOAL__foo => (

  cheat
) HOL__GOAL__foo));

val thm2 = boolLib.save_thm("thm2[foo, simp , key = val1 val2]", exp
);