(* this is an -*- sml -*- file, or near enough *)
fun inc r = (r := !r + 1)
fun dec r = (r := !r - 1)

fun bslash_escape s = "\\" ^ StringCvt.padLeft #"0" 3 (Int.toString (Char.ord(String.sub(s,0))))

datatype quotetype = inQUOTE | inTMQUOTE | inTYQUOTE

datatype qfs = QFS of {comdepth : int ref,
                       pardepth : int ref,
                       antiquote_stack : quotetype list ref,
                       ret_to_initial : bool ref,
                       row      : int ref,
                       rowstart : int ref,
                       inscript : bool}

fun newstate inscriptp =
  QFS {comdepth = ref 0,
       pardepth = ref 0,
       antiquote_stack = ref [],
       row = ref 0,
       rowstart = ref 0,
       inscript = inscriptp,
       ret_to_initial = ref true}

fun linenum (QFS{row,...}) = !row + 1

fun resetstate (QFS{comdepth, pardepth, antiquote_stack,...}) =
    (comdepth := 0; pardepth := 0; antiquote_stack := [])


fun ECHO (QFS _) s = s
fun print (QFS _) s = s
fun ifscript (QFS {inscript,...}) s1 s2 =
  if inscript then s1 else s2

fun dest_ml_thm_binding s =
    let
      val ss = Substring.dropl Char.isSpace (Substring.extract(s, 7, NONE))
      val (nmss, _) = Substring.position "[" ss
    in
      (Substring.string nmss, Substring.string ss)
    end

fun makesafe c =
    if not (Char.isPrint c) then "\\" ^ StringCvt.padLeft #"0" 3 (Int.toString (Char.ord c))
    else str c

fun safeprint x s = ECHO x (String.translate makesafe s)

fun drop_upto c s = let
  (* returns the substring of s that begins at the first occurrence of c *)
  open Substring
  val ss = full s
  val remainder = dropl (fn c' => c <> c') ss
in
  string remainder
end

(* generate location pragmas inside fragments (not antiquoted ones), for the lex
er *)
(*
val row = ref 0
val rowstart = ref 0
*)
fun nextline (QFS {row, rowstart, ...}) pos = (inc row; rowstart := pos)
fun locpragma (QFS {row, rowstart, ...}) (s,pos) off
  = " (*#loc "^Int.toString((!row) + 1)^" "^
    Int.toString(pos + size s - (!rowstart) - off + 1)^"*)"
    (* NB: the initial space is critical, or else the comment might not be recog
nised
       when prepended by a paren or symbol char.  --KW
       See cvs log comment at rev 1.2 of src/parse/base_tokens.lex *)

fun newline (arg as QFS q) (yypos,yytext) =
  (nextline arg (yypos + size yytext); ECHO arg "\n");

fun qnewline arg (yypos,yytext) =
    (nextline arg (yypos + size yytext);
     ECHO arg "\\n\\\n\\")

fun dolocpragma (arg as QFS {row, rowstart, ...}) (s,pos)
  = let val ss = Substring.full s
        val sr = Substring.dropl (not o Char.isDigit) ss
        val sc = Substring.dropl (Char.isDigit) sr
    in
      row := valOf (Int.fromString(Substring.string sr)) - 1;
      rowstart := pos + size s -
                  (valOf (Int.fromString(Substring.string sc)) - 1);
      ECHO arg s
    end

type lexresult = int*string

fun eof arg = (~1, "")
%%
%structure QuoteFilter
%s string comment qcomment tmcomment tycomment tyquote tmquote quote ANTIQ thmval;
%arg (UserDeclarations.QFS {comdepth, pardepth, antiquote_stack, row, rowstart, inscript, ret_to_initial});
%full

letter = [A-Za-z];
digit = [0-9];
symbol = [-!%&$+/:<=>?@~|#*\\^];
alphaMLid = {letter} ({letter} | {digit} | _ | "'")*;
alphaMLid_list = {alphaMLid} (","{alphaMLid})*;
MLid =  {alphaMLid} | {symbol}+;
ws = [\ \t];
newline = "\n" | "\015\n";
locpragma = "(*#loc" {ws}+ {digit}* {ws}+ {digit}* {ws}* "*)";
lowergreek = "\206" [\177-\191] | "\207" [\128-\137] ;
fullquotebegin = "``" | "\226\128\156" ;
fullquoteend = "``" | "\226\128\157";
quotebegin = "`" | "\226\128\152";
quoteend = "`" | "\226\128\153";
Theorempfx = "Theorem"{ws}+{alphaMLid}("["{alphaMLid_list}"]")?;
declforms = "val"|"fun"|"structure"|"signature"|"functor"|"abstype"|"datatype"|"exception"|"open"|";"|"infix"[lr]?;

%%

{locpragma} => ((yypos,
               (dolocpragma yyarg (yytext, yypos))));

<INITIAL>"(*" => ((yypos,
                 (inc comdepth; ret_to_initial := true; YYBEGIN comment;
                  ECHO yyarg yytext)));
<thmval>"(*" => ((yypos,
                (inc comdepth; ret_to_initial := false; YYBEGIN comment;
                 ECHO yyarg yytext)));
<INITIAL,thmval>"(" => ((yypos,
                       (inc pardepth; ECHO yyarg yytext)));
<INITIAL,thmval>")" => ((yypos,
                (dec pardepth;
                 if !pardepth < 1 then
                   case !antiquote_stack of
                     [] => ECHO yyarg yytext
                   | h::t => (antiquote_stack := t;
                              YYBEGIN (case h of
                                         inQUOTE => quote
                                       | inTYQUOTE => tyquote
                                       | inTMQUOTE => tmquote);
                              ECHO yyarg
                                (")),QUOTE \""^
                                 locpragma yyarg (yytext, yypos) 0)
                             )
                 else ECHO yyarg yytext)));
<INITIAL,thmval>{Theorempfx}{ws}*":" => ((yypos,
(
  ifscript yyarg
    (let
      infix |> fun x |> f = f x
      val pfx = if !ret_to_initial then "" else ");"
      val s0 = String.extract(yytext,0,SOME (size yytext - 1)) (* drop colon *)
      val s = s0 |> Substring.full |> Substring.dropr Char.isSpace
                 |> Substring.string (* drop wspace between name and lparen *)
      val (thname,with_attrs_string) = dest_ml_thm_binding s
    in
      ret_to_initial := true;
      YYBEGIN quote;
      ECHO yyarg (pfx ^
                  "val " ^ thname ^ " = Q.store_thm(\"" ^ with_attrs_string ^
                  "\"," ^
                  "[QUOTE \""^locpragma yyarg (yytext,yypos) 0)
    end) yytext
)));
<INITIAL>^"QED" => ((yypos,
                   (ifscript yyarg (ECHO yyarg ");") yytext)));
<INITIAL,thmval>{Theorempfx} => ((yypos,
(
  ifscript yyarg
    (let
      val pfx = if !ret_to_initial then "" else ");"
      val (thmname,with_attrs_string) = dest_ml_thm_binding yytext
    in
      ret_to_initial := true;
      ECHO yyarg (pfx ^
                  "val " ^ thmname ^ " = " ^
                  "(fn q => fn tac => Q.store_thm(\"" ^ with_attrs_string ^
                  "\",q,tac))")
    end) yytext
)));
<INITIAL,thmval>{Theorempfx}({ws}|{newline})+"="
 => ((yypos,
(
  ifscript yyarg
    (let
      infix |> fun x |> f = f x
      val pfx = if !ret_to_initial then "" else ");"
      val s0 = String.extract(yytext,0,SOME (size yytext - 1)) (* drop lparen *)
      val s = s0 |> Substring.full |> Substring.dropr Char.isSpace
                 |> Substring.string (* drop wspace between name and = *)
      val (thmname,with_attrs_string) = dest_ml_thm_binding s
    in
      YYBEGIN thmval;
      ret_to_initial := false;
      ECHO yyarg (
        pfx ^ "val " ^ thmname ^ " = " ^ "(fn rule => Theory.save_thm(\"" ^
        with_attrs_string ^ "\",rule)) ("
      )
    end) yytext
)));
<INITIAL,thmval>{fullquotebegin} {ws}* ":" ({letter} | {ws} | [('] | {digit} | {lowergreek}) =>
             ((yypos,
               (
                 YYBEGIN tyquote;
                 ECHO yyarg
                   ("(Parse.Type [QUOTE \""^locpragma yyarg (yytext,yypos) 2 ^
                    safeprint yyarg (drop_upto #":" yytext)))));
<INITIAL,thmval>{fullquotebegin} {ws}* ":" {newline} => ((yypos,
     (YYBEGIN tyquote;
      ECHO yyarg ("(Parse.Type [QUOTE \""^locpragma yyarg (yytext,yypos) 2) ^
      ":" ^ qnewline yyarg (yypos, yytext))));
<INITIAL,thmval>{fullquotebegin} {ws}* ":^" => ((yypos,
              (antiquote_stack := inTYQUOTE :: !antiquote_stack;
               YYBEGIN ANTIQ;
               ECHO yyarg
                ("(Parse.Type [QUOTE \""^locpragma yyarg (yytext,yypos) 2^
                               ":\", ANTIQUOTE ("))));
<INITIAL,thmval>{fullquotebegin} => ((yypos,
   (YYBEGIN tmquote;
    ECHO yyarg ("(Parse.Term [QUOTE \""^locpragma yyarg (yytext,yypos) 0))));
<INITIAL,thmval>{quotebegin} => ((yypos,
   (YYBEGIN quote; ECHO yyarg ("[QUOTE \""^locpragma yyarg (yytext,yypos) 0))));
<INITIAL,thmval>"\"" => ((yypos, (YYBEGIN string; ECHO yyarg yytext)));
<INITIAL,thmval>{newline} => ((yypos, newline yyarg (yypos,yytext)));
<INITIAL,thmval>"op"{ws}+"THEN1" => ((yypos, (ECHO yyarg yytext)));
<INITIAL>"val"{ws}+"THEN1" => ((yypos, (ECHO yyarg yytext)));
<INITIAL>"infix"[lr]?{ws}+({digit}+{ws}*)?"THEN1" => ((yypos, (yytext)));
<INITIAL,thmval>"op"{ws}*">-" => ((yypos, (ECHO yyarg yytext)));
<INITIAL>"val"{ws}*">-" => ((yypos, (ECHO yyarg yytext)));
<INITIAL>"infix"[lr]?{ws}+({digit}+{ws}*)?">-" => ((yypos, (yytext)));
<INITIAL,thmval>"THEN1" => ((yypos,
                           (ifscript yyarg
                              (">>- " ^ Int.toString (linenum yyarg) ^ " ??")
                              yytext)));
<INITIAL,thmval>">-" => ((yypos,
                        (ifscript yyarg
                           (">>- " ^ Int.toString (linenum yyarg) ^ " ??")
                           yytext)));
<thmval>{declforms} => ((yypos,
(
  ret_to_initial := true;
  YYBEGIN INITIAL;
  ECHO yyarg (");" ^ yytext)
)));
<INITIAL,thmval>{MLid} => ((yypos, (yytext)));
<INITIAL,thmval>. => ((yypos, (ECHO yyarg yytext)));

<string>"\\\\" => ((yypos, (ECHO yyarg yytext)));
<string>"\\\"" => ((yypos, (ECHO yyarg yytext)));
<string>"\"" => ((yypos,
(
  YYBEGIN (if !ret_to_initial then INITIAL else thmval);
  ECHO yyarg yytext
)));
<string>{newline} => ((yypos, (newline yyarg (yypos,yytext))));
<string>[\128-\255] => ((yypos, (ECHO yyarg (bslash_escape yytext))));
<string>[^\\"\n\015\128-\255]{1,100} => ((yypos, (ECHO yyarg yytext)));
<string>. => ((yypos, (ECHO yyarg yytext)));

<comment,tmcomment,tycomment,qcomment>"(*" => ((yypos, (inc comdepth; ECHO yyarg yytext)));
<comment>"*)" => ((yypos, (dec comdepth;
                  if !comdepth < 1 then
                    YYBEGIN (if !ret_to_initial then INITIAL else thmval)
                  else ();
                  ECHO yyarg yytext)));
<tmcomment>"*)" => ((yypos, (dec comdepth;
                    if !comdepth < 1 then YYBEGIN tmquote else ();
                    ECHO yyarg yytext)));
<tycomment>"*)" => ((yypos, (dec comdepth;
                    if !comdepth < 1 then YYBEGIN tyquote else ();
                    ECHO yyarg yytext)));
<qcomment>"*)" => ((yypos, (dec comdepth;
                   if !comdepth < 1 then YYBEGIN quote else ();
                   ECHO yyarg yytext)));
<comment>{newline} => ((yypos, (newline yyarg (yypos,yytext))));
<tmcomment,tycomment,qcomment>{newline} => ((yypos,
   (qnewline yyarg (yypos,yytext))));
<tmcomment,tycomment,qcomment>"\\" => ((yypos, (ECHO yyarg "\\\\")));
<tmcomment,tycomment,qcomment>"\"" => ((yypos, (ECHO yyarg "\\\"")));
<tmcomment,tycomment,qcomment>"\t" => ((yypos, (ECHO yyarg "\\t")));
<tmcomment,tycomment,qcomment>"^`" => ((yypos, (ECHO yyarg "`")));
<tmcomment,tycomment>{fullquoteend} => ((yypos,
   (comdepth := 0;
    YYBEGIN (if !ret_to_initial then INITIAL else thmval); ECHO yyarg "\"])")));
<qcomment>{newline}"Proof" => ((yypos,
(
  comdepth := 0; YYBEGIN INITIAL; nextline yyarg (yypos + size yytext);
  ECHO yyarg "\"],"
)));
<qcomment>{quoteend} => ((yypos,
  (comdepth := 0; YYBEGIN (if !ret_to_initial then INITIAL else thmval);
   ECHO yyarg "\"]")));
<tmcomment,tycomment,qcomment>[\128-\255] => ((yypos,
  (ECHO yyarg (bslash_escape yytext))));
<comment,tmcomment,tycomment,qcomment>. => ((yypos, (ECHO yyarg yytext)));

<quote,tmquote,tyquote>"^"+{ws} => ((yypos, (ECHO yyarg yytext)));
<quote,tmquote,tyquote>"^"+{newline} => ((yypos,
   (ECHO yyarg (String.substring(yytext,0,size yytext - 1) ^
                qnewline yyarg (yypos,yytext)))));
<quote,tmquote,tyquote>"^^" => ((yypos, (ECHO yyarg "^")));
<quote,tmquote,tyquote>"^`" => ((yypos, (ECHO yyarg "`")));
<quote,tmquote,tyquote>"^"{symbol} => ((yypos, (ECHO yyarg yytext)));
<quote,tmquote,tyquote>{newline} => ((yypos, (qnewline yyarg (yypos,yytext))));

<quote>{quoteend} => ((yypos, (YYBEGIN (if !ret_to_initial then INITIAL else thmval);
                      ECHO yyarg "\"]")));
<quote>{newline}"Proof" => ((yypos,
(
  (* can't happen in a thmval *)
  YYBEGIN INITIAL; nextline yyarg (yypos + size yytext);
  ECHO yyarg "\"],\n"
)));
<tmquote,tyquote>{fullquoteend} => ((yypos,
  (YYBEGIN (if !ret_to_initial then INITIAL else thmval); ECHO yyarg "\"])")));

<quote>"(*" => ((yypos, (inc comdepth; YYBEGIN qcomment; ECHO yyarg yytext)));
<tmquote>"(*" => ((yypos, (inc comdepth; YYBEGIN tmcomment; ECHO yyarg yytext)));
<tyquote>"(*" => ((yypos, (inc comdepth; YYBEGIN tycomment; ECHO yyarg yytext)));

<quote>"^" => ((yypos,(YYBEGIN ANTIQ; antiquote_stack := inQUOTE :: !antiquote_stack;
               ECHO yyarg "\", ANTIQUOTE (")));
<tmquote>"^" => ((yypos,(YYBEGIN ANTIQ;
                 antiquote_stack := inTMQUOTE :: !antiquote_stack;
                 ECHO yyarg "\", ANTIQUOTE (")));
<tyquote>"^" => ((yypos, (YYBEGIN ANTIQ;
                 antiquote_stack := inTYQUOTE :: !antiquote_stack;
                 ECHO yyarg "\", ANTIQUOTE (")));


<quote,tmquote,tyquote>[\128-\255] => ((yypos, (ECHO yyarg (bslash_escape yytext))));
<quote,tmquote,tyquote>[^`\n\015^ \t(*\128-\255]+ => ((yypos,
  (ECHO yyarg (String.toString yytext))));
<quote,tmquote,tyquote>. => ((yypos, (ECHO yyarg (String.toString yytext))));

<ANTIQ>{MLid} => ((yypos, (case !antiquote_stack of
                    [] => YYBEGIN quote (* error in all likelihood *)
                  | h :: t => (antiquote_stack := t;
                               YYBEGIN (case h of
                                          inQUOTE => quote
                                        | inTMQUOTE => tmquote
                                        | inTYQUOTE => tyquote));
                  ECHO yyarg (yytext ^
                              "),QUOTE \""^locpragma yyarg (yytext,yypos) 0))));
<ANTIQ>"(" => ((yypos, (pardepth := 1; YYBEGIN INITIAL; ECHO yyarg yytext)));
<ANTIQ>{ws}+ => (continue());
<ANTIQ>{newline} => ((yypos, (newline yyarg (yypos,yytext))));
<ANTIQ>. => ((yypos, (ECHO yyarg yytext)));
