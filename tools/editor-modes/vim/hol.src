if exists("b:did_hol")
  finish
endif

let s:defaultholpipe =
" initialise pipe if yet unset
if ! has_key(s:,'holpipe')
  if empty($VIMHOL_FIFO)
    let s:holpipe = s:defaultholpipe
  else
    let s:holpipe = $VIMHOL_FIFO
  endif
endif
let s:holtogglequiet = "val _ = HOL_Interactive.toggle_quietdec();"

" create the hidden buffer once
if ! has_key(s:,'holnr') || ! bufexists(s:holnr)
  new
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal nobuflisted
  setlocal noswapfile
  let s:holnr = bufnr("")
  hide
endif


let s:tmpprefix =
fu! TempName()
  let l:n = 0
  while glob(s:tmpprefix.l:n."Script.sml") != ""
    let l:n = l:n + 1
  endwhile
  return s:tmpprefix.l:n."Script.sml"
endf

fu! HOLCStart()
  let s:prev = bufnr("")
  let s:wins = winsaveview()
  silent exe "keepjumps hide bu" s:holnr
  setlocal foldmethod=manual
  keepjumps %d_
endf

fu! HOLCRestore()
  silent exe "w>>" . s:holpipe
  silent exe "keepjumps bu" s:prev
  call winrestview(s:wins)
endf

fu! HOLCEnd()
  let s:temp = TempName()
  silent exe "w" . s:temp
  keepjumps %d_
  silent exe "normal iReadFile " . s:temp
  call HOLCRestore()
endf

fu! HOLLoadSetup()
  keepjumps silent normal P
  keepjumps silent %s/\s/\r/ge
  keepjumps silent %s/\<local\>\|\<open\>\|\<in\>\|\<end\>\|;//ge
  keepjumps silent g/^\s*$/d_
  keepjumps silent g/./normal ival _ = load"
  keepjumps silent g/./normal $a";
endf

fu! HOLLoad()
  call HOLLoadSetup()
  call HOLLoadMessage("HOLLoad",line("$"))
endf

fu! HOLLoadSendQuiet()
  call HOLLoadSetup()
  exe "keepjumps normal Go" . s:holtogglequiet
  let l:l = line(".")-1
  silent normal op
  exe "keepjumps normal Go" . s:holtogglequiet
  call HOLLoadMessage("HOLLoadSendQuiet",l:l)
endf

fu! HOLLoadMessage(s,l)
  keepjumps normal Goval _ = print "
  execute "normal a" . a:s
  execute "keepjumps silent 1," . a:l . "g/./normal f\"yi\"G$a p"
  keepjumps normal G$a completed\n";
endf

fu! HOLSend()
  silent normal P
  call HOLEnsureEnd()
endf

fu! HOLEnsureEnd()
  keepjumps normal G$a;
endf

fu! HOLSendQuiet()
  call HOLSend()
  exe "keepjumps normal ggO" . s:holtogglequiet
  exe "keepjumps normal Go" . s:holtogglequiet
endf

fu! HOLGoal()
  silent keepjumps normal pG$
  keepjumps normal G$a)
  while search(',\_s*)\%$','bW')
    silent keepjumps normal vG$"_dG$a)
  endw
  keepjumps normal gg0iproofManagerLib.g(
endf

fu! HOLUQGoal()
  silent keepjumps normal pG
  if search('^Proof','cbW')
    silent keepjumps normal I``) (BasicProvers.mk_tacmod "
    silent keepjumps normal VGJ
    silent keepjumps normal A") I
  else
    silent keepjumps normal GA``) (BasicProvers.mk_tacmod "Proof") I
  endif
  silent keepjumps normal gg0iproofManagerLib.new_goalstack([],``
endf

let s:stripStart     = ')\|\]\|\['
let s:stripEnd       = '(\|\['
let s:stripBothWords = 'THEN[1L]\?\|by'
let s:stripBoth      = ',\|<<\|>>\|++\|\\\\\|>-\|>|\|>\~'
let s:delim          = '\_[[:space:]()]'

fu! HOLExpand()
  silent keepjumps normal pgg0
  while search('\%^\_s*\%(\%('.s:stripBoth.'\|'.s:stripStart.'\)\|\%('.s:stripBothWords.'\)\)\ze'.s:delim,'cWe')
    silent keepjumps normal vgg0"_d
  endw
  while search('\%(\%('.s:stripBoth.'\|'.s:stripEnd.'\)\|'.s:delim.'\zs\%('.s:stripBothWords.'\)\)\_s*\%$','cW')
    silent keepjumps normal vG$"_dgg0
  endw
  keepjumps normal iproofManagerLib.expand(fn HOLgoal => (
  keepjumps normal G$a) HOLgoal)
endf

fu! HOLSubgoal()
  keepjumps normal iproofManagerLib.expand(bossLib.sg(
  silent normal p
  if search(s:delim.'by'.s:delim.'\_.*','cW')
    silent keepjumps normal vG$"_d
  en
  silent keepjumps normal G$a))
endf

fu! HOLSuffices()
  keepjumps normal iproofManagerLib.expand(bossLib.qsuff_tac(
  silent normal p
  if search(s:delim.'suffices_by'.s:delim.'\_.*','cW')
    silent keepjumps normal vG$"_d
  en
  silent keepjumps normal G$a))
endf

fu! HOLF(f)
  exe "normal i" . a:f
endf

fu! YankThenHOLCall(f,a) range
  silent normal gvy
  call HOLCall(a:f,a:a)
  exe "normal gv\<Esc>"
endf

fu! HOLCall(f,a)
  call HOLCStart()
  call call(a:f,a:a)
  call HOLCEnd()
endf

fu! HOLRepeat(s)
  call HOLCStart()
  exe "normal" v:count1 . "i" . a:s
  call HOLCEnd()
endf

fu! HOLRotate()
  call HOLCStart()
  exe "normal iproofManagerLib.rotate(" . v:count1 .")"
  call HOLCEnd()
endf

fu! HOLINT()
  call HOLCStart()
  normal iInterrupt
  call HOLCRestore()
endf

fu! HOLSelect(l,r)
  let l:cursor = getpos(".")
  if search(a:l,"Wbc") == 0
    return
  endif
  normal v
  if search(a:r,"W") == 0
    normal <ESC>
    call setpos('.', l:cursor)
    return
  endif
  call search(a:r,"ce")
  normal zv
endf

fu! HOLPattern()
  silent keepjumps normal pgg0
  while search('\%^\_s*\%(\%('.s:stripBoth.'\|'.s:stripStart.'\)\|\%('.s:stripBothWords.'\)\)\ze'.s:delim,'cWe')
    silent keepjumps normal vgg0"_d
  endw
  while search('\%(\%('.s:stripBoth.'\|'.s:stripEnd.'\)\|'.s:delim.'\zs\%('.s:stripBothWords.'\)\)\_s*\%$','cW')
    silent keepjumps normal vG$"_dgg0
  endw
  keepjumps normal iproofManagerLib.expand_list(Q.SELECT_GOAL_LT(
  keepjumps normal G$a))
endf

if !(exists("maplocalleader"))
  let maplocalleader = "\\"
endif
vn <buffer><silent> <LocalLeader>l :call YankThenHOLCall(function("HOLLoadSendQuiet"),[])<CR>
vn <buffer><silent> <LocalLeader>L :call YankThenHOLCall(function("HOLLoad"),[])<CR>
vn <buffer><silent> <LocalLeader>s :call YankThenHOLCall(function("HOLSend"),[])<CR>
vn <buffer><silent> <LocalLeader>u :call YankThenHOLCall(function("HOLSendQuiet"),[])<CR>
vn <buffer><silent> <LocalLeader>g :call YankThenHOLCall(function("HOLGoal"),[])<CR>
vn <buffer><silent> <LocalLeader>G :call YankThenHOLCall(function("HOLUQGoal"),[])<CR>
vn <buffer><silent> <LocalLeader>e :call YankThenHOLCall(function("HOLExpand"),[])<CR>
vn <buffer><silent> <LocalLeader>S :call YankThenHOLCall(function("HOLSubgoal"),[])<CR>
vn <buffer><silent> <LocalLeader>F :call YankThenHOLCall(function("HOLSuffices"),[])<CR>
vn <buffer><silent> <LocalLeader>P :call YankThenHOLCall(function("HOLPattern"),[])<CR>
nm <buffer><silent><expr> <LocalLeader>l "V".maplocalleader."l"
nm <buffer><silent><expr> <LocalLeader>L "V".maplocalleader."L"
nm <buffer><silent><expr> <LocalLeader>s "V".maplocalleader."s"
nm <buffer><silent><expr> <LocalLeader>u "V".maplocalleader."u"
nm <buffer><silent><expr> <LocalLeader>g "V".maplocalleader."g"
nm <buffer><silent><expr> <LocalLeader>G "V".maplocalleader."G"
nm <buffer><silent><expr> <LocalLeader>e "V".maplocalleader."e"
nm <buffer><silent><expr> <LocalLeader>S "V".maplocalleader."S"
nm <buffer><silent><expr> <LocalLeader>F "V".maplocalleader."F"
nm <buffer><silent><expr> <LocalLeader>P "V".maplocalleader."P"
nn <buffer><silent> <LocalLeader>R :<C-U>call HOLRotate()<CR>
nn <buffer><silent> <LocalLeader>b :<C-U>call HOLRepeat("proofManagerLib.backup();")<CR>
nn <buffer><silent> <LocalLeader>B :<C-U>call HOLRepeat("proofManagerLib.restore();")<CR>
nn <buffer><silent> <LocalLeader>v :call HOLCall(function("HOLF"),["proofManagerLib.save()"])<CR>
nn <buffer><silent> <LocalLeader>d :<C-U>call HOLRepeat("proofManagerLib.drop();")<CR>
nn <buffer><silent> <LocalLeader>p :call HOLCall(function("HOLF"),["proofManagerLib.p()"])<CR>
nn <buffer><silent> <LocalLeader>r :call HOLCall(function("HOLF"),["proofManagerLib.restart()"])<CR>
nn <buffer><silent> <LocalLeader>c :call HOLINT()<CR>
nn <buffer><silent> <LocalLeader>t :call HOLSelect('`\\|‚Äò','`\\|‚Äô')<CR>
nn <buffer><silent> <LocalLeader>T :call HOLSelect('``\\|‚Äú','``\\|‚Äù')<CR>
nn <buffer><silent> <LocalLeader>a :call HOLSelect('^Triviality\\|^Theorem','^Proof$\\|^Proof\[\_.\{-}\]')<CR>Vo+
nn <buffer><silent> <LocalLeader>y :call HOLCall(function("HOLF"),["Globals.show_types:=not(!Globals.show_types)"])<CR>
nn <buffer><silent> <LocalLeader>n :call HOLCall(function("HOLF"),["Feedback.set_trace \"PP.avoid_unicode\" (1 - Feedback.current_trace \"PP.avoid_unicode\")"])<CR>
no <buffer><LocalLeader>h h

if (!has('terminal') && ! has('nvim'))
    \ || (has('nvim') && !exists(':terminal'))
  " skip terminal feature
  let b:did_hol = 1
  echomsg "vimhol: no support for (n)vim terminal feature"
  finish
endif

" finds hol located next Holmake (the lastmaker)
function! LastmakerHOL()
  let lastmakerfile = ".HOLMK/lastmaker"
  if filereadable(lastmakerfile)
    let lm = readfile(lastmakerfile,"",1)
    if 0 < len(lm)
      " assumes only one Holmake string in lastmaker path
      return fnamemodify(lm[0],":s?Holmake?hol?")
    endif
  endif
  return ""
endfunction

" finds a HOL executable
function! WhichHOL()
  let lm = LastmakerHOL()
  let holdir = $HOLDIR . '/bin/hol'
  " honouring 'hol' next to lastmaker
  if executable(lm)
    return lm
  elseif executable(holdir)
    return holdir
  elseif executable('hol')
    return 'hol'
  endif
  return ""
endfunction

" initialise
if ! has_key(g:,'hol_repl')
  let g:hol_repl = []
endif

function! HOLREPLnew()
  let l:cmd = WhichHOL()
  if ! (0 < len(l:cmd) && executable(l:cmd))
    echoerr 'vimhol: hol command not found ' . l:cmd . ' Set HOLDIR environment variable'
    return 0
  endif
  let s:holpipe = tempname()
  call system('mkfifo '. s:holpipe)
  "echomsg "holrepl pipe " . s:holpipe
  let options = {
  \  "cwd": expand('%:p:h'),
  \  "vertical": 1,
  \  "env": {
  \    "VIMHOL_FIFO": s:holpipe
  \  }}
  let altname = expand("%:r:t") " alternate name for terminal buffer
  echomsg 'vimhol repl cmd: ' . l:cmd
  if has('nvim') " neovim terminal
    let options.stdin = "null"
    vsplit | enew
    let l:terminal_job_id = termopen(l:cmd, options)
    call add(g:hol_repl, {'buf': bufnr(''), 'job': l:terminal_job_id, 'pipe': s:holpipe})
    " scroll to end of terminal buffer
    silent! normal G
  else " vim terminal
    " Uncomment the next vimscript let-assignment to automatically close any
    " terminated terminal buffer window. This is encouraged for advanced users
    " only, because also any buffer with a failing hol command will be closed.
    "let options.term_finish = "close"
    rightbelow let s:replbuf = term_start(l:cmd, options)
    call add(g:hol_repl, {'buf': s:replbuf, 'pipe': s:holpipe})
    call term_setkill(g:hol_repl[-1].buf, 'term')
  endif
  " set (unique) buffer name containing the origin
  let g:hol_repl[-1].altname = 'hol ('. g:hol_repl[-1].buf . '): ' . altname
  exec 'file ' . g:hol_repl[-1].altname
  wincmd p
endfunction

if has('nvim')
  function! HOLREPLsend(text)
    " only send commands if a terminal buffer exists
    if has_key(g:,'hol_repl') && len(g:hol_repl) > 0
      call chansend(g:hol_repl[-1].job, a:text)
    else
      echoerr "vimhol: no active hol repl found"
    endif
  endfunction
else
  function! HOLREPLsend(text)
    " only send commands if a terminal buffer exists
    if has_key(g:,'hol_repl') && len(g:hol_repl) > 0
      call term_sendkeys(g:hol_repl[-1].buf, a:text)
    else
      echoerr "vimhol: no active hol repl found"
    endif
  endfunction
endif

" close terminal
function! HOLREPLclose()
  if has_key(g:,'hol_repl') && len(g:hol_repl) > 0
    call HOLREPLsend("\<C-D>")
    call remove(g:hol_repl, -1)
    " (re)set the current holpipe
    if len(g:hol_repl) > 0
      let s:holpipe = g:hol_repl[-1].pipe
    else
      unlet s:holpipe
    endif
  endif
endfunction
" open a new hol terminal
nn <buffer><silent> <LocalLeader>x :call HOLREPLnew()<CR>
" close a hol_repl buffer
nn <buffer><silent> <LocalLeader>X :call HOLREPLclose()<CR>
" send current line (or highlighted section) to terminal
vn <buffer><silent> <LocalLeader>w "0y:call HOLREPLsend(getreg('0',1) . ";\n")<CR>
nm <buffer><silent><expr> <LocalLeader>w "V".maplocalleader."w"

let b:did_hol = 1
" vim: ft=vim
