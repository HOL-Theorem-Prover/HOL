(global-set-key (kbd "C-!") "‚àÄ")
(global-set-key (kbd "C-?") "‚àÉ")
(global-set-key (kbd "C-&") "‚àß")
(global-set-key (kbd "C-|") "‚à®")
(global-set-key (kbd "C-M->") "‚áí")
(global-set-key (kbd "C-+") "‚áî")
(global-set-key (kbd "C-M-+") "‚Å∫")
(global-set-key (kbd "C-S-u") "‚à™")
(global-set-key (kbd "C-S-i") "‚à©")
(global-set-key (kbd "C-:") "‚àà")
(global-set-key (kbd "C-M-:") "‚¶Ç")
(global-set-key (kbd "C-~") (lambda () (interactive) (insert "¬¨")))
(global-set-key (kbd "C-S-c") "‚äÜ")
(global-set-key (kbd "C-*") (lambda () (interactive) (insert "√ó")))
(global-set-key (kbd "C-S-q") "‚â§")
(global-set-key (kbd "C-M-~") "‚àº")
(global-set-key (kbd "C-M-S-b") "‚ñ°")
(global-set-key (kbd "C-M-S-m") "‚óá") ; diaMond

(global-set-key (kbd "C-{") "‚ü¶")
(global-set-key (kbd "C-}") "‚üß")
(global-set-key (kbd "C-M-{") "‚¶É")
(global-set-key (kbd "C-M-}") "‚¶Ñ")

(define-prefix-command 'hol-unicode-p-map)
(define-prefix-command 'hol-unicode-P-map)
(define-prefix-command 'hol-unicode-not-map)
(define-prefix-command 'hol-unicode-subscript-map)
(define-prefix-command 'hol-unicode-superscript-map)
(define-prefix-command 'hol-unicode-C-map)
(define-prefix-command 'hol-unicode-Q-map)
(define-prefix-command 'hol-unicode-U-map)
(define-prefix-command 'hol-unicode-leftarrow-map)
(define-prefix-command 'hol-unicode-rightarrow-map)
(define-prefix-command 'hol-unicode-lparen-map)
(define-prefix-command 'hol-unicode-rparen-map)
(define-prefix-command 'hol-unicode-shift-map)
(define-prefix-command 'hol-unicode-dquote-map)
(define-prefix-command 'hol-unicode-squote-map)
(define-prefix-command 'hol-unicode-frak-map)
(define-prefix-command 'hol-unicode-calligraphic-map)
(define-prefix-command 'hol-unicode-bboard-map)
(define-prefix-command 'hol-unicode-specialalphabet-map)
(define-key global-map (kbd "C-S-f") 'hol-unicode-shift-map)
(define-key global-map (kbd "C-S-p") 'hol-unicode-p-map)
(define-key global-map (kbd "C-M-S-p") 'hol-unicode-P-map)
(define-key global-map (kbd "C-M-|") 'hol-unicode-not-map)
(define-key global-map (kbd "C-M-_") 'hol-unicode-subscript-map)
(define-key global-map (kbd "C-M-^") 'hol-unicode-superscript-map)
(define-key global-map (kbd "C-S-M-c") 'hol-unicode-C-map)
(define-key global-map (kbd "C-S-M-q") 'hol-unicode-Q-map)
(define-key global-map (kbd "C-S-M-u") 'hol-unicode-U-map)
(define-key global-map (kbd "C-<") 'hol-unicode-leftarrow-map)
(define-key global-map (kbd "C->") 'hol-unicode-rightarrow-map)
(define-key global-map (kbd "C-M-(") 'hol-unicode-lparen-map)
(define-key global-map (kbd "C-M-)") 'hol-unicode-rparen-map)
(define-key global-map (kbd "C-\"") 'hol-unicode-squote-map)
(define-key global-map (kbd "C-M-\"") 'hol-unicode-dquote-map)
(define-key global-map (kbd "C-M-a") 'hol-unicode-specialalphabet-map)

;; Greek : C-S-<char> for lower case version of Greek <char>
;;         add the Meta modifier for upper case Greek letter.
(global-set-key (kbd "C-S-a") "Œ±")
(global-set-key (kbd "C-S-b") "Œ≤")
(global-set-key (kbd "C-S-g") "Œ≥")
(global-set-key (kbd "C-S-d") "Œ¥")
(global-set-key (kbd "C-S-e") "Œµ")
(global-set-key (kbd "C-S-h") "œá")
(global-set-key (kbd "C-S-k") "Œ∫")
(global-set-key (kbd "C-S-l") "Œª")
(global-set-key (kbd "C-S-m") "Œº")
(global-set-key (kbd "C-S-n") "ŒΩ")
(define-key hol-unicode-p-map "i" "œÄ")
(global-set-key (kbd "C-S-o") "œâ")
(global-set-key (kbd "C-S-r") "œÅ")
(global-set-key (kbd "C-S-s") "œÉ")
(global-set-key (kbd "C-S-t") "œÑ")
(global-set-key (kbd "C-S-x") "Œæ")
(define-key hol-unicode-p-map "h" "œï")  ; U+03D5
(define-key hol-unicode-p-map "v" "œÜ")  ; U+03C6
(define-key hol-unicode-p-map "s" "œà")

(global-set-key (kbd "C-S-M-g") "Œì")
(global-set-key (kbd "C-S-M-d") "Œî")
(global-set-key (kbd "C-S-M-l") "Œõ")
(global-set-key (kbd "C-S-M-s") "Œ£")
(global-set-key (kbd "C-S-M-t") "Œò")
(global-set-key (kbd "C-S-M-o") "Œ©")
(global-set-key (kbd "C-S-M-x") "Œû")
(define-key hol-unicode-P-map "i" "Œ†")
(define-key hol-unicode-P-map "h" "Œ¶")
(define-key hol-unicode-P-map "s" "Œ®")

(define-key hol-unicode-not-map "=" "‚â†")
(define-key hol-unicode-not-map ":" "‚àâ")
(define-key hol-unicode-not-map "0" "‚àÖ")
(define-key hol-unicode-not-map "~" "‚âÅ")
(define-key hol-unicode-not-map "<" "‚âÆ")
(define-key hol-unicode-not-map ">" "‚âØ")
(define-key hol-unicode-not-map (kbd "C-<") "‚Üö")
(define-key hol-unicode-not-map (kbd "C->") "‚Üõ")
(define-key hol-unicode-not-map (kbd "C-M-<") "‚áç")
(define-key hol-unicode-not-map (kbd "C-M->") "‚áè")
(define-key hol-unicode-not-map (kbd "C-S-q") "‚â∞")
(define-key hol-unicode-not-map (kbd "C-+") "‚áé")
(define-key hol-unicode-not-map (kbd ",") "‚óÅ")

(define-key hol-unicode-subscript-map "1" "‚ÇÅ")
(define-key hol-unicode-subscript-map "2" "‚ÇÇ")
(define-key hol-unicode-subscript-map "3" "‚ÇÉ")
(define-key hol-unicode-subscript-map "4" "‚ÇÑ")
(define-key hol-unicode-subscript-map "5" "‚ÇÖ")
(define-key hol-unicode-subscript-map "6" "‚ÇÜ")
(define-key hol-unicode-subscript-map "7" "‚Çá")
(define-key hol-unicode-subscript-map "8" "‚Çà")
(define-key hol-unicode-subscript-map "9" "‚Çâ")
(define-key hol-unicode-subscript-map "0" "‚ÇÄ")
(define-key hol-unicode-subscript-map "a" "‚Çê")
(define-key hol-unicode-subscript-map "e" "‚Çë")
(define-key hol-unicode-subscript-map "h" "‚Çï")
(define-key hol-unicode-subscript-map "i" "·µ¢")
(define-key hol-unicode-subscript-map "j" "‚±º")
(define-key hol-unicode-subscript-map "k" "‚Çñ")
(define-key hol-unicode-subscript-map "l" "‚Çó")
(define-key hol-unicode-subscript-map "m" "‚Çò")
(define-key hol-unicode-subscript-map "n" "‚Çô")
(define-key hol-unicode-subscript-map "o" "‚Çí")
(define-key hol-unicode-subscript-map "p" "‚Çö")
(define-key hol-unicode-subscript-map "r" "·µ£")
(define-key hol-unicode-subscript-map "s" "‚Çõ")
(define-key hol-unicode-subscript-map "t" "‚Çú")
(define-key hol-unicode-subscript-map "u" "·µ§")
(define-key hol-unicode-subscript-map "v" "·µ•")
(define-key hol-unicode-subscript-map "x" "‚Çì")
(define-key hol-unicode-subscript-map "+" "‚Çä")
(define-key hol-unicode-subscript-map "=" "‚Çå")
(define-key hol-unicode-subscript-map "-" "‚Çã")

(define-key hol-unicode-superscript-map "1"
  (lambda () (interactive) (insert "¬π")))
(define-key hol-unicode-superscript-map "2"
  (lambda () (interactive) (insert "¬≤")))
(define-key hol-unicode-superscript-map "3"
  (lambda () (interactive) (insert "¬≥")))
(define-key hol-unicode-superscript-map "4" "‚Å¥")
(define-key hol-unicode-superscript-map "5" "‚Åµ")
(define-key hol-unicode-superscript-map "6" "‚Å∂")
(define-key hol-unicode-superscript-map "7" "‚Å∑")
(define-key hol-unicode-superscript-map "8" "‚Å∏")
(define-key hol-unicode-superscript-map "9" "‚Åπ")
(define-key hol-unicode-superscript-map "0" "‚Å∞")
(define-key hol-unicode-superscript-map "+" "‚Å∫")
(define-key hol-unicode-superscript-map "-" "‚Åª")
(define-key hol-unicode-superscript-map "=" "‚Åº")
(define-key hol-unicode-superscript-map "*" "Íô≥")

(define-key hol-unicode-superscript-map "A" "·¥¨")
(define-key hol-unicode-superscript-map "B" "·¥Æ")
(define-key hol-unicode-superscript-map "D" "·¥∞")
(define-key hol-unicode-superscript-map "E" "·¥±")
(define-key hol-unicode-superscript-map "G" "·¥≥")
(define-key hol-unicode-superscript-map "H" "·¥¥")
(define-key hol-unicode-superscript-map "I" "·¥µ")
(define-key hol-unicode-superscript-map "J" "·¥∂")
(define-key hol-unicode-superscript-map "K" "·¥∑")
(define-key hol-unicode-superscript-map "L" "·¥∏")
(define-key hol-unicode-superscript-map "M" "·¥π")
(define-key hol-unicode-superscript-map "N" "·¥∫")
(define-key hol-unicode-superscript-map "O" "·¥º")
(define-key hol-unicode-superscript-map "P" "·¥æ")
(define-key hol-unicode-superscript-map "R" "·¥ø")
(define-key hol-unicode-superscript-map "T" "·µÄ")
(define-key hol-unicode-superscript-map "U" "·µÅ")
(define-key hol-unicode-superscript-map "V" "‚±Ω")
(define-key hol-unicode-superscript-map "W" "·µÇ")
(define-key hol-unicode-superscript-map "a" "·µÉ")
(define-key hol-unicode-superscript-map "b" "·µá")
(define-key hol-unicode-superscript-map "c" "·∂ú")
(define-key hol-unicode-superscript-map "d" "·µà")
(define-key hol-unicode-superscript-map "e" "·µâ")
(define-key hol-unicode-superscript-map "f" "·∂†")
(define-key hol-unicode-superscript-map "g" "·µç")
(define-key hol-unicode-superscript-map "h" " ∞")
(define-key hol-unicode-superscript-map "i" "‚Å±")
(define-key hol-unicode-superscript-map "j" " ≤")
(define-key hol-unicode-superscript-map "k" "·µè")
(define-key hol-unicode-superscript-map "l" "À°")
(define-key hol-unicode-superscript-map "m" "·µê")
(define-key hol-unicode-superscript-map "n" "‚Åø")
(define-key hol-unicode-superscript-map "o" "·µí")
(define-key hol-unicode-superscript-map "p" "·µñ")
(define-key hol-unicode-superscript-map "r" " ≥")
(define-key hol-unicode-superscript-map "s" "À¢")
(define-key hol-unicode-superscript-map "t" "·µó")
(define-key hol-unicode-superscript-map "u" "·µò")
(define-key hol-unicode-superscript-map "v" "·µõ")
(define-key hol-unicode-superscript-map "w" " ∑")
(define-key hol-unicode-superscript-map "x" "À£")
(define-key hol-unicode-superscript-map "y" " ∏")
(define-key hol-unicode-superscript-map "z" "·∂ª")

;; ‚ÇÄ ‚ÇÅ ‚ÇÇ ‚ÇÉ ‚ÇÑ ‚ÇÖ ‚ÇÜ ‚Çá ‚Çà ‚Çâ ‚Çä ‚Çã ‚Çå

(define-prefix-command 'hol-unicode-zero-map)
(global-set-key (kbd "C-)") 'hol-unicode-zero-map)
(define-key hol-unicode-zero-map "+" "‚äï")
(define-key hol-unicode-zero-map "*" "‚äó")
(define-key hol-unicode-zero-map "-" "‚äñ")
(define-key hol-unicode-zero-map "." "‚äô")
(define-key hol-unicode-zero-map "/" "‚äò")
(define-key hol-unicode-zero-map "0" "‚àò") ; U+2218

(define-key hol-unicode-U-map "u" "ùïå")
(define-key hol-unicode-U-map "+" "‚äé") ; U+228E "multiset union"
(define-key hol-unicode-U-map "<" "‚äå") ; U+228C called simply "multiset", used in HOL for FUNION
(define-key hol-unicode-U-map "p" "Œ•") ; Up-silon

; parenthesis map - for various forms of parenthesis
(define-key hol-unicode-lparen-map (kbd "C-M-|") "‚¶á")
(define-key hol-unicode-rparen-map (kbd "C-M-|") "‚¶à")
(define-key hol-unicode-lparen-map (kbd "C-M-(") "‚¶Ö")
(define-key hol-unicode-rparen-map (kbd "C-M-)") "‚¶Ü")
(define-key hol-unicode-lparen-map (kbd "C-<") "‚ü®")
(define-key hol-unicode-rparen-map (kbd "C->") "‚ü©")
(define-key hol-unicode-lparen-map (kbd "C-M-<") "‚ü™")
(define-key hol-unicode-rparen-map (kbd "C-M->") "‚ü´")
(define-key hol-unicode-lparen-map (kbd "C-M-^") "‚é°")
(define-key hol-unicode-rparen-map (kbd "C-M-^") "‚é§")
(define-key hol-unicode-lparen-map (kbd "C-M-[") "‚¶ó")
(define-key hol-unicode-rparen-map (kbd "C-M-]") "‚¶ò")

; shift map
(define-key hol-unicode-shift-map (kbd "a") "‚â´")
(define-key hol-unicode-shift-map (kbd "l") "‚â™")
(define-key hol-unicode-shift-map (kbd "r") "‚ãô")

; curly/curvy relational operator map
(define-key hol-unicode-C-map (kbd "_") "‚äÜ")
(define-key hol-unicode-C-map (kbd "-") "‚âÉ")
(define-key hol-unicode-C-map (kbd ".") "‚™Ω")
(define-key hol-unicode-C-map (kbd "c") "‚äÇ")
(define-key hol-unicode-C-map (kbd "l") "‚Ñì")
(define-key hol-unicode-C-map (kbd "p") "‚äÇ")  ; "p" for proper
(define-key hol-unicode-C-map (kbd "q") "‚âº")  ; "q" for less-or-eQual
(define-key hol-unicode-C-map (kbd "=") "‚âà")
(define-key hol-unicode-C-map (kbd "+") "‚âÖ")
(define-key hol-unicode-C-map (kbd "<") "‚â∫")
(define-key hol-unicode-C-map (kbd "^") "‚å¢")

; sQuare operators map
(define-key hol-unicode-Q-map (kbd "q") "‚äë")
(define-key hol-unicode-Q-map (kbd "<") "‚äè")
(define-key hol-unicode-Q-map (kbd "i") "‚äì")
(define-key hol-unicode-Q-map (kbd "u") "‚äî")
(define-key hol-unicode-Q-map (kbd "/") "‚ßÑ")
(define-key hol-unicode-Q-map (kbd "+") "‚äû")
(define-key hol-unicode-Q-map (kbd "-") "‚äü")
(define-key hol-unicode-Q-map (kbd "*") "‚ä†")
(define-key hol-unicode-Q-map (kbd ".") "‚ä°")


; double quotation marks map
(define-key hol-unicode-dquote-map (kbd "C-M-{") "‚Äú")
(define-key hol-unicode-dquote-map (kbd "C-M-}") "‚Äù")
(define-key hol-unicode-dquote-map (kbd "C-M-<")
  (lambda () (interactive) (insert "¬´")))
(define-key hol-unicode-dquote-map (kbd "C-M->")
  (lambda () (interactive) (insert "¬ª")))

; single quotation marks map
(define-key hol-unicode-squote-map (kbd "C-{") "‚Äò")
(define-key hol-unicode-squote-map (kbd "C-}") "‚Äô")
(define-key hol-unicode-squote-map (kbd "C-<")
  (lambda () (interactive) (insert "‚Äπ")))
(define-key hol-unicode-squote-map (kbd "C->")
  (lambda () (interactive) (insert "‚Ä∫")))

(define-key hol-unicode-specialalphabet-map (kbd "c")
  hol-unicode-calligraphic-map)
; calligraphic upper-case map (note numerous special case exceptions)
; app (fn (s1,s2,s3) =>
;        print ("(define-key hol-unicode-calligraphic-map (kbd \"" ^ s1 ^ "\") \"" ^
;               s2 ^ "\")  ; U+" ^ s3 ^ "\n"))
;     (List.tabulate (26, (fn i => (UTF8.chr (i + 65),
;                                   UTF8.chr (i + 0x1D49C),
;                                   Int.fmt StringCvt.HEX (i + 0x1D49C)))));
(define-key hol-unicode-calligraphic-map (kbd "A") "ùíú")  ; U+1D49C
(define-key hol-unicode-calligraphic-map (kbd "B") "‚Ñ¨")  ; U+212C
(define-key hol-unicode-calligraphic-map (kbd "C") "ùíû")  ; U+1D49E
(define-key hol-unicode-calligraphic-map (kbd "D") "ùíü")  ; U+1D49F
(define-key hol-unicode-calligraphic-map (kbd "E") "‚Ñ∞")  ; U+2130
(define-key hol-unicode-calligraphic-map (kbd "F") "‚Ñ±")  ; U+2131
(define-key hol-unicode-calligraphic-map (kbd "G") "ùí¢")  ; U+1D4A2
(define-key hol-unicode-calligraphic-map (kbd "H") "‚Ñã")  ; U+210B
(define-key hol-unicode-calligraphic-map (kbd "I") "‚Ñê")  ; U+2110
(define-key hol-unicode-calligraphic-map (kbd "J") "ùí•")  ; U+1D4A5
(define-key hol-unicode-calligraphic-map (kbd "K") "ùí¶")  ; U+1D4A6
(define-key hol-unicode-calligraphic-map (kbd "L") "‚Ñí")  ; U+2112
(define-key hol-unicode-calligraphic-map (kbd "M") "‚Ñ≥")  ; U+2113
(define-key hol-unicode-calligraphic-map (kbd "N") "ùí©")  ; U+1D4A9
(define-key hol-unicode-calligraphic-map (kbd "O") "ùí™")  ; U+1D4AA
(define-key hol-unicode-calligraphic-map (kbd "P") "ùí´")  ; U+1D4AB
(define-key hol-unicode-calligraphic-map (kbd "Q") "ùí¨")  ; U+1D4AC
(define-key hol-unicode-calligraphic-map (kbd "R") "‚Ñõ")  ; U+211B
(define-key hol-unicode-calligraphic-map (kbd "S") "ùíÆ")  ; U+1D4AE
(define-key hol-unicode-calligraphic-map (kbd "T") "ùíØ")  ; U+1D4AF
(define-key hol-unicode-calligraphic-map (kbd "U") "ùí∞")  ; U+1D4B0
(define-key hol-unicode-calligraphic-map (kbd "V") "ùí±")  ; U+1D4B1
(define-key hol-unicode-calligraphic-map (kbd "W") "ùí≤")  ; U+1D4B2
(define-key hol-unicode-calligraphic-map (kbd "X") "ùí≥")  ; U+1D4B3
(define-key hol-unicode-calligraphic-map (kbd "Y") "ùí¥")  ; U+1D4B4
(define-key hol-unicode-calligraphic-map (kbd "Z") "ùíµ")  ; U+1D4B5
; app (fn (s1,s2,s3) =>
;        print ("(define-key hol-unicode-calligraphic-map (kbd \"" ^ s1 ^ "\") \"" ^
;               s2 ^ "\")  ; U+" ^ s3 ^ "\n"))
;     (List.tabulate (26, (fn i => (UTF8.chr (i + 97),
;                                   UTF8.chr (i + 0x1D4B6),
;                                   Int.fmt StringCvt.HEX (i + 0x1D4B6)))));
(define-key hol-unicode-calligraphic-map (kbd "a") "ùí∂")  ; U+1D4B6
(define-key hol-unicode-calligraphic-map (kbd "b") "ùí∑")  ; U+1D4B7
(define-key hol-unicode-calligraphic-map (kbd "c") "ùí∏")  ; U+1D4B8
(define-key hol-unicode-calligraphic-map (kbd "d") "ùíπ")  ; U+1D4B9
(define-key hol-unicode-calligraphic-map (kbd "e") "‚ÑØ")  ; U+212F
(define-key hol-unicode-calligraphic-map (kbd "f") "ùíª")  ; U+1D4BB
(define-key hol-unicode-calligraphic-map (kbd "g") "‚Ñä")  ; U+210A
(define-key hol-unicode-calligraphic-map (kbd "h") "ùíΩ")  ; U+1D4BD
(define-key hol-unicode-calligraphic-map (kbd "i") "ùíæ")  ; U+1D4BE
(define-key hol-unicode-calligraphic-map (kbd "j") "ùíø")  ; U+1D4BF
(define-key hol-unicode-calligraphic-map (kbd "k") "ùìÄ")  ; U+1D4C0
(define-key hol-unicode-calligraphic-map (kbd "l") "ùìÅ")  ; U+1D4C1
(define-key hol-unicode-calligraphic-map (kbd "m") "ùìÇ")  ; U+1D4C2
(define-key hol-unicode-calligraphic-map (kbd "n") "ùìÉ")  ; U+1D4C3
(define-key hol-unicode-calligraphic-map (kbd "o") "‚Ñ¥")  ; U+2134
(define-key hol-unicode-calligraphic-map (kbd "p") "ùìÖ")  ; U+1D4C5
(define-key hol-unicode-calligraphic-map (kbd "q") "ùìÜ")  ; U+1D4C6
(define-key hol-unicode-calligraphic-map (kbd "r") "ùìá")  ; U+1D4C7
(define-key hol-unicode-calligraphic-map (kbd "s") "ùìà")  ; U+1D4C8
(define-key hol-unicode-calligraphic-map (kbd "t") "ùìâ")  ; U+1D4C9
(define-key hol-unicode-calligraphic-map (kbd "u") "ùìä")  ; U+1D4CA
(define-key hol-unicode-calligraphic-map (kbd "v") "ùìã")  ; U+1D4CB
(define-key hol-unicode-calligraphic-map (kbd "w") "ùìå")  ; U+1D4CC
(define-key hol-unicode-calligraphic-map (kbd "x") "ùìç")  ; U+1D4CD
(define-key hol-unicode-calligraphic-map (kbd "y") "ùìé")  ; U+1D4CE
(define-key hol-unicode-calligraphic-map (kbd "z") "ùìè")  ; U+1D4CF



(define-key hol-unicode-specialalphabet-map (kbd "f") hol-unicode-frak-map)
; fraktur map
; app (fn (s1,s2,s3) =>
;        print ("(define-key hol-unicode-frak-map (kbd \"" ^ s1 ^ "\") \"" ^
;               s2 ^ "\")  ; U+" ^ s3 ^ "\n"))
;     (List.tabulate (26, (fn i => (UTF8.chr (i + 65),
;                                   UTF8.chr (i + 0x1D56C),
;                                   Int.fmt StringCvt.HEX (i + 0x1D56C)))));
(define-key hol-unicode-frak-map (kbd "A") "ùï¨")  ; U+1D56C
(define-key hol-unicode-frak-map (kbd "B") "ùï≠")  ; U+1D56D
(define-key hol-unicode-frak-map (kbd "C") "ùïÆ")  ; U+1D56E
(define-key hol-unicode-frak-map (kbd "D") "ùïØ")  ; U+1D56F
(define-key hol-unicode-frak-map (kbd "E") "ùï∞")  ; U+1D570
(define-key hol-unicode-frak-map (kbd "F") "ùï±")  ; U+1D571
(define-key hol-unicode-frak-map (kbd "G") "ùï≤")  ; U+1D572
(define-key hol-unicode-frak-map (kbd "H") "ùï≥")  ; U+1D573
(define-key hol-unicode-frak-map (kbd "I") "ùï¥")  ; U+1D574
(define-key hol-unicode-frak-map (kbd "J") "ùïµ")  ; U+1D575
(define-key hol-unicode-frak-map (kbd "K") "ùï∂")  ; U+1D576
(define-key hol-unicode-frak-map (kbd "L") "ùï∑")  ; U+1D577
(define-key hol-unicode-frak-map (kbd "M") "ùï∏")  ; U+1D578
(define-key hol-unicode-frak-map (kbd "N") "ùïπ")  ; U+1D579
(define-key hol-unicode-frak-map (kbd "O") "ùï∫")  ; U+1D57A
(define-key hol-unicode-frak-map (kbd "P") "ùïª")  ; U+1D57B
(define-key hol-unicode-frak-map (kbd "Q") "ùïº")  ; U+1D57C
(define-key hol-unicode-frak-map (kbd "R") "ùïΩ")  ; U+1D57D
(define-key hol-unicode-frak-map (kbd "S") "ùïæ")  ; U+1D57E
(define-key hol-unicode-frak-map (kbd "T") "ùïø")  ; U+1D57F
(define-key hol-unicode-frak-map (kbd "U") "ùñÄ")  ; U+1D580
(define-key hol-unicode-frak-map (kbd "V") "ùñÅ")  ; U+1D581
(define-key hol-unicode-frak-map (kbd "W") "ùñÇ")  ; U+1D582
(define-key hol-unicode-frak-map (kbd "X") "ùñÉ")  ; U+1D583
(define-key hol-unicode-frak-map (kbd "Y") "ùñÑ")  ; U+1D584
(define-key hol-unicode-frak-map (kbd "Z") "ùñÖ")  ; U+1D585
; app (fn (s1,s2,s3) =>
;        print ("(define-key hol-unicode-frak-map (kbd \"" ^ s1 ^ "\") \"" ^
;               s2 ^ "\")  ; U+" ^ s3 ^ "\n"))
;     (List.tabulate (26, (fn i => (UTF8.chr (i + 97),
;                                   UTF8.chr (i + 0x1D586),
;                                   Int.fmt StringCvt.HEX (i + 0x1D586)))));
(define-key hol-unicode-frak-map (kbd "a") "ùñÜ")  ; U+1D586
(define-key hol-unicode-frak-map (kbd "b") "ùñá")  ; U+1D587
(define-key hol-unicode-frak-map (kbd "c") "ùñà")  ; U+1D588
(define-key hol-unicode-frak-map (kbd "d") "ùñâ")  ; U+1D589
(define-key hol-unicode-frak-map (kbd "e") "ùñä")  ; U+1D58A
(define-key hol-unicode-frak-map (kbd "f") "ùñã")  ; U+1D58B
(define-key hol-unicode-frak-map (kbd "g") "ùñå")  ; U+1D58C
(define-key hol-unicode-frak-map (kbd "h") "ùñç")  ; U+1D58D
(define-key hol-unicode-frak-map (kbd "i") "ùñé")  ; U+1D58E
(define-key hol-unicode-frak-map (kbd "j") "ùñè")  ; U+1D58F
(define-key hol-unicode-frak-map (kbd "k") "ùñê")  ; U+1D590
(define-key hol-unicode-frak-map (kbd "l") "ùñë")  ; U+1D591
(define-key hol-unicode-frak-map (kbd "m") "ùñí")  ; U+1D592
(define-key hol-unicode-frak-map (kbd "n") "ùñì")  ; U+1D593
(define-key hol-unicode-frak-map (kbd "o") "ùñî")  ; U+1D594
(define-key hol-unicode-frak-map (kbd "p") "ùñï")  ; U+1D595
(define-key hol-unicode-frak-map (kbd "q") "ùññ")  ; U+1D596
(define-key hol-unicode-frak-map (kbd "r") "ùñó")  ; U+1D597
(define-key hol-unicode-frak-map (kbd "s") "ùñò")  ; U+1D598
(define-key hol-unicode-frak-map (kbd "t") "ùñô")  ; U+1D599
(define-key hol-unicode-frak-map (kbd "u") "ùñö")  ; U+1D59A
(define-key hol-unicode-frak-map (kbd "v") "ùñõ")  ; U+1D59B
(define-key hol-unicode-frak-map (kbd "w") "ùñú")  ; U+1D59C
(define-key hol-unicode-frak-map (kbd "x") "ùñù")  ; U+1D59D
(define-key hol-unicode-frak-map (kbd "y") "ùñû")  ; U+1D59E
(define-key hol-unicode-frak-map (kbd "z") "ùñü")  ; U+1D59F


; blackboard map
(define-key hol-unicode-specialalphabet-map (kbd "b") hol-unicode-bboard-map)
;app (fn (s1,s2,s3) =>
;       print ("(define-key hol-unicode-bboard-map (kbd \"" ^ s1 ^ "\") \"" ^
;              s2 ^ "\")  ; U+" ^ s3 ^ "\n"))
;    (List.tabulate (26, (fn i => (UTF8.chr (i + 65),
;                                  UTF8.chr (i + 0x1D538),
;                                  Int.fmt StringCvt.HEX (i + 0x1D538)))))
; except special cases: C, H, N, P, Q, R and Z
(define-key hol-unicode-bboard-map (kbd "A") "ùî∏")  ; U+1D538
(define-key hol-unicode-bboard-map (kbd "B") "ùîπ")  ; U+1D539
(define-key hol-unicode-bboard-map (kbd "C") "‚ÑÇ")  ; U+2102
(define-key hol-unicode-bboard-map (kbd "D") "ùîª")  ; U+1D53B
(define-key hol-unicode-bboard-map (kbd "E") "ùîº")  ; U+1D53C
(define-key hol-unicode-bboard-map (kbd "F") "ùîΩ")  ; U+1D53D
(define-key hol-unicode-bboard-map (kbd "G") "ùîæ")  ; U+1D53E
(define-key hol-unicode-bboard-map (kbd "H") "‚Ñç")  ; U+210D
(define-key hol-unicode-bboard-map (kbd "I") "ùïÄ")  ; U+1D540
(define-key hol-unicode-bboard-map (kbd "J") "ùïÅ")  ; U+1D541
(define-key hol-unicode-bboard-map (kbd "K") "ùïÇ")  ; U+1D542
(define-key hol-unicode-bboard-map (kbd "L") "ùïÉ")  ; U+1D543
(define-key hol-unicode-bboard-map (kbd "M") "ùïÑ")  ; U+1D544
(define-key hol-unicode-bboard-map (kbd "N") "‚Ñï")  ; U+1D545
(define-key hol-unicode-bboard-map (kbd "O") "ùïÜ")  ; U+1D546
(define-key hol-unicode-bboard-map (kbd "P") "‚Ñô")  ; U+1D547
(define-key hol-unicode-bboard-map (kbd "Q") "‚Ñö")  ; U+1D548
(define-key hol-unicode-bboard-map (kbd "R") "‚Ñù")  ; U+1D549
(define-key hol-unicode-bboard-map (kbd "S") "ùïä")  ; U+1D54A
(define-key hol-unicode-bboard-map (kbd "T") "ùïã")  ; U+1D54B
(define-key hol-unicode-bboard-map (kbd "U") "ùïå")  ; U+1D54C
(define-key hol-unicode-bboard-map (kbd "V") "ùïç")  ; U+1D54D
(define-key hol-unicode-bboard-map (kbd "W") "ùïé")  ; U+1D54E
(define-key hol-unicode-bboard-map (kbd "X") "ùïè")  ; U+1D54F
(define-key hol-unicode-bboard-map (kbd "Y") "ùïê")  ; U+1D550
(define-key hol-unicode-bboard-map (kbd "Z") "‚Ñ§")  ; U+1D551
; and numbers
(dotimes (i 10)
  (define-key hol-unicode-bboard-map (kbd (format "%d" i))
    (char-to-string (+ i #x1d7d8))))



; arrow maps
(define-key hol-unicode-leftarrow-map (kbd "-") "‚Üê")
(define-key hol-unicode-leftarrow-map (kbd "C-<") "‚Üû")
(define-key hol-unicode-leftarrow-map (kbd "C->") "‚Üî")
(define-key hol-unicode-leftarrow-map (kbd "<") "‚Ü¢")
(define-key hol-unicode-leftarrow-map (kbd "|") "‚Ü§")
(define-key hol-unicode-leftarrow-map (kbd "`") "‚Üº")
(define-key hol-unicode-leftarrow-map (kbd ",") "‚ÜΩ")
(define-key hol-unicode-leftarrow-map (kbd ".") "‚á†")
(define-key hol-unicode-leftarrow-map (kbd "=") "‚áê")
(define-key hol-unicode-leftarrow-map (kbd "a") "‚Ü´")
(define-key hol-unicode-leftarrow-map (kbd "c") "‚Ü©")
(define-key hol-unicode-leftarrow-map (kbd "w") "‚áú")
(define-key hol-unicode-leftarrow-map (kbd "~") "‚Üú")

(define-key hol-unicode-rightarrow-map (kbd "-") "‚Üí")
(define-key hol-unicode-rightarrow-map (kbd "C->") "‚Ü†")
(define-key hol-unicode-rightarrow-map (kbd ">") "‚Ü£")
(define-key hol-unicode-rightarrow-map (kbd "|") "‚Ü¶")
(define-key hol-unicode-rightarrow-map (kbd "`") "‚áÄ")
(define-key hol-unicode-rightarrow-map (kbd ",") "‚áÅ")
(define-key hol-unicode-rightarrow-map (kbd ".") "‚á¢")
(define-key hol-unicode-rightarrow-map (kbd "=") "‚áí")
(define-key hol-unicode-rightarrow-map (kbd "a") "‚Ü¨")
(define-key hol-unicode-rightarrow-map (kbd "c") "‚Ü™")
(define-key hol-unicode-rightarrow-map (kbd "w") "‚áù")
(define-key hol-unicode-rightarrow-map (kbd "~") "‚Üù")
