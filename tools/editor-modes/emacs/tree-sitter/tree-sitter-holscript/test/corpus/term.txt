===============
String Literal
===============

Definition strlit_def:
  strlit = "cake"
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_term
          (hol_string))))))


==================
Character Literal
==================

Definition charlit_def:
  charlit = #"c"
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_term
          (hol_character))))))


========
0-Tuple
========

Definition tuple0_def:
  tuple0 = ()
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_term
          (hol_tuple))))))


========
2-Tuple
========

Definition tuple2_def:
  tuple2 x y = (x, y)
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_tuple
            (hol_identifier)
            (hol_identifier)))))))


========
3-Tuple
========

Definition tuple3_def:
  tuple3 x y = (x, y, 1)
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_tuple
            (hol_identifier)
            (hol_identifier)
            (hol_number)))))))


===========
Empty List
===========

Definition empty_list_def:
  empty_list = []
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_term
          (hol_list))))))

===============
Singleton List
===============

Definition singleton_list_def:
  singleton_list = [1]
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_term
          (hol_list
            (hol_number)))))))


==========
Cons List
==========

Definition foo_def:
  foo = (x::1::[])
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_term
          (hol_binary_term
            (hol_identifier)
            (hol_binary_term
              (hol_number)
              (hol_list))))))))
=====
List
=====

Definition list_def:
  list x = [1; x]
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_list
            (hol_number)
            (hol_identifier)))))))


==========
Increment
==========

Definition incr_def:
  incr x = x + 1
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_binary_term
            (hol_identifier)
            (hol_number)))))))


===================
Empty List Pattern
===================

Definition empty_def:
  empty [] = 0
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_plist))
        (hol_term
          (hol_number))))))


=======================
Singleton List Pattern
=======================

Definition singleton_def:
  singleton [e] = 0
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_plist
            (hol_pat
              (hol_variable))))
        (hol_term
          (hol_number))))))


=============
List Pattern
=============

Definition list_def:
  list [e; f] = 0
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_plist
            (hol_pat
              (hol_variable))
            (hol_pat
              (hol_variable))))
        (hol_term
          (hol_number))))))


=============
Cons Pattern
=============

Definition cons_def:
  cons (x::xs) = 0
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_pcons
            (hol_pat
              (hol_variable))
            (hol_pat
              (hol_variable))))
        (hol_term
          (hol_number))))))


===================
More Cons Patterns
===================

Definition cons_def:
  cons (x::x'::[]) = 0
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_pcons
            (hol_pat
              (hol_variable))
            (hol_pat
              (hol_variable))
            (hol_pat
              (hol_plist))))
        (hol_term
          (hol_number))))))


=======================
Number Literal Pattern
=======================

Definition foo_def:
  foo 2 = 2
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_number))
        (hol_term
          (hol_number))))))


==========================
Character Literal Pattern
==========================

Definition foo_def:
  foo #"c" = 2
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_character))
        (hol_term
          (hol_number))))))


=======================
String Literal Pattern
=======================

Definition foo_def:
  foo "foo" = 2
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_string))
        (hol_term
          (hol_number))))))


=====================
Function Application
=====================

Definition foo_def:
  foo x = incr x
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_application
            (hol_identifier)
            (hol_identifier)))))))


==========================
More Function Application
==========================

Definition foo_def:
  foo x = add x 2
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_application
            (hol_application
              (hol_identifier)
              (hol_identifier))
            (hol_number)))))))


==================
Annotated Pattern
==================

Definition foo_def:
  foo (x : num) = 2
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable)
          (hol_pannotation
            (hol_atomic_type)))
        (hol_term
          (hol_number))))))


============
Conditional
============

Definition foo_def:
  foo x = if bar x then 0 else 1
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_cond
            (hol_application
              (hol_identifier)
              (hol_identifier))
            (hol_number)
            (hol_number)))))))


=================
Case Distinction
=================

Definition foo_def:
  foo x = case x of SOME x => x | NONE => ARB
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_case
            (hol_term
              (hol_identifier))
            (hol_match
              (hol_pat
                (hol_cname_alphanumeric)
                (hol_pat
                  (hol_variable)))
              (hol_term
                (hol_identifier)))
            (hol_match
              (hol_pat
                (hol_cname_alphanumeric))
              (hol_term
                (hol_identifier)))))))))


=================================
Case Distinction with Extra Pipe
=================================

Definition foo_def:
  foo x = case x of
    | SOME x => x
    | NONE => ARB
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_pat
          (hol_variable))
        (hol_term
          (hol_case
            (hol_term
              (hol_identifier))
            (hol_match
              (hol_pat
                (hol_cname_alphanumeric)
                (hol_pat
                  (hol_variable)))
              (hol_term
                (hol_identifier)))
            (hol_match
              (hol_pat
                (hol_cname_alphanumeric))
              (hol_term
                (hol_identifier)))))))))


============
Nested Case
============

Definition foo_def:
  foo = case x of NONE => case x of NONE => ARB | NONE => ARB
End

---

(source_file
  (hol_definition
    (hol_defname)
    (hol_fn_spec
      (hol_eqn
        (hol_identifier)
        (hol_term
          (hol_case
            (hol_term
              (hol_identifier))
            (hol_match
              (hol_pat
                (hol_cname_alphanumeric))
              (hol_term
                (hol_case
                  (hol_term
                    (hol_identifier))
                  (hol_match
                    (hol_pat
                       (hol_cname_alphanumeric))
                    (hol_term
                      (hol_identifier)))
                  (hol_match
                    (hol_pat
                       (hol_cname_alphanumeric))
                    (hol_term
                      (hol_identifier))))))))))))


==============================
Implication + Less Than Equal
==============================

Theorem foo:
  ∀x. read_quoted_aux cs acc = foo ⇒ LENGTH y ≤ LENGTH cs
Proof
  cheat
QED

---

(source_file
  (hol_theorem_with_proof
    (hol_thmname)
    (hol_thmstmt
      (hol_binder
      (hol_bvar
            (hol_alphanumeric))
        (hol_binary_term
          (hol_binary_term
            (hol_application
              (hol_application
                (hol_identifier)
                (hol_identifier))
              (hol_identifier))
            (hol_identifier))
          (hol_binary_term
            (hol_application
              (hol_identifier)
              (hol_identifier))
            (hol_application
              (hol_identifier)
              (hol_identifier))))))
    (tactic
      (vid_exp
        (longvid
          (vid))))))


=======
Dollar
=======

val _ = “a $ b $ c”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binary_term
          (hol_identifier)
          (hol_binary_term
            (hol_identifier)
            (hol_identifier)))))))


============
Composition
============

val _ = “a o b o c”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binary_term
          (hol_identifier)
          (hol_binary_term
            (hol_identifier)
            (hol_identifier)))))))


============
Parentheses
============

val _ = “(hello)”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_identifier)))))


=====
True
=====

val _ = “T”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_true)))))


======
False
======

val _ = “F”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_false)))))


=======
Forall
=======

val _ = “∀h t. P h t”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binder
          (hol_bvar
            (hol_alphanumeric))
          (hol_bvar
            (hol_alphanumeric))
          (hol_application
            (hol_application
              (hol_identifier)
              (hol_identifier))
            (hol_identifier)))))))


=============
Forall ASCII
=============

val _ = “!h t. P h t”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binder
          (hol_bvar
            (hol_alphanumeric))
          (hol_bvar
            (hol_alphanumeric))
          (hol_application
            (hol_application
              (hol_identifier)
              (hol_identifier))
            (hol_identifier)))))))


===================
Forall (Annotated)
===================

val _ = “∀x:num. T”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binder
          (hol_bvar
            (hol_alphanumeric)
            (hol_atomic_type))
          (hol_true))))))


==================================
Forall (Annotated, Parenthesized)
==================================

val _ = “∀(x:num). T”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binder
          (hol_bvar
            (hol_alphanumeric)
            (hol_atomic_type))
          (hol_true))))))


============================
Conjunction and Disjunction
============================

val _ = “T ∧ F ∨ T”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binary_term
          (hol_binary_term
            (hol_true)
            (hol_false))
          (hol_true))))))


=======
Lambda
=======

val _ = “λx. x + 1”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_binder
          (hol_bvar
            (hol_alphanumeric))
          (hol_binary_term
            (hol_identifier)
            (hol_number)))))))


====
Not
====

val _ = “¬F”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_left_unary_term
          (hol_false))))))


==========
Empty Set
==========

val _ = “{}”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_set)))))


====
Set
====

val _ = “{1; 2}”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_set
          (hol_number)
          (hol_number))))))


================
Type Annotation
================

val _ = “x:num”

---

(source_file
  (val_dec
    (valbind
      (wildcard_pat)
      (quoted_term
        (hol_annotated
          (hol_identifier)
          (hol_atomic_type))))))
